
LM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afb0  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004590  0800b068  0800b068  0001b068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5f8  0800f5f8  000202b0  2**0
                  CONTENTS
  4 .ARM          00000000  0800f5f8  0800f5f8  000202b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f5f8  0800f5f8  000202b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5f8  0800f5f8  0001f5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5fc  0800f5fc  0001f5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0800f600  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000a80  200002b0  0800f8b0  000202b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d30  0800f8b0  00020d30  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027ca1  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e6f  00000000  00000000  00047f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00017263  00000000  00000000  0004dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  00065050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c00  00000000  00000000  00066490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a59  00000000  00000000  00068090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024123  00000000  00000000  0007eae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b7fc  00000000  00000000  000a2c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e408  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f6c  00000000  00000000  0012e458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200002b0 	.word	0x200002b0
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800b03c 	.word	0x0800b03c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200002b4 	.word	0x200002b4
 80000fc:	0800b03c 	.word	0x0800b03c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fde5 	bl	8002004 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd35 	bl	8001eb4 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fdd7 	bl	8002004 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fdcd 	bl	8002004 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fd5d 	bl	8001f38 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd53 	bl	8001f38 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fb55 	bl	8000b58 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fae1 	bl	8000a80 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb47 	bl	8000b58 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb3d 	bl	8000b58 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 faed 	bl	8000acc <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fae3 	bl	8000acc <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fadd>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	46c6      	mov	lr, r8
 8000518:	0243      	lsls	r3, r0, #9
 800051a:	0a5b      	lsrs	r3, r3, #9
 800051c:	024e      	lsls	r6, r1, #9
 800051e:	0045      	lsls	r5, r0, #1
 8000520:	004f      	lsls	r7, r1, #1
 8000522:	00da      	lsls	r2, r3, #3
 8000524:	0fc4      	lsrs	r4, r0, #31
 8000526:	469c      	mov	ip, r3
 8000528:	0a70      	lsrs	r0, r6, #9
 800052a:	4690      	mov	r8, r2
 800052c:	b500      	push	{lr}
 800052e:	0e2d      	lsrs	r5, r5, #24
 8000530:	0e3f      	lsrs	r7, r7, #24
 8000532:	0fc9      	lsrs	r1, r1, #31
 8000534:	09b6      	lsrs	r6, r6, #6
 8000536:	428c      	cmp	r4, r1
 8000538:	d04b      	beq.n	80005d2 <__aeabi_fadd+0xbe>
 800053a:	1bea      	subs	r2, r5, r7
 800053c:	2a00      	cmp	r2, #0
 800053e:	dd36      	ble.n	80005ae <__aeabi_fadd+0x9a>
 8000540:	2f00      	cmp	r7, #0
 8000542:	d061      	beq.n	8000608 <__aeabi_fadd+0xf4>
 8000544:	2dff      	cmp	r5, #255	; 0xff
 8000546:	d100      	bne.n	800054a <__aeabi_fadd+0x36>
 8000548:	e0ad      	b.n	80006a6 <__aeabi_fadd+0x192>
 800054a:	2380      	movs	r3, #128	; 0x80
 800054c:	04db      	lsls	r3, r3, #19
 800054e:	431e      	orrs	r6, r3
 8000550:	2a1b      	cmp	r2, #27
 8000552:	dc00      	bgt.n	8000556 <__aeabi_fadd+0x42>
 8000554:	e0d3      	b.n	80006fe <__aeabi_fadd+0x1ea>
 8000556:	2001      	movs	r0, #1
 8000558:	4643      	mov	r3, r8
 800055a:	1a18      	subs	r0, r3, r0
 800055c:	0143      	lsls	r3, r0, #5
 800055e:	d400      	bmi.n	8000562 <__aeabi_fadd+0x4e>
 8000560:	e08c      	b.n	800067c <__aeabi_fadd+0x168>
 8000562:	0180      	lsls	r0, r0, #6
 8000564:	0987      	lsrs	r7, r0, #6
 8000566:	0038      	movs	r0, r7
 8000568:	f002 fd28 	bl	8002fbc <__clzsi2>
 800056c:	3805      	subs	r0, #5
 800056e:	4087      	lsls	r7, r0
 8000570:	4285      	cmp	r5, r0
 8000572:	dc00      	bgt.n	8000576 <__aeabi_fadd+0x62>
 8000574:	e0b6      	b.n	80006e4 <__aeabi_fadd+0x1d0>
 8000576:	1a2d      	subs	r5, r5, r0
 8000578:	48b3      	ldr	r0, [pc, #716]	; (8000848 <__aeabi_fadd+0x334>)
 800057a:	4038      	ands	r0, r7
 800057c:	0743      	lsls	r3, r0, #29
 800057e:	d004      	beq.n	800058a <__aeabi_fadd+0x76>
 8000580:	230f      	movs	r3, #15
 8000582:	4003      	ands	r3, r0
 8000584:	2b04      	cmp	r3, #4
 8000586:	d000      	beq.n	800058a <__aeabi_fadd+0x76>
 8000588:	3004      	adds	r0, #4
 800058a:	0143      	lsls	r3, r0, #5
 800058c:	d400      	bmi.n	8000590 <__aeabi_fadd+0x7c>
 800058e:	e078      	b.n	8000682 <__aeabi_fadd+0x16e>
 8000590:	1c6a      	adds	r2, r5, #1
 8000592:	2dfe      	cmp	r5, #254	; 0xfe
 8000594:	d065      	beq.n	8000662 <__aeabi_fadd+0x14e>
 8000596:	0180      	lsls	r0, r0, #6
 8000598:	0a43      	lsrs	r3, r0, #9
 800059a:	469c      	mov	ip, r3
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	4663      	mov	r3, ip
 80005a0:	05d0      	lsls	r0, r2, #23
 80005a2:	4318      	orrs	r0, r3
 80005a4:	07e4      	lsls	r4, r4, #31
 80005a6:	4320      	orrs	r0, r4
 80005a8:	bc80      	pop	{r7}
 80005aa:	46b8      	mov	r8, r7
 80005ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d035      	beq.n	800061e <__aeabi_fadd+0x10a>
 80005b2:	1b7a      	subs	r2, r7, r5
 80005b4:	2d00      	cmp	r5, #0
 80005b6:	d000      	beq.n	80005ba <__aeabi_fadd+0xa6>
 80005b8:	e0af      	b.n	800071a <__aeabi_fadd+0x206>
 80005ba:	4643      	mov	r3, r8
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_fadd+0xae>
 80005c0:	e0a7      	b.n	8000712 <__aeabi_fadd+0x1fe>
 80005c2:	1e53      	subs	r3, r2, #1
 80005c4:	2a01      	cmp	r2, #1
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0xb6>
 80005c8:	e12f      	b.n	800082a <__aeabi_fadd+0x316>
 80005ca:	2aff      	cmp	r2, #255	; 0xff
 80005cc:	d069      	beq.n	80006a2 <__aeabi_fadd+0x18e>
 80005ce:	001a      	movs	r2, r3
 80005d0:	e0aa      	b.n	8000728 <__aeabi_fadd+0x214>
 80005d2:	1be9      	subs	r1, r5, r7
 80005d4:	2900      	cmp	r1, #0
 80005d6:	dd70      	ble.n	80006ba <__aeabi_fadd+0x1a6>
 80005d8:	2f00      	cmp	r7, #0
 80005da:	d037      	beq.n	800064c <__aeabi_fadd+0x138>
 80005dc:	2dff      	cmp	r5, #255	; 0xff
 80005de:	d062      	beq.n	80006a6 <__aeabi_fadd+0x192>
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	04db      	lsls	r3, r3, #19
 80005e4:	431e      	orrs	r6, r3
 80005e6:	291b      	cmp	r1, #27
 80005e8:	dc00      	bgt.n	80005ec <__aeabi_fadd+0xd8>
 80005ea:	e0b0      	b.n	800074e <__aeabi_fadd+0x23a>
 80005ec:	2001      	movs	r0, #1
 80005ee:	4440      	add	r0, r8
 80005f0:	0143      	lsls	r3, r0, #5
 80005f2:	d543      	bpl.n	800067c <__aeabi_fadd+0x168>
 80005f4:	3501      	adds	r5, #1
 80005f6:	2dff      	cmp	r5, #255	; 0xff
 80005f8:	d033      	beq.n	8000662 <__aeabi_fadd+0x14e>
 80005fa:	2301      	movs	r3, #1
 80005fc:	4a93      	ldr	r2, [pc, #588]	; (800084c <__aeabi_fadd+0x338>)
 80005fe:	4003      	ands	r3, r0
 8000600:	0840      	lsrs	r0, r0, #1
 8000602:	4010      	ands	r0, r2
 8000604:	4318      	orrs	r0, r3
 8000606:	e7b9      	b.n	800057c <__aeabi_fadd+0x68>
 8000608:	2e00      	cmp	r6, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0xfa>
 800060c:	e083      	b.n	8000716 <__aeabi_fadd+0x202>
 800060e:	1e51      	subs	r1, r2, #1
 8000610:	2a01      	cmp	r2, #1
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x102>
 8000614:	e0d8      	b.n	80007c8 <__aeabi_fadd+0x2b4>
 8000616:	2aff      	cmp	r2, #255	; 0xff
 8000618:	d045      	beq.n	80006a6 <__aeabi_fadd+0x192>
 800061a:	000a      	movs	r2, r1
 800061c:	e798      	b.n	8000550 <__aeabi_fadd+0x3c>
 800061e:	27fe      	movs	r7, #254	; 0xfe
 8000620:	1c6a      	adds	r2, r5, #1
 8000622:	4217      	tst	r7, r2
 8000624:	d000      	beq.n	8000628 <__aeabi_fadd+0x114>
 8000626:	e086      	b.n	8000736 <__aeabi_fadd+0x222>
 8000628:	2d00      	cmp	r5, #0
 800062a:	d000      	beq.n	800062e <__aeabi_fadd+0x11a>
 800062c:	e0b7      	b.n	800079e <__aeabi_fadd+0x28a>
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0x122>
 8000634:	e0f3      	b.n	800081e <__aeabi_fadd+0x30a>
 8000636:	2200      	movs	r2, #0
 8000638:	2e00      	cmp	r6, #0
 800063a:	d0b0      	beq.n	800059e <__aeabi_fadd+0x8a>
 800063c:	1b98      	subs	r0, r3, r6
 800063e:	0143      	lsls	r3, r0, #5
 8000640:	d400      	bmi.n	8000644 <__aeabi_fadd+0x130>
 8000642:	e0fa      	b.n	800083a <__aeabi_fadd+0x326>
 8000644:	4643      	mov	r3, r8
 8000646:	000c      	movs	r4, r1
 8000648:	1af0      	subs	r0, r6, r3
 800064a:	e797      	b.n	800057c <__aeabi_fadd+0x68>
 800064c:	2e00      	cmp	r6, #0
 800064e:	d100      	bne.n	8000652 <__aeabi_fadd+0x13e>
 8000650:	e0c8      	b.n	80007e4 <__aeabi_fadd+0x2d0>
 8000652:	1e4a      	subs	r2, r1, #1
 8000654:	2901      	cmp	r1, #1
 8000656:	d100      	bne.n	800065a <__aeabi_fadd+0x146>
 8000658:	e0ae      	b.n	80007b8 <__aeabi_fadd+0x2a4>
 800065a:	29ff      	cmp	r1, #255	; 0xff
 800065c:	d023      	beq.n	80006a6 <__aeabi_fadd+0x192>
 800065e:	0011      	movs	r1, r2
 8000660:	e7c1      	b.n	80005e6 <__aeabi_fadd+0xd2>
 8000662:	2300      	movs	r3, #0
 8000664:	22ff      	movs	r2, #255	; 0xff
 8000666:	469c      	mov	ip, r3
 8000668:	e799      	b.n	800059e <__aeabi_fadd+0x8a>
 800066a:	21fe      	movs	r1, #254	; 0xfe
 800066c:	1c6a      	adds	r2, r5, #1
 800066e:	4211      	tst	r1, r2
 8000670:	d077      	beq.n	8000762 <__aeabi_fadd+0x24e>
 8000672:	2aff      	cmp	r2, #255	; 0xff
 8000674:	d0f5      	beq.n	8000662 <__aeabi_fadd+0x14e>
 8000676:	0015      	movs	r5, r2
 8000678:	4446      	add	r6, r8
 800067a:	0870      	lsrs	r0, r6, #1
 800067c:	0743      	lsls	r3, r0, #29
 800067e:	d000      	beq.n	8000682 <__aeabi_fadd+0x16e>
 8000680:	e77e      	b.n	8000580 <__aeabi_fadd+0x6c>
 8000682:	08c3      	lsrs	r3, r0, #3
 8000684:	2dff      	cmp	r5, #255	; 0xff
 8000686:	d00e      	beq.n	80006a6 <__aeabi_fadd+0x192>
 8000688:	025b      	lsls	r3, r3, #9
 800068a:	0a5b      	lsrs	r3, r3, #9
 800068c:	469c      	mov	ip, r3
 800068e:	b2ea      	uxtb	r2, r5
 8000690:	e785      	b.n	800059e <__aeabi_fadd+0x8a>
 8000692:	2e00      	cmp	r6, #0
 8000694:	d007      	beq.n	80006a6 <__aeabi_fadd+0x192>
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	03d2      	lsls	r2, r2, #15
 800069a:	4213      	tst	r3, r2
 800069c:	d003      	beq.n	80006a6 <__aeabi_fadd+0x192>
 800069e:	4210      	tst	r0, r2
 80006a0:	d101      	bne.n	80006a6 <__aeabi_fadd+0x192>
 80006a2:	000c      	movs	r4, r1
 80006a4:	0003      	movs	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0db      	beq.n	8000662 <__aeabi_fadd+0x14e>
 80006aa:	2080      	movs	r0, #128	; 0x80
 80006ac:	03c0      	lsls	r0, r0, #15
 80006ae:	4318      	orrs	r0, r3
 80006b0:	0240      	lsls	r0, r0, #9
 80006b2:	0a43      	lsrs	r3, r0, #9
 80006b4:	469c      	mov	ip, r3
 80006b6:	22ff      	movs	r2, #255	; 0xff
 80006b8:	e771      	b.n	800059e <__aeabi_fadd+0x8a>
 80006ba:	2900      	cmp	r1, #0
 80006bc:	d0d5      	beq.n	800066a <__aeabi_fadd+0x156>
 80006be:	1b7a      	subs	r2, r7, r5
 80006c0:	2d00      	cmp	r5, #0
 80006c2:	d160      	bne.n	8000786 <__aeabi_fadd+0x272>
 80006c4:	4643      	mov	r3, r8
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d024      	beq.n	8000714 <__aeabi_fadd+0x200>
 80006ca:	1e53      	subs	r3, r2, #1
 80006cc:	2a01      	cmp	r2, #1
 80006ce:	d073      	beq.n	80007b8 <__aeabi_fadd+0x2a4>
 80006d0:	2aff      	cmp	r2, #255	; 0xff
 80006d2:	d0e7      	beq.n	80006a4 <__aeabi_fadd+0x190>
 80006d4:	001a      	movs	r2, r3
 80006d6:	2a1b      	cmp	r2, #27
 80006d8:	dc00      	bgt.n	80006dc <__aeabi_fadd+0x1c8>
 80006da:	e085      	b.n	80007e8 <__aeabi_fadd+0x2d4>
 80006dc:	2001      	movs	r0, #1
 80006de:	003d      	movs	r5, r7
 80006e0:	1980      	adds	r0, r0, r6
 80006e2:	e785      	b.n	80005f0 <__aeabi_fadd+0xdc>
 80006e4:	2320      	movs	r3, #32
 80006e6:	003a      	movs	r2, r7
 80006e8:	1b45      	subs	r5, r0, r5
 80006ea:	0038      	movs	r0, r7
 80006ec:	3501      	adds	r5, #1
 80006ee:	40ea      	lsrs	r2, r5
 80006f0:	1b5d      	subs	r5, r3, r5
 80006f2:	40a8      	lsls	r0, r5
 80006f4:	1e43      	subs	r3, r0, #1
 80006f6:	4198      	sbcs	r0, r3
 80006f8:	2500      	movs	r5, #0
 80006fa:	4310      	orrs	r0, r2
 80006fc:	e73e      	b.n	800057c <__aeabi_fadd+0x68>
 80006fe:	2320      	movs	r3, #32
 8000700:	0030      	movs	r0, r6
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	0031      	movs	r1, r6
 8000706:	4098      	lsls	r0, r3
 8000708:	40d1      	lsrs	r1, r2
 800070a:	1e43      	subs	r3, r0, #1
 800070c:	4198      	sbcs	r0, r3
 800070e:	4308      	orrs	r0, r1
 8000710:	e722      	b.n	8000558 <__aeabi_fadd+0x44>
 8000712:	000c      	movs	r4, r1
 8000714:	0003      	movs	r3, r0
 8000716:	0015      	movs	r5, r2
 8000718:	e7b4      	b.n	8000684 <__aeabi_fadd+0x170>
 800071a:	2fff      	cmp	r7, #255	; 0xff
 800071c:	d0c1      	beq.n	80006a2 <__aeabi_fadd+0x18e>
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	4640      	mov	r0, r8
 8000722:	04db      	lsls	r3, r3, #19
 8000724:	4318      	orrs	r0, r3
 8000726:	4680      	mov	r8, r0
 8000728:	2a1b      	cmp	r2, #27
 800072a:	dd51      	ble.n	80007d0 <__aeabi_fadd+0x2bc>
 800072c:	2001      	movs	r0, #1
 800072e:	000c      	movs	r4, r1
 8000730:	003d      	movs	r5, r7
 8000732:	1a30      	subs	r0, r6, r0
 8000734:	e712      	b.n	800055c <__aeabi_fadd+0x48>
 8000736:	4643      	mov	r3, r8
 8000738:	1b9f      	subs	r7, r3, r6
 800073a:	017b      	lsls	r3, r7, #5
 800073c:	d42b      	bmi.n	8000796 <__aeabi_fadd+0x282>
 800073e:	2f00      	cmp	r7, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x230>
 8000742:	e710      	b.n	8000566 <__aeabi_fadd+0x52>
 8000744:	2300      	movs	r3, #0
 8000746:	2400      	movs	r4, #0
 8000748:	2200      	movs	r2, #0
 800074a:	469c      	mov	ip, r3
 800074c:	e727      	b.n	800059e <__aeabi_fadd+0x8a>
 800074e:	2320      	movs	r3, #32
 8000750:	0032      	movs	r2, r6
 8000752:	0030      	movs	r0, r6
 8000754:	40ca      	lsrs	r2, r1
 8000756:	1a59      	subs	r1, r3, r1
 8000758:	4088      	lsls	r0, r1
 800075a:	1e43      	subs	r3, r0, #1
 800075c:	4198      	sbcs	r0, r3
 800075e:	4310      	orrs	r0, r2
 8000760:	e745      	b.n	80005ee <__aeabi_fadd+0xda>
 8000762:	2d00      	cmp	r5, #0
 8000764:	d14a      	bne.n	80007fc <__aeabi_fadd+0x2e8>
 8000766:	4643      	mov	r3, r8
 8000768:	2b00      	cmp	r3, #0
 800076a:	d063      	beq.n	8000834 <__aeabi_fadd+0x320>
 800076c:	2200      	movs	r2, #0
 800076e:	2e00      	cmp	r6, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_fadd+0x260>
 8000772:	e714      	b.n	800059e <__aeabi_fadd+0x8a>
 8000774:	0030      	movs	r0, r6
 8000776:	4440      	add	r0, r8
 8000778:	0143      	lsls	r3, r0, #5
 800077a:	d400      	bmi.n	800077e <__aeabi_fadd+0x26a>
 800077c:	e77e      	b.n	800067c <__aeabi_fadd+0x168>
 800077e:	4b32      	ldr	r3, [pc, #200]	; (8000848 <__aeabi_fadd+0x334>)
 8000780:	3501      	adds	r5, #1
 8000782:	4018      	ands	r0, r3
 8000784:	e77a      	b.n	800067c <__aeabi_fadd+0x168>
 8000786:	2fff      	cmp	r7, #255	; 0xff
 8000788:	d08c      	beq.n	80006a4 <__aeabi_fadd+0x190>
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	4641      	mov	r1, r8
 800078e:	04db      	lsls	r3, r3, #19
 8000790:	4319      	orrs	r1, r3
 8000792:	4688      	mov	r8, r1
 8000794:	e79f      	b.n	80006d6 <__aeabi_fadd+0x1c2>
 8000796:	4643      	mov	r3, r8
 8000798:	000c      	movs	r4, r1
 800079a:	1af7      	subs	r7, r6, r3
 800079c:	e6e3      	b.n	8000566 <__aeabi_fadd+0x52>
 800079e:	4642      	mov	r2, r8
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fadd+0x292>
 80007a4:	e775      	b.n	8000692 <__aeabi_fadd+0x17e>
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x298>
 80007aa:	e77a      	b.n	80006a2 <__aeabi_fadd+0x18e>
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	03db      	lsls	r3, r3, #15
 80007b0:	2400      	movs	r4, #0
 80007b2:	469c      	mov	ip, r3
 80007b4:	22ff      	movs	r2, #255	; 0xff
 80007b6:	e6f2      	b.n	800059e <__aeabi_fadd+0x8a>
 80007b8:	0030      	movs	r0, r6
 80007ba:	4440      	add	r0, r8
 80007bc:	2501      	movs	r5, #1
 80007be:	0143      	lsls	r3, r0, #5
 80007c0:	d400      	bmi.n	80007c4 <__aeabi_fadd+0x2b0>
 80007c2:	e75b      	b.n	800067c <__aeabi_fadd+0x168>
 80007c4:	2502      	movs	r5, #2
 80007c6:	e718      	b.n	80005fa <__aeabi_fadd+0xe6>
 80007c8:	4643      	mov	r3, r8
 80007ca:	2501      	movs	r5, #1
 80007cc:	1b98      	subs	r0, r3, r6
 80007ce:	e6c5      	b.n	800055c <__aeabi_fadd+0x48>
 80007d0:	2320      	movs	r3, #32
 80007d2:	4644      	mov	r4, r8
 80007d4:	4640      	mov	r0, r8
 80007d6:	40d4      	lsrs	r4, r2
 80007d8:	1a9a      	subs	r2, r3, r2
 80007da:	4090      	lsls	r0, r2
 80007dc:	1e43      	subs	r3, r0, #1
 80007de:	4198      	sbcs	r0, r3
 80007e0:	4320      	orrs	r0, r4
 80007e2:	e7a4      	b.n	800072e <__aeabi_fadd+0x21a>
 80007e4:	000d      	movs	r5, r1
 80007e6:	e74d      	b.n	8000684 <__aeabi_fadd+0x170>
 80007e8:	2320      	movs	r3, #32
 80007ea:	4641      	mov	r1, r8
 80007ec:	4640      	mov	r0, r8
 80007ee:	40d1      	lsrs	r1, r2
 80007f0:	1a9a      	subs	r2, r3, r2
 80007f2:	4090      	lsls	r0, r2
 80007f4:	1e43      	subs	r3, r0, #1
 80007f6:	4198      	sbcs	r0, r3
 80007f8:	4308      	orrs	r0, r1
 80007fa:	e770      	b.n	80006de <__aeabi_fadd+0x1ca>
 80007fc:	4642      	mov	r2, r8
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fadd+0x2f0>
 8000802:	e74f      	b.n	80006a4 <__aeabi_fadd+0x190>
 8000804:	2e00      	cmp	r6, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x2f6>
 8000808:	e74d      	b.n	80006a6 <__aeabi_fadd+0x192>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	03d2      	lsls	r2, r2, #15
 800080e:	4213      	tst	r3, r2
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x300>
 8000812:	e748      	b.n	80006a6 <__aeabi_fadd+0x192>
 8000814:	4210      	tst	r0, r2
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0x306>
 8000818:	e745      	b.n	80006a6 <__aeabi_fadd+0x192>
 800081a:	0003      	movs	r3, r0
 800081c:	e743      	b.n	80006a6 <__aeabi_fadd+0x192>
 800081e:	2e00      	cmp	r6, #0
 8000820:	d090      	beq.n	8000744 <__aeabi_fadd+0x230>
 8000822:	000c      	movs	r4, r1
 8000824:	4684      	mov	ip, r0
 8000826:	2200      	movs	r2, #0
 8000828:	e6b9      	b.n	800059e <__aeabi_fadd+0x8a>
 800082a:	4643      	mov	r3, r8
 800082c:	000c      	movs	r4, r1
 800082e:	1af0      	subs	r0, r6, r3
 8000830:	3501      	adds	r5, #1
 8000832:	e693      	b.n	800055c <__aeabi_fadd+0x48>
 8000834:	4684      	mov	ip, r0
 8000836:	2200      	movs	r2, #0
 8000838:	e6b1      	b.n	800059e <__aeabi_fadd+0x8a>
 800083a:	2800      	cmp	r0, #0
 800083c:	d000      	beq.n	8000840 <__aeabi_fadd+0x32c>
 800083e:	e71d      	b.n	800067c <__aeabi_fadd+0x168>
 8000840:	2300      	movs	r3, #0
 8000842:	2400      	movs	r4, #0
 8000844:	469c      	mov	ip, r3
 8000846:	e6aa      	b.n	800059e <__aeabi_fadd+0x8a>
 8000848:	fbffffff 	.word	0xfbffffff
 800084c:	7dffffff 	.word	0x7dffffff

08000850 <__aeabi_fdiv>:
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	464f      	mov	r7, r9
 8000854:	4646      	mov	r6, r8
 8000856:	46d6      	mov	lr, sl
 8000858:	0245      	lsls	r5, r0, #9
 800085a:	b5c0      	push	{r6, r7, lr}
 800085c:	0047      	lsls	r7, r0, #1
 800085e:	1c0c      	adds	r4, r1, #0
 8000860:	0a6d      	lsrs	r5, r5, #9
 8000862:	0e3f      	lsrs	r7, r7, #24
 8000864:	0fc6      	lsrs	r6, r0, #31
 8000866:	2f00      	cmp	r7, #0
 8000868:	d100      	bne.n	800086c <__aeabi_fdiv+0x1c>
 800086a:	e070      	b.n	800094e <__aeabi_fdiv+0xfe>
 800086c:	2fff      	cmp	r7, #255	; 0xff
 800086e:	d100      	bne.n	8000872 <__aeabi_fdiv+0x22>
 8000870:	e075      	b.n	800095e <__aeabi_fdiv+0x10e>
 8000872:	00eb      	lsls	r3, r5, #3
 8000874:	2580      	movs	r5, #128	; 0x80
 8000876:	04ed      	lsls	r5, r5, #19
 8000878:	431d      	orrs	r5, r3
 800087a:	2300      	movs	r3, #0
 800087c:	4699      	mov	r9, r3
 800087e:	469a      	mov	sl, r3
 8000880:	3f7f      	subs	r7, #127	; 0x7f
 8000882:	0260      	lsls	r0, r4, #9
 8000884:	0a43      	lsrs	r3, r0, #9
 8000886:	4698      	mov	r8, r3
 8000888:	0063      	lsls	r3, r4, #1
 800088a:	0e1b      	lsrs	r3, r3, #24
 800088c:	0fe4      	lsrs	r4, r4, #31
 800088e:	2b00      	cmp	r3, #0
 8000890:	d04e      	beq.n	8000930 <__aeabi_fdiv+0xe0>
 8000892:	2bff      	cmp	r3, #255	; 0xff
 8000894:	d046      	beq.n	8000924 <__aeabi_fdiv+0xd4>
 8000896:	4642      	mov	r2, r8
 8000898:	00d0      	lsls	r0, r2, #3
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	04d2      	lsls	r2, r2, #19
 800089e:	4302      	orrs	r2, r0
 80008a0:	4690      	mov	r8, r2
 80008a2:	2200      	movs	r2, #0
 80008a4:	3b7f      	subs	r3, #127	; 0x7f
 80008a6:	0031      	movs	r1, r6
 80008a8:	1aff      	subs	r7, r7, r3
 80008aa:	464b      	mov	r3, r9
 80008ac:	4061      	eors	r1, r4
 80008ae:	b2c9      	uxtb	r1, r1
 80008b0:	4313      	orrs	r3, r2
 80008b2:	2b0f      	cmp	r3, #15
 80008b4:	d900      	bls.n	80008b8 <__aeabi_fdiv+0x68>
 80008b6:	e0b5      	b.n	8000a24 <__aeabi_fdiv+0x1d4>
 80008b8:	486e      	ldr	r0, [pc, #440]	; (8000a74 <__aeabi_fdiv+0x224>)
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	58c3      	ldr	r3, [r0, r3]
 80008be:	469f      	mov	pc, r3
 80008c0:	2300      	movs	r3, #0
 80008c2:	4698      	mov	r8, r3
 80008c4:	0026      	movs	r6, r4
 80008c6:	4645      	mov	r5, r8
 80008c8:	4692      	mov	sl, r2
 80008ca:	4653      	mov	r3, sl
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fdiv+0x82>
 80008d0:	e089      	b.n	80009e6 <__aeabi_fdiv+0x196>
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d100      	bne.n	80008d8 <__aeabi_fdiv+0x88>
 80008d6:	e09e      	b.n	8000a16 <__aeabi_fdiv+0x1c6>
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d018      	beq.n	800090e <__aeabi_fdiv+0xbe>
 80008dc:	003b      	movs	r3, r7
 80008de:	337f      	adds	r3, #127	; 0x7f
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	dd69      	ble.n	80009b8 <__aeabi_fdiv+0x168>
 80008e4:	076a      	lsls	r2, r5, #29
 80008e6:	d004      	beq.n	80008f2 <__aeabi_fdiv+0xa2>
 80008e8:	220f      	movs	r2, #15
 80008ea:	402a      	ands	r2, r5
 80008ec:	2a04      	cmp	r2, #4
 80008ee:	d000      	beq.n	80008f2 <__aeabi_fdiv+0xa2>
 80008f0:	3504      	adds	r5, #4
 80008f2:	012a      	lsls	r2, r5, #4
 80008f4:	d503      	bpl.n	80008fe <__aeabi_fdiv+0xae>
 80008f6:	4b60      	ldr	r3, [pc, #384]	; (8000a78 <__aeabi_fdiv+0x228>)
 80008f8:	401d      	ands	r5, r3
 80008fa:	003b      	movs	r3, r7
 80008fc:	3380      	adds	r3, #128	; 0x80
 80008fe:	2bfe      	cmp	r3, #254	; 0xfe
 8000900:	dd00      	ble.n	8000904 <__aeabi_fdiv+0xb4>
 8000902:	e070      	b.n	80009e6 <__aeabi_fdiv+0x196>
 8000904:	01ad      	lsls	r5, r5, #6
 8000906:	0a6d      	lsrs	r5, r5, #9
 8000908:	b2d8      	uxtb	r0, r3
 800090a:	e002      	b.n	8000912 <__aeabi_fdiv+0xc2>
 800090c:	000e      	movs	r6, r1
 800090e:	2000      	movs	r0, #0
 8000910:	2500      	movs	r5, #0
 8000912:	05c0      	lsls	r0, r0, #23
 8000914:	4328      	orrs	r0, r5
 8000916:	07f6      	lsls	r6, r6, #31
 8000918:	4330      	orrs	r0, r6
 800091a:	bce0      	pop	{r5, r6, r7}
 800091c:	46ba      	mov	sl, r7
 800091e:	46b1      	mov	r9, r6
 8000920:	46a8      	mov	r8, r5
 8000922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000924:	4643      	mov	r3, r8
 8000926:	2b00      	cmp	r3, #0
 8000928:	d13f      	bne.n	80009aa <__aeabi_fdiv+0x15a>
 800092a:	2202      	movs	r2, #2
 800092c:	3fff      	subs	r7, #255	; 0xff
 800092e:	e003      	b.n	8000938 <__aeabi_fdiv+0xe8>
 8000930:	4643      	mov	r3, r8
 8000932:	2b00      	cmp	r3, #0
 8000934:	d12d      	bne.n	8000992 <__aeabi_fdiv+0x142>
 8000936:	2201      	movs	r2, #1
 8000938:	0031      	movs	r1, r6
 800093a:	464b      	mov	r3, r9
 800093c:	4061      	eors	r1, r4
 800093e:	b2c9      	uxtb	r1, r1
 8000940:	4313      	orrs	r3, r2
 8000942:	2b0f      	cmp	r3, #15
 8000944:	d834      	bhi.n	80009b0 <__aeabi_fdiv+0x160>
 8000946:	484d      	ldr	r0, [pc, #308]	; (8000a7c <__aeabi_fdiv+0x22c>)
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	58c3      	ldr	r3, [r0, r3]
 800094c:	469f      	mov	pc, r3
 800094e:	2d00      	cmp	r5, #0
 8000950:	d113      	bne.n	800097a <__aeabi_fdiv+0x12a>
 8000952:	2304      	movs	r3, #4
 8000954:	4699      	mov	r9, r3
 8000956:	3b03      	subs	r3, #3
 8000958:	2700      	movs	r7, #0
 800095a:	469a      	mov	sl, r3
 800095c:	e791      	b.n	8000882 <__aeabi_fdiv+0x32>
 800095e:	2d00      	cmp	r5, #0
 8000960:	d105      	bne.n	800096e <__aeabi_fdiv+0x11e>
 8000962:	2308      	movs	r3, #8
 8000964:	4699      	mov	r9, r3
 8000966:	3b06      	subs	r3, #6
 8000968:	27ff      	movs	r7, #255	; 0xff
 800096a:	469a      	mov	sl, r3
 800096c:	e789      	b.n	8000882 <__aeabi_fdiv+0x32>
 800096e:	230c      	movs	r3, #12
 8000970:	4699      	mov	r9, r3
 8000972:	3b09      	subs	r3, #9
 8000974:	27ff      	movs	r7, #255	; 0xff
 8000976:	469a      	mov	sl, r3
 8000978:	e783      	b.n	8000882 <__aeabi_fdiv+0x32>
 800097a:	0028      	movs	r0, r5
 800097c:	f002 fb1e 	bl	8002fbc <__clzsi2>
 8000980:	2776      	movs	r7, #118	; 0x76
 8000982:	1f43      	subs	r3, r0, #5
 8000984:	409d      	lsls	r5, r3
 8000986:	2300      	movs	r3, #0
 8000988:	427f      	negs	r7, r7
 800098a:	4699      	mov	r9, r3
 800098c:	469a      	mov	sl, r3
 800098e:	1a3f      	subs	r7, r7, r0
 8000990:	e777      	b.n	8000882 <__aeabi_fdiv+0x32>
 8000992:	4640      	mov	r0, r8
 8000994:	f002 fb12 	bl	8002fbc <__clzsi2>
 8000998:	4642      	mov	r2, r8
 800099a:	1f43      	subs	r3, r0, #5
 800099c:	409a      	lsls	r2, r3
 800099e:	2376      	movs	r3, #118	; 0x76
 80009a0:	425b      	negs	r3, r3
 80009a2:	4690      	mov	r8, r2
 80009a4:	1a1b      	subs	r3, r3, r0
 80009a6:	2200      	movs	r2, #0
 80009a8:	e77d      	b.n	80008a6 <__aeabi_fdiv+0x56>
 80009aa:	23ff      	movs	r3, #255	; 0xff
 80009ac:	2203      	movs	r2, #3
 80009ae:	e77a      	b.n	80008a6 <__aeabi_fdiv+0x56>
 80009b0:	000e      	movs	r6, r1
 80009b2:	20ff      	movs	r0, #255	; 0xff
 80009b4:	2500      	movs	r5, #0
 80009b6:	e7ac      	b.n	8000912 <__aeabi_fdiv+0xc2>
 80009b8:	2001      	movs	r0, #1
 80009ba:	1ac0      	subs	r0, r0, r3
 80009bc:	281b      	cmp	r0, #27
 80009be:	dca6      	bgt.n	800090e <__aeabi_fdiv+0xbe>
 80009c0:	379e      	adds	r7, #158	; 0x9e
 80009c2:	002a      	movs	r2, r5
 80009c4:	40bd      	lsls	r5, r7
 80009c6:	40c2      	lsrs	r2, r0
 80009c8:	1e6b      	subs	r3, r5, #1
 80009ca:	419d      	sbcs	r5, r3
 80009cc:	4315      	orrs	r5, r2
 80009ce:	076b      	lsls	r3, r5, #29
 80009d0:	d004      	beq.n	80009dc <__aeabi_fdiv+0x18c>
 80009d2:	230f      	movs	r3, #15
 80009d4:	402b      	ands	r3, r5
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_fdiv+0x18c>
 80009da:	3504      	adds	r5, #4
 80009dc:	016b      	lsls	r3, r5, #5
 80009de:	d544      	bpl.n	8000a6a <__aeabi_fdiv+0x21a>
 80009e0:	2001      	movs	r0, #1
 80009e2:	2500      	movs	r5, #0
 80009e4:	e795      	b.n	8000912 <__aeabi_fdiv+0xc2>
 80009e6:	20ff      	movs	r0, #255	; 0xff
 80009e8:	2500      	movs	r5, #0
 80009ea:	e792      	b.n	8000912 <__aeabi_fdiv+0xc2>
 80009ec:	2580      	movs	r5, #128	; 0x80
 80009ee:	2600      	movs	r6, #0
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	03ed      	lsls	r5, r5, #15
 80009f4:	e78d      	b.n	8000912 <__aeabi_fdiv+0xc2>
 80009f6:	2300      	movs	r3, #0
 80009f8:	4698      	mov	r8, r3
 80009fa:	2080      	movs	r0, #128	; 0x80
 80009fc:	03c0      	lsls	r0, r0, #15
 80009fe:	4205      	tst	r5, r0
 8000a00:	d009      	beq.n	8000a16 <__aeabi_fdiv+0x1c6>
 8000a02:	4643      	mov	r3, r8
 8000a04:	4203      	tst	r3, r0
 8000a06:	d106      	bne.n	8000a16 <__aeabi_fdiv+0x1c6>
 8000a08:	4645      	mov	r5, r8
 8000a0a:	4305      	orrs	r5, r0
 8000a0c:	026d      	lsls	r5, r5, #9
 8000a0e:	0026      	movs	r6, r4
 8000a10:	20ff      	movs	r0, #255	; 0xff
 8000a12:	0a6d      	lsrs	r5, r5, #9
 8000a14:	e77d      	b.n	8000912 <__aeabi_fdiv+0xc2>
 8000a16:	2080      	movs	r0, #128	; 0x80
 8000a18:	03c0      	lsls	r0, r0, #15
 8000a1a:	4305      	orrs	r5, r0
 8000a1c:	026d      	lsls	r5, r5, #9
 8000a1e:	20ff      	movs	r0, #255	; 0xff
 8000a20:	0a6d      	lsrs	r5, r5, #9
 8000a22:	e776      	b.n	8000912 <__aeabi_fdiv+0xc2>
 8000a24:	4642      	mov	r2, r8
 8000a26:	016b      	lsls	r3, r5, #5
 8000a28:	0150      	lsls	r0, r2, #5
 8000a2a:	4283      	cmp	r3, r0
 8000a2c:	d219      	bcs.n	8000a62 <__aeabi_fdiv+0x212>
 8000a2e:	221b      	movs	r2, #27
 8000a30:	2500      	movs	r5, #0
 8000a32:	3f01      	subs	r7, #1
 8000a34:	2601      	movs	r6, #1
 8000a36:	001c      	movs	r4, r3
 8000a38:	006d      	lsls	r5, r5, #1
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2c00      	cmp	r4, #0
 8000a3e:	db01      	blt.n	8000a44 <__aeabi_fdiv+0x1f4>
 8000a40:	4298      	cmp	r0, r3
 8000a42:	d801      	bhi.n	8000a48 <__aeabi_fdiv+0x1f8>
 8000a44:	1a1b      	subs	r3, r3, r0
 8000a46:	4335      	orrs	r5, r6
 8000a48:	3a01      	subs	r2, #1
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	d1f3      	bne.n	8000a36 <__aeabi_fdiv+0x1e6>
 8000a4e:	1e5a      	subs	r2, r3, #1
 8000a50:	4193      	sbcs	r3, r2
 8000a52:	431d      	orrs	r5, r3
 8000a54:	003b      	movs	r3, r7
 8000a56:	337f      	adds	r3, #127	; 0x7f
 8000a58:	000e      	movs	r6, r1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	dd00      	ble.n	8000a60 <__aeabi_fdiv+0x210>
 8000a5e:	e741      	b.n	80008e4 <__aeabi_fdiv+0x94>
 8000a60:	e7aa      	b.n	80009b8 <__aeabi_fdiv+0x168>
 8000a62:	221a      	movs	r2, #26
 8000a64:	2501      	movs	r5, #1
 8000a66:	1a1b      	subs	r3, r3, r0
 8000a68:	e7e4      	b.n	8000a34 <__aeabi_fdiv+0x1e4>
 8000a6a:	01ad      	lsls	r5, r5, #6
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	0a6d      	lsrs	r5, r5, #9
 8000a70:	e74f      	b.n	8000912 <__aeabi_fdiv+0xc2>
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	0800b068 	.word	0x0800b068
 8000a78:	f7ffffff 	.word	0xf7ffffff
 8000a7c:	0800b0a8 	.word	0x0800b0a8

08000a80 <__eqsf2>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	0042      	lsls	r2, r0, #1
 8000a84:	0245      	lsls	r5, r0, #9
 8000a86:	024e      	lsls	r6, r1, #9
 8000a88:	004c      	lsls	r4, r1, #1
 8000a8a:	0fc3      	lsrs	r3, r0, #31
 8000a8c:	0a6d      	lsrs	r5, r5, #9
 8000a8e:	2001      	movs	r0, #1
 8000a90:	0e12      	lsrs	r2, r2, #24
 8000a92:	0a76      	lsrs	r6, r6, #9
 8000a94:	0e24      	lsrs	r4, r4, #24
 8000a96:	0fc9      	lsrs	r1, r1, #31
 8000a98:	2aff      	cmp	r2, #255	; 0xff
 8000a9a:	d006      	beq.n	8000aaa <__eqsf2+0x2a>
 8000a9c:	2cff      	cmp	r4, #255	; 0xff
 8000a9e:	d003      	beq.n	8000aa8 <__eqsf2+0x28>
 8000aa0:	42a2      	cmp	r2, r4
 8000aa2:	d101      	bne.n	8000aa8 <__eqsf2+0x28>
 8000aa4:	42b5      	cmp	r5, r6
 8000aa6:	d006      	beq.n	8000ab6 <__eqsf2+0x36>
 8000aa8:	bd70      	pop	{r4, r5, r6, pc}
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	d1fc      	bne.n	8000aa8 <__eqsf2+0x28>
 8000aae:	2cff      	cmp	r4, #255	; 0xff
 8000ab0:	d1fa      	bne.n	8000aa8 <__eqsf2+0x28>
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d1f8      	bne.n	8000aa8 <__eqsf2+0x28>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d006      	beq.n	8000ac8 <__eqsf2+0x48>
 8000aba:	2001      	movs	r0, #1
 8000abc:	2a00      	cmp	r2, #0
 8000abe:	d1f3      	bne.n	8000aa8 <__eqsf2+0x28>
 8000ac0:	0028      	movs	r0, r5
 8000ac2:	1e43      	subs	r3, r0, #1
 8000ac4:	4198      	sbcs	r0, r3
 8000ac6:	e7ef      	b.n	8000aa8 <__eqsf2+0x28>
 8000ac8:	2000      	movs	r0, #0
 8000aca:	e7ed      	b.n	8000aa8 <__eqsf2+0x28>

08000acc <__gesf2>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	0042      	lsls	r2, r0, #1
 8000ad0:	0245      	lsls	r5, r0, #9
 8000ad2:	024e      	lsls	r6, r1, #9
 8000ad4:	004c      	lsls	r4, r1, #1
 8000ad6:	0fc3      	lsrs	r3, r0, #31
 8000ad8:	0a6d      	lsrs	r5, r5, #9
 8000ada:	0e12      	lsrs	r2, r2, #24
 8000adc:	0a76      	lsrs	r6, r6, #9
 8000ade:	0e24      	lsrs	r4, r4, #24
 8000ae0:	0fc8      	lsrs	r0, r1, #31
 8000ae2:	2aff      	cmp	r2, #255	; 0xff
 8000ae4:	d01b      	beq.n	8000b1e <__gesf2+0x52>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d00e      	beq.n	8000b08 <__gesf2+0x3c>
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d11b      	bne.n	8000b26 <__gesf2+0x5a>
 8000aee:	2c00      	cmp	r4, #0
 8000af0:	d101      	bne.n	8000af6 <__gesf2+0x2a>
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d01c      	beq.n	8000b30 <__gesf2+0x64>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d00c      	beq.n	8000b14 <__gesf2+0x48>
 8000afa:	4283      	cmp	r3, r0
 8000afc:	d01c      	beq.n	8000b38 <__gesf2+0x6c>
 8000afe:	2102      	movs	r1, #2
 8000b00:	1e58      	subs	r0, r3, #1
 8000b02:	4008      	ands	r0, r1
 8000b04:	3801      	subs	r0, #1
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d122      	bne.n	8000b52 <__gesf2+0x86>
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	d1f4      	bne.n	8000afa <__gesf2+0x2e>
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d1f2      	bne.n	8000afa <__gesf2+0x2e>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d1f6      	bne.n	8000b06 <__gesf2+0x3a>
 8000b18:	2001      	movs	r0, #1
 8000b1a:	4240      	negs	r0, r0
 8000b1c:	e7f3      	b.n	8000b06 <__gesf2+0x3a>
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d117      	bne.n	8000b52 <__gesf2+0x86>
 8000b22:	2cff      	cmp	r4, #255	; 0xff
 8000b24:	d0f0      	beq.n	8000b08 <__gesf2+0x3c>
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d1e7      	bne.n	8000afa <__gesf2+0x2e>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d1e5      	bne.n	8000afa <__gesf2+0x2e>
 8000b2e:	e7e6      	b.n	8000afe <__gesf2+0x32>
 8000b30:	2000      	movs	r0, #0
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d0e7      	beq.n	8000b06 <__gesf2+0x3a>
 8000b36:	e7e2      	b.n	8000afe <__gesf2+0x32>
 8000b38:	42a2      	cmp	r2, r4
 8000b3a:	dc05      	bgt.n	8000b48 <__gesf2+0x7c>
 8000b3c:	dbea      	blt.n	8000b14 <__gesf2+0x48>
 8000b3e:	42b5      	cmp	r5, r6
 8000b40:	d802      	bhi.n	8000b48 <__gesf2+0x7c>
 8000b42:	d3e7      	bcc.n	8000b14 <__gesf2+0x48>
 8000b44:	2000      	movs	r0, #0
 8000b46:	e7de      	b.n	8000b06 <__gesf2+0x3a>
 8000b48:	4243      	negs	r3, r0
 8000b4a:	4158      	adcs	r0, r3
 8000b4c:	0040      	lsls	r0, r0, #1
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7d9      	b.n	8000b06 <__gesf2+0x3a>
 8000b52:	2002      	movs	r0, #2
 8000b54:	4240      	negs	r0, r0
 8000b56:	e7d6      	b.n	8000b06 <__gesf2+0x3a>

08000b58 <__lesf2>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	0042      	lsls	r2, r0, #1
 8000b5c:	0245      	lsls	r5, r0, #9
 8000b5e:	024e      	lsls	r6, r1, #9
 8000b60:	004c      	lsls	r4, r1, #1
 8000b62:	0fc3      	lsrs	r3, r0, #31
 8000b64:	0a6d      	lsrs	r5, r5, #9
 8000b66:	0e12      	lsrs	r2, r2, #24
 8000b68:	0a76      	lsrs	r6, r6, #9
 8000b6a:	0e24      	lsrs	r4, r4, #24
 8000b6c:	0fc8      	lsrs	r0, r1, #31
 8000b6e:	2aff      	cmp	r2, #255	; 0xff
 8000b70:	d00b      	beq.n	8000b8a <__lesf2+0x32>
 8000b72:	2cff      	cmp	r4, #255	; 0xff
 8000b74:	d00d      	beq.n	8000b92 <__lesf2+0x3a>
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	d11f      	bne.n	8000bba <__lesf2+0x62>
 8000b7a:	2c00      	cmp	r4, #0
 8000b7c:	d116      	bne.n	8000bac <__lesf2+0x54>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d114      	bne.n	8000bac <__lesf2+0x54>
 8000b82:	2000      	movs	r0, #0
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	d010      	beq.n	8000baa <__lesf2+0x52>
 8000b88:	e009      	b.n	8000b9e <__lesf2+0x46>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d10c      	bne.n	8000ba8 <__lesf2+0x50>
 8000b8e:	2cff      	cmp	r4, #255	; 0xff
 8000b90:	d113      	bne.n	8000bba <__lesf2+0x62>
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d108      	bne.n	8000ba8 <__lesf2+0x50>
 8000b96:	2a00      	cmp	r2, #0
 8000b98:	d008      	beq.n	8000bac <__lesf2+0x54>
 8000b9a:	4283      	cmp	r3, r0
 8000b9c:	d012      	beq.n	8000bc4 <__lesf2+0x6c>
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	1e58      	subs	r0, r3, #1
 8000ba2:	4008      	ands	r0, r1
 8000ba4:	3801      	subs	r0, #1
 8000ba6:	e000      	b.n	8000baa <__lesf2+0x52>
 8000ba8:	2002      	movs	r0, #2
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
 8000bac:	2d00      	cmp	r5, #0
 8000bae:	d1f4      	bne.n	8000b9a <__lesf2+0x42>
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d1fa      	bne.n	8000baa <__lesf2+0x52>
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	4240      	negs	r0, r0
 8000bb8:	e7f7      	b.n	8000baa <__lesf2+0x52>
 8000bba:	2c00      	cmp	r4, #0
 8000bbc:	d1ed      	bne.n	8000b9a <__lesf2+0x42>
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d1eb      	bne.n	8000b9a <__lesf2+0x42>
 8000bc2:	e7ec      	b.n	8000b9e <__lesf2+0x46>
 8000bc4:	42a2      	cmp	r2, r4
 8000bc6:	dc05      	bgt.n	8000bd4 <__lesf2+0x7c>
 8000bc8:	dbf2      	blt.n	8000bb0 <__lesf2+0x58>
 8000bca:	42b5      	cmp	r5, r6
 8000bcc:	d802      	bhi.n	8000bd4 <__lesf2+0x7c>
 8000bce:	d3ef      	bcc.n	8000bb0 <__lesf2+0x58>
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	e7ea      	b.n	8000baa <__lesf2+0x52>
 8000bd4:	4243      	negs	r3, r0
 8000bd6:	4158      	adcs	r0, r3
 8000bd8:	0040      	lsls	r0, r0, #1
 8000bda:	3801      	subs	r0, #1
 8000bdc:	e7e5      	b.n	8000baa <__lesf2+0x52>
 8000bde:	46c0      	nop			; (mov r8, r8)

08000be0 <__aeabi_fmul>:
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	464f      	mov	r7, r9
 8000be4:	4646      	mov	r6, r8
 8000be6:	46d6      	mov	lr, sl
 8000be8:	0244      	lsls	r4, r0, #9
 8000bea:	0045      	lsls	r5, r0, #1
 8000bec:	b5c0      	push	{r6, r7, lr}
 8000bee:	0a64      	lsrs	r4, r4, #9
 8000bf0:	1c0f      	adds	r7, r1, #0
 8000bf2:	0e2d      	lsrs	r5, r5, #24
 8000bf4:	0fc6      	lsrs	r6, r0, #31
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_fmul+0x1c>
 8000bfa:	e08d      	b.n	8000d18 <__aeabi_fmul+0x138>
 8000bfc:	2dff      	cmp	r5, #255	; 0xff
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_fmul+0x22>
 8000c00:	e092      	b.n	8000d28 <__aeabi_fmul+0x148>
 8000c02:	2300      	movs	r3, #0
 8000c04:	2080      	movs	r0, #128	; 0x80
 8000c06:	4699      	mov	r9, r3
 8000c08:	469a      	mov	sl, r3
 8000c0a:	00e4      	lsls	r4, r4, #3
 8000c0c:	04c0      	lsls	r0, r0, #19
 8000c0e:	4304      	orrs	r4, r0
 8000c10:	3d7f      	subs	r5, #127	; 0x7f
 8000c12:	0278      	lsls	r0, r7, #9
 8000c14:	0a43      	lsrs	r3, r0, #9
 8000c16:	4698      	mov	r8, r3
 8000c18:	007b      	lsls	r3, r7, #1
 8000c1a:	0e1b      	lsrs	r3, r3, #24
 8000c1c:	0fff      	lsrs	r7, r7, #31
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fmul+0x44>
 8000c22:	e070      	b.n	8000d06 <__aeabi_fmul+0x126>
 8000c24:	2bff      	cmp	r3, #255	; 0xff
 8000c26:	d100      	bne.n	8000c2a <__aeabi_fmul+0x4a>
 8000c28:	e086      	b.n	8000d38 <__aeabi_fmul+0x158>
 8000c2a:	4642      	mov	r2, r8
 8000c2c:	00d0      	lsls	r0, r2, #3
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	3b7f      	subs	r3, #127	; 0x7f
 8000c32:	18ed      	adds	r5, r5, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	04d2      	lsls	r2, r2, #19
 8000c38:	4302      	orrs	r2, r0
 8000c3a:	4690      	mov	r8, r2
 8000c3c:	469c      	mov	ip, r3
 8000c3e:	0031      	movs	r1, r6
 8000c40:	464b      	mov	r3, r9
 8000c42:	4079      	eors	r1, r7
 8000c44:	1c68      	adds	r0, r5, #1
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	d81c      	bhi.n	8000c84 <__aeabi_fmul+0xa4>
 8000c4a:	4a76      	ldr	r2, [pc, #472]	; (8000e24 <__aeabi_fmul+0x244>)
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	58d3      	ldr	r3, [r2, r3]
 8000c50:	469f      	mov	pc, r3
 8000c52:	0039      	movs	r1, r7
 8000c54:	4644      	mov	r4, r8
 8000c56:	46e2      	mov	sl, ip
 8000c58:	4653      	mov	r3, sl
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d00f      	beq.n	8000c7e <__aeabi_fmul+0x9e>
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d100      	bne.n	8000c64 <__aeabi_fmul+0x84>
 8000c62:	e0d7      	b.n	8000e14 <__aeabi_fmul+0x234>
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d137      	bne.n	8000cd8 <__aeabi_fmul+0xf8>
 8000c68:	2000      	movs	r0, #0
 8000c6a:	2400      	movs	r4, #0
 8000c6c:	05c0      	lsls	r0, r0, #23
 8000c6e:	4320      	orrs	r0, r4
 8000c70:	07c9      	lsls	r1, r1, #31
 8000c72:	4308      	orrs	r0, r1
 8000c74:	bce0      	pop	{r5, r6, r7}
 8000c76:	46ba      	mov	sl, r7
 8000c78:	46b1      	mov	r9, r6
 8000c7a:	46a8      	mov	r8, r5
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	2400      	movs	r4, #0
 8000c82:	e7f3      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000c84:	0c26      	lsrs	r6, r4, #16
 8000c86:	0424      	lsls	r4, r4, #16
 8000c88:	0c22      	lsrs	r2, r4, #16
 8000c8a:	4644      	mov	r4, r8
 8000c8c:	0424      	lsls	r4, r4, #16
 8000c8e:	0c24      	lsrs	r4, r4, #16
 8000c90:	4643      	mov	r3, r8
 8000c92:	0027      	movs	r7, r4
 8000c94:	0c1b      	lsrs	r3, r3, #16
 8000c96:	4357      	muls	r7, r2
 8000c98:	4374      	muls	r4, r6
 8000c9a:	435a      	muls	r2, r3
 8000c9c:	435e      	muls	r6, r3
 8000c9e:	1912      	adds	r2, r2, r4
 8000ca0:	0c3b      	lsrs	r3, r7, #16
 8000ca2:	189b      	adds	r3, r3, r2
 8000ca4:	429c      	cmp	r4, r3
 8000ca6:	d903      	bls.n	8000cb0 <__aeabi_fmul+0xd0>
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	0252      	lsls	r2, r2, #9
 8000cac:	4694      	mov	ip, r2
 8000cae:	4466      	add	r6, ip
 8000cb0:	043f      	lsls	r7, r7, #16
 8000cb2:	041a      	lsls	r2, r3, #16
 8000cb4:	0c3f      	lsrs	r7, r7, #16
 8000cb6:	19d2      	adds	r2, r2, r7
 8000cb8:	0194      	lsls	r4, r2, #6
 8000cba:	1e67      	subs	r7, r4, #1
 8000cbc:	41bc      	sbcs	r4, r7
 8000cbe:	0c1b      	lsrs	r3, r3, #16
 8000cc0:	0e92      	lsrs	r2, r2, #26
 8000cc2:	199b      	adds	r3, r3, r6
 8000cc4:	4314      	orrs	r4, r2
 8000cc6:	019b      	lsls	r3, r3, #6
 8000cc8:	431c      	orrs	r4, r3
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	d400      	bmi.n	8000cd0 <__aeabi_fmul+0xf0>
 8000cce:	e09b      	b.n	8000e08 <__aeabi_fmul+0x228>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	0862      	lsrs	r2, r4, #1
 8000cd4:	401c      	ands	r4, r3
 8000cd6:	4314      	orrs	r4, r2
 8000cd8:	0002      	movs	r2, r0
 8000cda:	327f      	adds	r2, #127	; 0x7f
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	dd64      	ble.n	8000daa <__aeabi_fmul+0x1ca>
 8000ce0:	0763      	lsls	r3, r4, #29
 8000ce2:	d004      	beq.n	8000cee <__aeabi_fmul+0x10e>
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	4023      	ands	r3, r4
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d000      	beq.n	8000cee <__aeabi_fmul+0x10e>
 8000cec:	3404      	adds	r4, #4
 8000cee:	0123      	lsls	r3, r4, #4
 8000cf0:	d503      	bpl.n	8000cfa <__aeabi_fmul+0x11a>
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	4b4c      	ldr	r3, [pc, #304]	; (8000e28 <__aeabi_fmul+0x248>)
 8000cf6:	3280      	adds	r2, #128	; 0x80
 8000cf8:	401c      	ands	r4, r3
 8000cfa:	2afe      	cmp	r2, #254	; 0xfe
 8000cfc:	dcbf      	bgt.n	8000c7e <__aeabi_fmul+0x9e>
 8000cfe:	01a4      	lsls	r4, r4, #6
 8000d00:	0a64      	lsrs	r4, r4, #9
 8000d02:	b2d0      	uxtb	r0, r2
 8000d04:	e7b2      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000d06:	4643      	mov	r3, r8
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d13d      	bne.n	8000d88 <__aeabi_fmul+0x1a8>
 8000d0c:	464a      	mov	r2, r9
 8000d0e:	3301      	adds	r3, #1
 8000d10:	431a      	orrs	r2, r3
 8000d12:	4691      	mov	r9, r2
 8000d14:	469c      	mov	ip, r3
 8000d16:	e792      	b.n	8000c3e <__aeabi_fmul+0x5e>
 8000d18:	2c00      	cmp	r4, #0
 8000d1a:	d129      	bne.n	8000d70 <__aeabi_fmul+0x190>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	4699      	mov	r9, r3
 8000d20:	3b03      	subs	r3, #3
 8000d22:	2500      	movs	r5, #0
 8000d24:	469a      	mov	sl, r3
 8000d26:	e774      	b.n	8000c12 <__aeabi_fmul+0x32>
 8000d28:	2c00      	cmp	r4, #0
 8000d2a:	d11b      	bne.n	8000d64 <__aeabi_fmul+0x184>
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	4699      	mov	r9, r3
 8000d30:	3b06      	subs	r3, #6
 8000d32:	25ff      	movs	r5, #255	; 0xff
 8000d34:	469a      	mov	sl, r3
 8000d36:	e76c      	b.n	8000c12 <__aeabi_fmul+0x32>
 8000d38:	4643      	mov	r3, r8
 8000d3a:	35ff      	adds	r5, #255	; 0xff
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10b      	bne.n	8000d58 <__aeabi_fmul+0x178>
 8000d40:	2302      	movs	r3, #2
 8000d42:	464a      	mov	r2, r9
 8000d44:	431a      	orrs	r2, r3
 8000d46:	4691      	mov	r9, r2
 8000d48:	469c      	mov	ip, r3
 8000d4a:	e778      	b.n	8000c3e <__aeabi_fmul+0x5e>
 8000d4c:	4653      	mov	r3, sl
 8000d4e:	0031      	movs	r1, r6
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fmul+0x176>
 8000d54:	e783      	b.n	8000c5e <__aeabi_fmul+0x7e>
 8000d56:	e792      	b.n	8000c7e <__aeabi_fmul+0x9e>
 8000d58:	2303      	movs	r3, #3
 8000d5a:	464a      	mov	r2, r9
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4691      	mov	r9, r2
 8000d60:	469c      	mov	ip, r3
 8000d62:	e76c      	b.n	8000c3e <__aeabi_fmul+0x5e>
 8000d64:	230c      	movs	r3, #12
 8000d66:	4699      	mov	r9, r3
 8000d68:	3b09      	subs	r3, #9
 8000d6a:	25ff      	movs	r5, #255	; 0xff
 8000d6c:	469a      	mov	sl, r3
 8000d6e:	e750      	b.n	8000c12 <__aeabi_fmul+0x32>
 8000d70:	0020      	movs	r0, r4
 8000d72:	f002 f923 	bl	8002fbc <__clzsi2>
 8000d76:	2576      	movs	r5, #118	; 0x76
 8000d78:	1f43      	subs	r3, r0, #5
 8000d7a:	409c      	lsls	r4, r3
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	426d      	negs	r5, r5
 8000d80:	4699      	mov	r9, r3
 8000d82:	469a      	mov	sl, r3
 8000d84:	1a2d      	subs	r5, r5, r0
 8000d86:	e744      	b.n	8000c12 <__aeabi_fmul+0x32>
 8000d88:	4640      	mov	r0, r8
 8000d8a:	f002 f917 	bl	8002fbc <__clzsi2>
 8000d8e:	4642      	mov	r2, r8
 8000d90:	1f43      	subs	r3, r0, #5
 8000d92:	409a      	lsls	r2, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	1a2d      	subs	r5, r5, r0
 8000d98:	4690      	mov	r8, r2
 8000d9a:	469c      	mov	ip, r3
 8000d9c:	3d76      	subs	r5, #118	; 0x76
 8000d9e:	e74e      	b.n	8000c3e <__aeabi_fmul+0x5e>
 8000da0:	2480      	movs	r4, #128	; 0x80
 8000da2:	2100      	movs	r1, #0
 8000da4:	20ff      	movs	r0, #255	; 0xff
 8000da6:	03e4      	lsls	r4, r4, #15
 8000da8:	e760      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000daa:	2301      	movs	r3, #1
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	2b1b      	cmp	r3, #27
 8000db0:	dd00      	ble.n	8000db4 <__aeabi_fmul+0x1d4>
 8000db2:	e759      	b.n	8000c68 <__aeabi_fmul+0x88>
 8000db4:	0022      	movs	r2, r4
 8000db6:	309e      	adds	r0, #158	; 0x9e
 8000db8:	40da      	lsrs	r2, r3
 8000dba:	4084      	lsls	r4, r0
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	1e62      	subs	r2, r4, #1
 8000dc0:	4194      	sbcs	r4, r2
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	0763      	lsls	r3, r4, #29
 8000dc6:	d004      	beq.n	8000dd2 <__aeabi_fmul+0x1f2>
 8000dc8:	230f      	movs	r3, #15
 8000dca:	4023      	ands	r3, r4
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d000      	beq.n	8000dd2 <__aeabi_fmul+0x1f2>
 8000dd0:	3404      	adds	r4, #4
 8000dd2:	0163      	lsls	r3, r4, #5
 8000dd4:	d51a      	bpl.n	8000e0c <__aeabi_fmul+0x22c>
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	2400      	movs	r4, #0
 8000dda:	e747      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000ddc:	2080      	movs	r0, #128	; 0x80
 8000dde:	03c0      	lsls	r0, r0, #15
 8000de0:	4204      	tst	r4, r0
 8000de2:	d009      	beq.n	8000df8 <__aeabi_fmul+0x218>
 8000de4:	4643      	mov	r3, r8
 8000de6:	4203      	tst	r3, r0
 8000de8:	d106      	bne.n	8000df8 <__aeabi_fmul+0x218>
 8000dea:	4644      	mov	r4, r8
 8000dec:	4304      	orrs	r4, r0
 8000dee:	0264      	lsls	r4, r4, #9
 8000df0:	0039      	movs	r1, r7
 8000df2:	20ff      	movs	r0, #255	; 0xff
 8000df4:	0a64      	lsrs	r4, r4, #9
 8000df6:	e739      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000df8:	2080      	movs	r0, #128	; 0x80
 8000dfa:	03c0      	lsls	r0, r0, #15
 8000dfc:	4304      	orrs	r4, r0
 8000dfe:	0264      	lsls	r4, r4, #9
 8000e00:	0031      	movs	r1, r6
 8000e02:	20ff      	movs	r0, #255	; 0xff
 8000e04:	0a64      	lsrs	r4, r4, #9
 8000e06:	e731      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000e08:	0028      	movs	r0, r5
 8000e0a:	e765      	b.n	8000cd8 <__aeabi_fmul+0xf8>
 8000e0c:	01a4      	lsls	r4, r4, #6
 8000e0e:	2000      	movs	r0, #0
 8000e10:	0a64      	lsrs	r4, r4, #9
 8000e12:	e72b      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000e14:	2080      	movs	r0, #128	; 0x80
 8000e16:	03c0      	lsls	r0, r0, #15
 8000e18:	4304      	orrs	r4, r0
 8000e1a:	0264      	lsls	r4, r4, #9
 8000e1c:	20ff      	movs	r0, #255	; 0xff
 8000e1e:	0a64      	lsrs	r4, r4, #9
 8000e20:	e724      	b.n	8000c6c <__aeabi_fmul+0x8c>
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	0800b0e8 	.word	0x0800b0e8
 8000e28:	f7ffffff 	.word	0xf7ffffff

08000e2c <__aeabi_fsub>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	46ce      	mov	lr, r9
 8000e30:	4647      	mov	r7, r8
 8000e32:	0243      	lsls	r3, r0, #9
 8000e34:	0a5b      	lsrs	r3, r3, #9
 8000e36:	024e      	lsls	r6, r1, #9
 8000e38:	00da      	lsls	r2, r3, #3
 8000e3a:	4694      	mov	ip, r2
 8000e3c:	0a72      	lsrs	r2, r6, #9
 8000e3e:	4691      	mov	r9, r2
 8000e40:	0045      	lsls	r5, r0, #1
 8000e42:	004a      	lsls	r2, r1, #1
 8000e44:	b580      	push	{r7, lr}
 8000e46:	0e2d      	lsrs	r5, r5, #24
 8000e48:	001f      	movs	r7, r3
 8000e4a:	0fc4      	lsrs	r4, r0, #31
 8000e4c:	0e12      	lsrs	r2, r2, #24
 8000e4e:	0fc9      	lsrs	r1, r1, #31
 8000e50:	09b6      	lsrs	r6, r6, #6
 8000e52:	2aff      	cmp	r2, #255	; 0xff
 8000e54:	d05b      	beq.n	8000f0e <__aeabi_fsub+0xe2>
 8000e56:	2001      	movs	r0, #1
 8000e58:	4041      	eors	r1, r0
 8000e5a:	428c      	cmp	r4, r1
 8000e5c:	d039      	beq.n	8000ed2 <__aeabi_fsub+0xa6>
 8000e5e:	1aa8      	subs	r0, r5, r2
 8000e60:	2800      	cmp	r0, #0
 8000e62:	dd5a      	ble.n	8000f1a <__aeabi_fsub+0xee>
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	d06a      	beq.n	8000f3e <__aeabi_fsub+0x112>
 8000e68:	2dff      	cmp	r5, #255	; 0xff
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_fsub+0x42>
 8000e6c:	e0d9      	b.n	8001022 <__aeabi_fsub+0x1f6>
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	04d2      	lsls	r2, r2, #19
 8000e72:	4316      	orrs	r6, r2
 8000e74:	281b      	cmp	r0, #27
 8000e76:	dc00      	bgt.n	8000e7a <__aeabi_fsub+0x4e>
 8000e78:	e0e9      	b.n	800104e <__aeabi_fsub+0x222>
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	4663      	mov	r3, ip
 8000e7e:	1a18      	subs	r0, r3, r0
 8000e80:	0143      	lsls	r3, r0, #5
 8000e82:	d400      	bmi.n	8000e86 <__aeabi_fsub+0x5a>
 8000e84:	e0b4      	b.n	8000ff0 <__aeabi_fsub+0x1c4>
 8000e86:	0180      	lsls	r0, r0, #6
 8000e88:	0987      	lsrs	r7, r0, #6
 8000e8a:	0038      	movs	r0, r7
 8000e8c:	f002 f896 	bl	8002fbc <__clzsi2>
 8000e90:	3805      	subs	r0, #5
 8000e92:	4087      	lsls	r7, r0
 8000e94:	4285      	cmp	r5, r0
 8000e96:	dc00      	bgt.n	8000e9a <__aeabi_fsub+0x6e>
 8000e98:	e0cc      	b.n	8001034 <__aeabi_fsub+0x208>
 8000e9a:	1a2d      	subs	r5, r5, r0
 8000e9c:	48b5      	ldr	r0, [pc, #724]	; (8001174 <__aeabi_fsub+0x348>)
 8000e9e:	4038      	ands	r0, r7
 8000ea0:	0743      	lsls	r3, r0, #29
 8000ea2:	d004      	beq.n	8000eae <__aeabi_fsub+0x82>
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	4003      	ands	r3, r0
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d000      	beq.n	8000eae <__aeabi_fsub+0x82>
 8000eac:	3004      	adds	r0, #4
 8000eae:	0143      	lsls	r3, r0, #5
 8000eb0:	d400      	bmi.n	8000eb4 <__aeabi_fsub+0x88>
 8000eb2:	e0a0      	b.n	8000ff6 <__aeabi_fsub+0x1ca>
 8000eb4:	1c6a      	adds	r2, r5, #1
 8000eb6:	2dfe      	cmp	r5, #254	; 0xfe
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_fsub+0x90>
 8000eba:	e08d      	b.n	8000fd8 <__aeabi_fsub+0x1ac>
 8000ebc:	0180      	lsls	r0, r0, #6
 8000ebe:	0a47      	lsrs	r7, r0, #9
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	05d0      	lsls	r0, r2, #23
 8000ec4:	4338      	orrs	r0, r7
 8000ec6:	07e4      	lsls	r4, r4, #31
 8000ec8:	4320      	orrs	r0, r4
 8000eca:	bcc0      	pop	{r6, r7}
 8000ecc:	46b9      	mov	r9, r7
 8000ece:	46b0      	mov	r8, r6
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed2:	1aa8      	subs	r0, r5, r2
 8000ed4:	4680      	mov	r8, r0
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	dd45      	ble.n	8000f66 <__aeabi_fsub+0x13a>
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	d070      	beq.n	8000fc0 <__aeabi_fsub+0x194>
 8000ede:	2dff      	cmp	r5, #255	; 0xff
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_fsub+0xb8>
 8000ee2:	e09e      	b.n	8001022 <__aeabi_fsub+0x1f6>
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	04db      	lsls	r3, r3, #19
 8000ee8:	431e      	orrs	r6, r3
 8000eea:	4643      	mov	r3, r8
 8000eec:	2b1b      	cmp	r3, #27
 8000eee:	dc00      	bgt.n	8000ef2 <__aeabi_fsub+0xc6>
 8000ef0:	e0d2      	b.n	8001098 <__aeabi_fsub+0x26c>
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	4460      	add	r0, ip
 8000ef6:	0143      	lsls	r3, r0, #5
 8000ef8:	d57a      	bpl.n	8000ff0 <__aeabi_fsub+0x1c4>
 8000efa:	3501      	adds	r5, #1
 8000efc:	2dff      	cmp	r5, #255	; 0xff
 8000efe:	d06b      	beq.n	8000fd8 <__aeabi_fsub+0x1ac>
 8000f00:	2301      	movs	r3, #1
 8000f02:	4a9d      	ldr	r2, [pc, #628]	; (8001178 <__aeabi_fsub+0x34c>)
 8000f04:	4003      	ands	r3, r0
 8000f06:	0840      	lsrs	r0, r0, #1
 8000f08:	4010      	ands	r0, r2
 8000f0a:	4318      	orrs	r0, r3
 8000f0c:	e7c8      	b.n	8000ea0 <__aeabi_fsub+0x74>
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d020      	beq.n	8000f54 <__aeabi_fsub+0x128>
 8000f12:	428c      	cmp	r4, r1
 8000f14:	d023      	beq.n	8000f5e <__aeabi_fsub+0x132>
 8000f16:	0028      	movs	r0, r5
 8000f18:	38ff      	subs	r0, #255	; 0xff
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d039      	beq.n	8000f92 <__aeabi_fsub+0x166>
 8000f1e:	1b57      	subs	r7, r2, r5
 8000f20:	2d00      	cmp	r5, #0
 8000f22:	d000      	beq.n	8000f26 <__aeabi_fsub+0xfa>
 8000f24:	e09d      	b.n	8001062 <__aeabi_fsub+0x236>
 8000f26:	4663      	mov	r3, ip
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_fsub+0x102>
 8000f2c:	e0db      	b.n	80010e6 <__aeabi_fsub+0x2ba>
 8000f2e:	1e7b      	subs	r3, r7, #1
 8000f30:	2f01      	cmp	r7, #1
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x10a>
 8000f34:	e10d      	b.n	8001152 <__aeabi_fsub+0x326>
 8000f36:	2fff      	cmp	r7, #255	; 0xff
 8000f38:	d071      	beq.n	800101e <__aeabi_fsub+0x1f2>
 8000f3a:	001f      	movs	r7, r3
 8000f3c:	e098      	b.n	8001070 <__aeabi_fsub+0x244>
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	d100      	bne.n	8000f44 <__aeabi_fsub+0x118>
 8000f42:	e0a7      	b.n	8001094 <__aeabi_fsub+0x268>
 8000f44:	1e42      	subs	r2, r0, #1
 8000f46:	2801      	cmp	r0, #1
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x120>
 8000f4a:	e0e6      	b.n	800111a <__aeabi_fsub+0x2ee>
 8000f4c:	28ff      	cmp	r0, #255	; 0xff
 8000f4e:	d068      	beq.n	8001022 <__aeabi_fsub+0x1f6>
 8000f50:	0010      	movs	r0, r2
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fsub+0x48>
 8000f54:	2001      	movs	r0, #1
 8000f56:	4041      	eors	r1, r0
 8000f58:	42a1      	cmp	r1, r4
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_fsub+0x132>
 8000f5c:	e77f      	b.n	8000e5e <__aeabi_fsub+0x32>
 8000f5e:	20ff      	movs	r0, #255	; 0xff
 8000f60:	4240      	negs	r0, r0
 8000f62:	4680      	mov	r8, r0
 8000f64:	44a8      	add	r8, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d038      	beq.n	8000fde <__aeabi_fsub+0x1b2>
 8000f6c:	1b51      	subs	r1, r2, r5
 8000f6e:	2d00      	cmp	r5, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_fsub+0x148>
 8000f72:	e0ae      	b.n	80010d2 <__aeabi_fsub+0x2a6>
 8000f74:	2aff      	cmp	r2, #255	; 0xff
 8000f76:	d100      	bne.n	8000f7a <__aeabi_fsub+0x14e>
 8000f78:	e0df      	b.n	800113a <__aeabi_fsub+0x30e>
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	04db      	lsls	r3, r3, #19
 8000f80:	4318      	orrs	r0, r3
 8000f82:	4684      	mov	ip, r0
 8000f84:	291b      	cmp	r1, #27
 8000f86:	dc00      	bgt.n	8000f8a <__aeabi_fsub+0x15e>
 8000f88:	e0d9      	b.n	800113e <__aeabi_fsub+0x312>
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	0015      	movs	r5, r2
 8000f8e:	1980      	adds	r0, r0, r6
 8000f90:	e7b1      	b.n	8000ef6 <__aeabi_fsub+0xca>
 8000f92:	20fe      	movs	r0, #254	; 0xfe
 8000f94:	1c6a      	adds	r2, r5, #1
 8000f96:	4210      	tst	r0, r2
 8000f98:	d171      	bne.n	800107e <__aeabi_fsub+0x252>
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_fsub+0x174>
 8000f9e:	e0a6      	b.n	80010ee <__aeabi_fsub+0x2c2>
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fsub+0x17c>
 8000fa6:	e0d9      	b.n	800115c <__aeabi_fsub+0x330>
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2e00      	cmp	r6, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_fsub+0x184>
 8000fae:	e788      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8000fb0:	1b98      	subs	r0, r3, r6
 8000fb2:	0143      	lsls	r3, r0, #5
 8000fb4:	d400      	bmi.n	8000fb8 <__aeabi_fsub+0x18c>
 8000fb6:	e0e1      	b.n	800117c <__aeabi_fsub+0x350>
 8000fb8:	4663      	mov	r3, ip
 8000fba:	000c      	movs	r4, r1
 8000fbc:	1af0      	subs	r0, r6, r3
 8000fbe:	e76f      	b.n	8000ea0 <__aeabi_fsub+0x74>
 8000fc0:	2e00      	cmp	r6, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0x19a>
 8000fc4:	e0b7      	b.n	8001136 <__aeabi_fsub+0x30a>
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	3a01      	subs	r2, #1
 8000fca:	2801      	cmp	r0, #1
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_fsub+0x1a4>
 8000fce:	e09c      	b.n	800110a <__aeabi_fsub+0x2de>
 8000fd0:	28ff      	cmp	r0, #255	; 0xff
 8000fd2:	d026      	beq.n	8001022 <__aeabi_fsub+0x1f6>
 8000fd4:	4690      	mov	r8, r2
 8000fd6:	e788      	b.n	8000eea <__aeabi_fsub+0xbe>
 8000fd8:	22ff      	movs	r2, #255	; 0xff
 8000fda:	2700      	movs	r7, #0
 8000fdc:	e771      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8000fde:	20fe      	movs	r0, #254	; 0xfe
 8000fe0:	1c6a      	adds	r2, r5, #1
 8000fe2:	4210      	tst	r0, r2
 8000fe4:	d064      	beq.n	80010b0 <__aeabi_fsub+0x284>
 8000fe6:	2aff      	cmp	r2, #255	; 0xff
 8000fe8:	d0f6      	beq.n	8000fd8 <__aeabi_fsub+0x1ac>
 8000fea:	0015      	movs	r5, r2
 8000fec:	4466      	add	r6, ip
 8000fee:	0870      	lsrs	r0, r6, #1
 8000ff0:	0743      	lsls	r3, r0, #29
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_fsub+0x1ca>
 8000ff4:	e756      	b.n	8000ea4 <__aeabi_fsub+0x78>
 8000ff6:	08c3      	lsrs	r3, r0, #3
 8000ff8:	2dff      	cmp	r5, #255	; 0xff
 8000ffa:	d012      	beq.n	8001022 <__aeabi_fsub+0x1f6>
 8000ffc:	025b      	lsls	r3, r3, #9
 8000ffe:	0a5f      	lsrs	r7, r3, #9
 8001000:	b2ea      	uxtb	r2, r5
 8001002:	e75e      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8001004:	4662      	mov	r2, ip
 8001006:	2a00      	cmp	r2, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x1e0>
 800100a:	e096      	b.n	800113a <__aeabi_fsub+0x30e>
 800100c:	2e00      	cmp	r6, #0
 800100e:	d008      	beq.n	8001022 <__aeabi_fsub+0x1f6>
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	03d2      	lsls	r2, r2, #15
 8001014:	4213      	tst	r3, r2
 8001016:	d004      	beq.n	8001022 <__aeabi_fsub+0x1f6>
 8001018:	4648      	mov	r0, r9
 800101a:	4210      	tst	r0, r2
 800101c:	d101      	bne.n	8001022 <__aeabi_fsub+0x1f6>
 800101e:	000c      	movs	r4, r1
 8001020:	464b      	mov	r3, r9
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0d8      	beq.n	8000fd8 <__aeabi_fsub+0x1ac>
 8001026:	2780      	movs	r7, #128	; 0x80
 8001028:	03ff      	lsls	r7, r7, #15
 800102a:	431f      	orrs	r7, r3
 800102c:	027f      	lsls	r7, r7, #9
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	0a7f      	lsrs	r7, r7, #9
 8001032:	e746      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8001034:	2320      	movs	r3, #32
 8001036:	003a      	movs	r2, r7
 8001038:	1b45      	subs	r5, r0, r5
 800103a:	0038      	movs	r0, r7
 800103c:	3501      	adds	r5, #1
 800103e:	40ea      	lsrs	r2, r5
 8001040:	1b5d      	subs	r5, r3, r5
 8001042:	40a8      	lsls	r0, r5
 8001044:	1e43      	subs	r3, r0, #1
 8001046:	4198      	sbcs	r0, r3
 8001048:	2500      	movs	r5, #0
 800104a:	4310      	orrs	r0, r2
 800104c:	e728      	b.n	8000ea0 <__aeabi_fsub+0x74>
 800104e:	2320      	movs	r3, #32
 8001050:	1a1b      	subs	r3, r3, r0
 8001052:	0032      	movs	r2, r6
 8001054:	409e      	lsls	r6, r3
 8001056:	40c2      	lsrs	r2, r0
 8001058:	0030      	movs	r0, r6
 800105a:	1e43      	subs	r3, r0, #1
 800105c:	4198      	sbcs	r0, r3
 800105e:	4310      	orrs	r0, r2
 8001060:	e70c      	b.n	8000e7c <__aeabi_fsub+0x50>
 8001062:	2aff      	cmp	r2, #255	; 0xff
 8001064:	d0db      	beq.n	800101e <__aeabi_fsub+0x1f2>
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	4660      	mov	r0, ip
 800106a:	04db      	lsls	r3, r3, #19
 800106c:	4318      	orrs	r0, r3
 800106e:	4684      	mov	ip, r0
 8001070:	2f1b      	cmp	r7, #27
 8001072:	dd56      	ble.n	8001122 <__aeabi_fsub+0x2f6>
 8001074:	2001      	movs	r0, #1
 8001076:	000c      	movs	r4, r1
 8001078:	0015      	movs	r5, r2
 800107a:	1a30      	subs	r0, r6, r0
 800107c:	e700      	b.n	8000e80 <__aeabi_fsub+0x54>
 800107e:	4663      	mov	r3, ip
 8001080:	1b9f      	subs	r7, r3, r6
 8001082:	017b      	lsls	r3, r7, #5
 8001084:	d43d      	bmi.n	8001102 <__aeabi_fsub+0x2d6>
 8001086:	2f00      	cmp	r7, #0
 8001088:	d000      	beq.n	800108c <__aeabi_fsub+0x260>
 800108a:	e6fe      	b.n	8000e8a <__aeabi_fsub+0x5e>
 800108c:	2400      	movs	r4, #0
 800108e:	2200      	movs	r2, #0
 8001090:	2700      	movs	r7, #0
 8001092:	e716      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8001094:	0005      	movs	r5, r0
 8001096:	e7af      	b.n	8000ff8 <__aeabi_fsub+0x1cc>
 8001098:	0032      	movs	r2, r6
 800109a:	4643      	mov	r3, r8
 800109c:	4641      	mov	r1, r8
 800109e:	40da      	lsrs	r2, r3
 80010a0:	2320      	movs	r3, #32
 80010a2:	1a5b      	subs	r3, r3, r1
 80010a4:	409e      	lsls	r6, r3
 80010a6:	0030      	movs	r0, r6
 80010a8:	1e43      	subs	r3, r0, #1
 80010aa:	4198      	sbcs	r0, r3
 80010ac:	4310      	orrs	r0, r2
 80010ae:	e721      	b.n	8000ef4 <__aeabi_fsub+0xc8>
 80010b0:	2d00      	cmp	r5, #0
 80010b2:	d1a7      	bne.n	8001004 <__aeabi_fsub+0x1d8>
 80010b4:	4663      	mov	r3, ip
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d059      	beq.n	800116e <__aeabi_fsub+0x342>
 80010ba:	2200      	movs	r2, #0
 80010bc:	2e00      	cmp	r6, #0
 80010be:	d100      	bne.n	80010c2 <__aeabi_fsub+0x296>
 80010c0:	e6ff      	b.n	8000ec2 <__aeabi_fsub+0x96>
 80010c2:	0030      	movs	r0, r6
 80010c4:	4460      	add	r0, ip
 80010c6:	0143      	lsls	r3, r0, #5
 80010c8:	d592      	bpl.n	8000ff0 <__aeabi_fsub+0x1c4>
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <__aeabi_fsub+0x348>)
 80010cc:	3501      	adds	r5, #1
 80010ce:	4018      	ands	r0, r3
 80010d0:	e78e      	b.n	8000ff0 <__aeabi_fsub+0x1c4>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d047      	beq.n	8001168 <__aeabi_fsub+0x33c>
 80010d8:	1e4b      	subs	r3, r1, #1
 80010da:	2901      	cmp	r1, #1
 80010dc:	d015      	beq.n	800110a <__aeabi_fsub+0x2de>
 80010de:	29ff      	cmp	r1, #255	; 0xff
 80010e0:	d02b      	beq.n	800113a <__aeabi_fsub+0x30e>
 80010e2:	0019      	movs	r1, r3
 80010e4:	e74e      	b.n	8000f84 <__aeabi_fsub+0x158>
 80010e6:	000c      	movs	r4, r1
 80010e8:	464b      	mov	r3, r9
 80010ea:	003d      	movs	r5, r7
 80010ec:	e784      	b.n	8000ff8 <__aeabi_fsub+0x1cc>
 80010ee:	4662      	mov	r2, ip
 80010f0:	2a00      	cmp	r2, #0
 80010f2:	d18b      	bne.n	800100c <__aeabi_fsub+0x1e0>
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	d192      	bne.n	800101e <__aeabi_fsub+0x1f2>
 80010f8:	2780      	movs	r7, #128	; 0x80
 80010fa:	2400      	movs	r4, #0
 80010fc:	22ff      	movs	r2, #255	; 0xff
 80010fe:	03ff      	lsls	r7, r7, #15
 8001100:	e6df      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8001102:	4663      	mov	r3, ip
 8001104:	000c      	movs	r4, r1
 8001106:	1af7      	subs	r7, r6, r3
 8001108:	e6bf      	b.n	8000e8a <__aeabi_fsub+0x5e>
 800110a:	0030      	movs	r0, r6
 800110c:	4460      	add	r0, ip
 800110e:	2501      	movs	r5, #1
 8001110:	0143      	lsls	r3, r0, #5
 8001112:	d400      	bmi.n	8001116 <__aeabi_fsub+0x2ea>
 8001114:	e76c      	b.n	8000ff0 <__aeabi_fsub+0x1c4>
 8001116:	2502      	movs	r5, #2
 8001118:	e6f2      	b.n	8000f00 <__aeabi_fsub+0xd4>
 800111a:	4663      	mov	r3, ip
 800111c:	2501      	movs	r5, #1
 800111e:	1b98      	subs	r0, r3, r6
 8001120:	e6ae      	b.n	8000e80 <__aeabi_fsub+0x54>
 8001122:	2320      	movs	r3, #32
 8001124:	4664      	mov	r4, ip
 8001126:	4660      	mov	r0, ip
 8001128:	40fc      	lsrs	r4, r7
 800112a:	1bdf      	subs	r7, r3, r7
 800112c:	40b8      	lsls	r0, r7
 800112e:	1e43      	subs	r3, r0, #1
 8001130:	4198      	sbcs	r0, r3
 8001132:	4320      	orrs	r0, r4
 8001134:	e79f      	b.n	8001076 <__aeabi_fsub+0x24a>
 8001136:	0005      	movs	r5, r0
 8001138:	e75e      	b.n	8000ff8 <__aeabi_fsub+0x1cc>
 800113a:	464b      	mov	r3, r9
 800113c:	e771      	b.n	8001022 <__aeabi_fsub+0x1f6>
 800113e:	2320      	movs	r3, #32
 8001140:	4665      	mov	r5, ip
 8001142:	4660      	mov	r0, ip
 8001144:	40cd      	lsrs	r5, r1
 8001146:	1a59      	subs	r1, r3, r1
 8001148:	4088      	lsls	r0, r1
 800114a:	1e43      	subs	r3, r0, #1
 800114c:	4198      	sbcs	r0, r3
 800114e:	4328      	orrs	r0, r5
 8001150:	e71c      	b.n	8000f8c <__aeabi_fsub+0x160>
 8001152:	4663      	mov	r3, ip
 8001154:	000c      	movs	r4, r1
 8001156:	2501      	movs	r5, #1
 8001158:	1af0      	subs	r0, r6, r3
 800115a:	e691      	b.n	8000e80 <__aeabi_fsub+0x54>
 800115c:	2e00      	cmp	r6, #0
 800115e:	d095      	beq.n	800108c <__aeabi_fsub+0x260>
 8001160:	000c      	movs	r4, r1
 8001162:	464f      	mov	r7, r9
 8001164:	2200      	movs	r2, #0
 8001166:	e6ac      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8001168:	464b      	mov	r3, r9
 800116a:	000d      	movs	r5, r1
 800116c:	e744      	b.n	8000ff8 <__aeabi_fsub+0x1cc>
 800116e:	464f      	mov	r7, r9
 8001170:	2200      	movs	r2, #0
 8001172:	e6a6      	b.n	8000ec2 <__aeabi_fsub+0x96>
 8001174:	fbffffff 	.word	0xfbffffff
 8001178:	7dffffff 	.word	0x7dffffff
 800117c:	2800      	cmp	r0, #0
 800117e:	d000      	beq.n	8001182 <__aeabi_fsub+0x356>
 8001180:	e736      	b.n	8000ff0 <__aeabi_fsub+0x1c4>
 8001182:	2400      	movs	r4, #0
 8001184:	2700      	movs	r7, #0
 8001186:	e69c      	b.n	8000ec2 <__aeabi_fsub+0x96>

08001188 <__aeabi_fcmpun>:
 8001188:	0243      	lsls	r3, r0, #9
 800118a:	024a      	lsls	r2, r1, #9
 800118c:	0040      	lsls	r0, r0, #1
 800118e:	0049      	lsls	r1, r1, #1
 8001190:	0a5b      	lsrs	r3, r3, #9
 8001192:	0a52      	lsrs	r2, r2, #9
 8001194:	0e09      	lsrs	r1, r1, #24
 8001196:	0e00      	lsrs	r0, r0, #24
 8001198:	28ff      	cmp	r0, #255	; 0xff
 800119a:	d006      	beq.n	80011aa <__aeabi_fcmpun+0x22>
 800119c:	2000      	movs	r0, #0
 800119e:	29ff      	cmp	r1, #255	; 0xff
 80011a0:	d102      	bne.n	80011a8 <__aeabi_fcmpun+0x20>
 80011a2:	1e53      	subs	r3, r2, #1
 80011a4:	419a      	sbcs	r2, r3
 80011a6:	0010      	movs	r0, r2
 80011a8:	4770      	bx	lr
 80011aa:	38fe      	subs	r0, #254	; 0xfe
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1fb      	bne.n	80011a8 <__aeabi_fcmpun+0x20>
 80011b0:	e7f4      	b.n	800119c <__aeabi_fcmpun+0x14>
 80011b2:	46c0      	nop			; (mov r8, r8)

080011b4 <__aeabi_i2f>:
 80011b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011b6:	2800      	cmp	r0, #0
 80011b8:	d013      	beq.n	80011e2 <__aeabi_i2f+0x2e>
 80011ba:	17c3      	asrs	r3, r0, #31
 80011bc:	18c6      	adds	r6, r0, r3
 80011be:	405e      	eors	r6, r3
 80011c0:	0fc4      	lsrs	r4, r0, #31
 80011c2:	0030      	movs	r0, r6
 80011c4:	f001 fefa 	bl	8002fbc <__clzsi2>
 80011c8:	239e      	movs	r3, #158	; 0x9e
 80011ca:	0005      	movs	r5, r0
 80011cc:	1a1b      	subs	r3, r3, r0
 80011ce:	2b96      	cmp	r3, #150	; 0x96
 80011d0:	dc0f      	bgt.n	80011f2 <__aeabi_i2f+0x3e>
 80011d2:	2808      	cmp	r0, #8
 80011d4:	dd01      	ble.n	80011da <__aeabi_i2f+0x26>
 80011d6:	3d08      	subs	r5, #8
 80011d8:	40ae      	lsls	r6, r5
 80011da:	0276      	lsls	r6, r6, #9
 80011dc:	0a76      	lsrs	r6, r6, #9
 80011de:	b2d8      	uxtb	r0, r3
 80011e0:	e002      	b.n	80011e8 <__aeabi_i2f+0x34>
 80011e2:	2400      	movs	r4, #0
 80011e4:	2000      	movs	r0, #0
 80011e6:	2600      	movs	r6, #0
 80011e8:	05c0      	lsls	r0, r0, #23
 80011ea:	4330      	orrs	r0, r6
 80011ec:	07e4      	lsls	r4, r4, #31
 80011ee:	4320      	orrs	r0, r4
 80011f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011f2:	2b99      	cmp	r3, #153	; 0x99
 80011f4:	dd0c      	ble.n	8001210 <__aeabi_i2f+0x5c>
 80011f6:	2205      	movs	r2, #5
 80011f8:	0031      	movs	r1, r6
 80011fa:	1a12      	subs	r2, r2, r0
 80011fc:	40d1      	lsrs	r1, r2
 80011fe:	000a      	movs	r2, r1
 8001200:	0001      	movs	r1, r0
 8001202:	0030      	movs	r0, r6
 8001204:	311b      	adds	r1, #27
 8001206:	4088      	lsls	r0, r1
 8001208:	1e41      	subs	r1, r0, #1
 800120a:	4188      	sbcs	r0, r1
 800120c:	4302      	orrs	r2, r0
 800120e:	0016      	movs	r6, r2
 8001210:	2d05      	cmp	r5, #5
 8001212:	dc12      	bgt.n	800123a <__aeabi_i2f+0x86>
 8001214:	0031      	movs	r1, r6
 8001216:	4f0d      	ldr	r7, [pc, #52]	; (800124c <__aeabi_i2f+0x98>)
 8001218:	4039      	ands	r1, r7
 800121a:	0772      	lsls	r2, r6, #29
 800121c:	d009      	beq.n	8001232 <__aeabi_i2f+0x7e>
 800121e:	200f      	movs	r0, #15
 8001220:	4030      	ands	r0, r6
 8001222:	2804      	cmp	r0, #4
 8001224:	d005      	beq.n	8001232 <__aeabi_i2f+0x7e>
 8001226:	3104      	adds	r1, #4
 8001228:	014a      	lsls	r2, r1, #5
 800122a:	d502      	bpl.n	8001232 <__aeabi_i2f+0x7e>
 800122c:	239f      	movs	r3, #159	; 0x9f
 800122e:	4039      	ands	r1, r7
 8001230:	1b5b      	subs	r3, r3, r5
 8001232:	0189      	lsls	r1, r1, #6
 8001234:	0a4e      	lsrs	r6, r1, #9
 8001236:	b2d8      	uxtb	r0, r3
 8001238:	e7d6      	b.n	80011e8 <__aeabi_i2f+0x34>
 800123a:	1f6a      	subs	r2, r5, #5
 800123c:	4096      	lsls	r6, r2
 800123e:	0031      	movs	r1, r6
 8001240:	4f02      	ldr	r7, [pc, #8]	; (800124c <__aeabi_i2f+0x98>)
 8001242:	4039      	ands	r1, r7
 8001244:	0772      	lsls	r2, r6, #29
 8001246:	d0f4      	beq.n	8001232 <__aeabi_i2f+0x7e>
 8001248:	e7e9      	b.n	800121e <__aeabi_i2f+0x6a>
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	fbffffff 	.word	0xfbffffff

08001250 <__aeabi_dadd>:
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	464f      	mov	r7, r9
 8001254:	4646      	mov	r6, r8
 8001256:	46d6      	mov	lr, sl
 8001258:	000d      	movs	r5, r1
 800125a:	0004      	movs	r4, r0
 800125c:	b5c0      	push	{r6, r7, lr}
 800125e:	001f      	movs	r7, r3
 8001260:	0011      	movs	r1, r2
 8001262:	0328      	lsls	r0, r5, #12
 8001264:	0f62      	lsrs	r2, r4, #29
 8001266:	0a40      	lsrs	r0, r0, #9
 8001268:	4310      	orrs	r0, r2
 800126a:	007a      	lsls	r2, r7, #1
 800126c:	0d52      	lsrs	r2, r2, #21
 800126e:	00e3      	lsls	r3, r4, #3
 8001270:	033c      	lsls	r4, r7, #12
 8001272:	4691      	mov	r9, r2
 8001274:	0a64      	lsrs	r4, r4, #9
 8001276:	0ffa      	lsrs	r2, r7, #31
 8001278:	0f4f      	lsrs	r7, r1, #29
 800127a:	006e      	lsls	r6, r5, #1
 800127c:	4327      	orrs	r7, r4
 800127e:	4692      	mov	sl, r2
 8001280:	46b8      	mov	r8, r7
 8001282:	0d76      	lsrs	r6, r6, #21
 8001284:	0fed      	lsrs	r5, r5, #31
 8001286:	00c9      	lsls	r1, r1, #3
 8001288:	4295      	cmp	r5, r2
 800128a:	d100      	bne.n	800128e <__aeabi_dadd+0x3e>
 800128c:	e099      	b.n	80013c2 <__aeabi_dadd+0x172>
 800128e:	464c      	mov	r4, r9
 8001290:	1b34      	subs	r4, r6, r4
 8001292:	46a4      	mov	ip, r4
 8001294:	2c00      	cmp	r4, #0
 8001296:	dc00      	bgt.n	800129a <__aeabi_dadd+0x4a>
 8001298:	e07c      	b.n	8001394 <__aeabi_dadd+0x144>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_dadd+0x52>
 80012a0:	e0b8      	b.n	8001414 <__aeabi_dadd+0x1c4>
 80012a2:	4ac5      	ldr	r2, [pc, #788]	; (80015b8 <__aeabi_dadd+0x368>)
 80012a4:	4296      	cmp	r6, r2
 80012a6:	d100      	bne.n	80012aa <__aeabi_dadd+0x5a>
 80012a8:	e11c      	b.n	80014e4 <__aeabi_dadd+0x294>
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	003c      	movs	r4, r7
 80012ae:	0412      	lsls	r2, r2, #16
 80012b0:	4314      	orrs	r4, r2
 80012b2:	46a0      	mov	r8, r4
 80012b4:	4662      	mov	r2, ip
 80012b6:	2a38      	cmp	r2, #56	; 0x38
 80012b8:	dd00      	ble.n	80012bc <__aeabi_dadd+0x6c>
 80012ba:	e161      	b.n	8001580 <__aeabi_dadd+0x330>
 80012bc:	2a1f      	cmp	r2, #31
 80012be:	dd00      	ble.n	80012c2 <__aeabi_dadd+0x72>
 80012c0:	e1cc      	b.n	800165c <__aeabi_dadd+0x40c>
 80012c2:	4664      	mov	r4, ip
 80012c4:	2220      	movs	r2, #32
 80012c6:	1b12      	subs	r2, r2, r4
 80012c8:	4644      	mov	r4, r8
 80012ca:	4094      	lsls	r4, r2
 80012cc:	000f      	movs	r7, r1
 80012ce:	46a1      	mov	r9, r4
 80012d0:	4664      	mov	r4, ip
 80012d2:	4091      	lsls	r1, r2
 80012d4:	40e7      	lsrs	r7, r4
 80012d6:	464c      	mov	r4, r9
 80012d8:	1e4a      	subs	r2, r1, #1
 80012da:	4191      	sbcs	r1, r2
 80012dc:	433c      	orrs	r4, r7
 80012de:	4642      	mov	r2, r8
 80012e0:	4321      	orrs	r1, r4
 80012e2:	4664      	mov	r4, ip
 80012e4:	40e2      	lsrs	r2, r4
 80012e6:	1a80      	subs	r0, r0, r2
 80012e8:	1a5c      	subs	r4, r3, r1
 80012ea:	42a3      	cmp	r3, r4
 80012ec:	419b      	sbcs	r3, r3
 80012ee:	425f      	negs	r7, r3
 80012f0:	1bc7      	subs	r7, r0, r7
 80012f2:	023b      	lsls	r3, r7, #8
 80012f4:	d400      	bmi.n	80012f8 <__aeabi_dadd+0xa8>
 80012f6:	e0d0      	b.n	800149a <__aeabi_dadd+0x24a>
 80012f8:	027f      	lsls	r7, r7, #9
 80012fa:	0a7f      	lsrs	r7, r7, #9
 80012fc:	2f00      	cmp	r7, #0
 80012fe:	d100      	bne.n	8001302 <__aeabi_dadd+0xb2>
 8001300:	e0ff      	b.n	8001502 <__aeabi_dadd+0x2b2>
 8001302:	0038      	movs	r0, r7
 8001304:	f001 fe5a 	bl	8002fbc <__clzsi2>
 8001308:	0001      	movs	r1, r0
 800130a:	3908      	subs	r1, #8
 800130c:	2320      	movs	r3, #32
 800130e:	0022      	movs	r2, r4
 8001310:	1a5b      	subs	r3, r3, r1
 8001312:	408f      	lsls	r7, r1
 8001314:	40da      	lsrs	r2, r3
 8001316:	408c      	lsls	r4, r1
 8001318:	4317      	orrs	r7, r2
 800131a:	42b1      	cmp	r1, r6
 800131c:	da00      	bge.n	8001320 <__aeabi_dadd+0xd0>
 800131e:	e0ff      	b.n	8001520 <__aeabi_dadd+0x2d0>
 8001320:	1b89      	subs	r1, r1, r6
 8001322:	1c4b      	adds	r3, r1, #1
 8001324:	2b1f      	cmp	r3, #31
 8001326:	dd00      	ble.n	800132a <__aeabi_dadd+0xda>
 8001328:	e0a8      	b.n	800147c <__aeabi_dadd+0x22c>
 800132a:	2220      	movs	r2, #32
 800132c:	0039      	movs	r1, r7
 800132e:	1ad2      	subs	r2, r2, r3
 8001330:	0020      	movs	r0, r4
 8001332:	4094      	lsls	r4, r2
 8001334:	4091      	lsls	r1, r2
 8001336:	40d8      	lsrs	r0, r3
 8001338:	1e62      	subs	r2, r4, #1
 800133a:	4194      	sbcs	r4, r2
 800133c:	40df      	lsrs	r7, r3
 800133e:	2600      	movs	r6, #0
 8001340:	4301      	orrs	r1, r0
 8001342:	430c      	orrs	r4, r1
 8001344:	0763      	lsls	r3, r4, #29
 8001346:	d009      	beq.n	800135c <__aeabi_dadd+0x10c>
 8001348:	230f      	movs	r3, #15
 800134a:	4023      	ands	r3, r4
 800134c:	2b04      	cmp	r3, #4
 800134e:	d005      	beq.n	800135c <__aeabi_dadd+0x10c>
 8001350:	1d23      	adds	r3, r4, #4
 8001352:	42a3      	cmp	r3, r4
 8001354:	41a4      	sbcs	r4, r4
 8001356:	4264      	negs	r4, r4
 8001358:	193f      	adds	r7, r7, r4
 800135a:	001c      	movs	r4, r3
 800135c:	023b      	lsls	r3, r7, #8
 800135e:	d400      	bmi.n	8001362 <__aeabi_dadd+0x112>
 8001360:	e09e      	b.n	80014a0 <__aeabi_dadd+0x250>
 8001362:	4b95      	ldr	r3, [pc, #596]	; (80015b8 <__aeabi_dadd+0x368>)
 8001364:	3601      	adds	r6, #1
 8001366:	429e      	cmp	r6, r3
 8001368:	d100      	bne.n	800136c <__aeabi_dadd+0x11c>
 800136a:	e0b7      	b.n	80014dc <__aeabi_dadd+0x28c>
 800136c:	4a93      	ldr	r2, [pc, #588]	; (80015bc <__aeabi_dadd+0x36c>)
 800136e:	08e4      	lsrs	r4, r4, #3
 8001370:	4017      	ands	r7, r2
 8001372:	077b      	lsls	r3, r7, #29
 8001374:	0571      	lsls	r1, r6, #21
 8001376:	027f      	lsls	r7, r7, #9
 8001378:	4323      	orrs	r3, r4
 800137a:	0b3f      	lsrs	r7, r7, #12
 800137c:	0d4a      	lsrs	r2, r1, #21
 800137e:	0512      	lsls	r2, r2, #20
 8001380:	433a      	orrs	r2, r7
 8001382:	07ed      	lsls	r5, r5, #31
 8001384:	432a      	orrs	r2, r5
 8001386:	0018      	movs	r0, r3
 8001388:	0011      	movs	r1, r2
 800138a:	bce0      	pop	{r5, r6, r7}
 800138c:	46ba      	mov	sl, r7
 800138e:	46b1      	mov	r9, r6
 8001390:	46a8      	mov	r8, r5
 8001392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001394:	2c00      	cmp	r4, #0
 8001396:	d04b      	beq.n	8001430 <__aeabi_dadd+0x1e0>
 8001398:	464c      	mov	r4, r9
 800139a:	1ba4      	subs	r4, r4, r6
 800139c:	46a4      	mov	ip, r4
 800139e:	2e00      	cmp	r6, #0
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dadd+0x154>
 80013a2:	e123      	b.n	80015ec <__aeabi_dadd+0x39c>
 80013a4:	0004      	movs	r4, r0
 80013a6:	431c      	orrs	r4, r3
 80013a8:	d100      	bne.n	80013ac <__aeabi_dadd+0x15c>
 80013aa:	e1af      	b.n	800170c <__aeabi_dadd+0x4bc>
 80013ac:	4662      	mov	r2, ip
 80013ae:	1e54      	subs	r4, r2, #1
 80013b0:	2a01      	cmp	r2, #1
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dadd+0x166>
 80013b4:	e215      	b.n	80017e2 <__aeabi_dadd+0x592>
 80013b6:	4d80      	ldr	r5, [pc, #512]	; (80015b8 <__aeabi_dadd+0x368>)
 80013b8:	45ac      	cmp	ip, r5
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x16e>
 80013bc:	e1c8      	b.n	8001750 <__aeabi_dadd+0x500>
 80013be:	46a4      	mov	ip, r4
 80013c0:	e11b      	b.n	80015fa <__aeabi_dadd+0x3aa>
 80013c2:	464a      	mov	r2, r9
 80013c4:	1ab2      	subs	r2, r6, r2
 80013c6:	4694      	mov	ip, r2
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	dc00      	bgt.n	80013ce <__aeabi_dadd+0x17e>
 80013cc:	e0ac      	b.n	8001528 <__aeabi_dadd+0x2d8>
 80013ce:	464a      	mov	r2, r9
 80013d0:	2a00      	cmp	r2, #0
 80013d2:	d043      	beq.n	800145c <__aeabi_dadd+0x20c>
 80013d4:	4a78      	ldr	r2, [pc, #480]	; (80015b8 <__aeabi_dadd+0x368>)
 80013d6:	4296      	cmp	r6, r2
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x18c>
 80013da:	e1af      	b.n	800173c <__aeabi_dadd+0x4ec>
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	003c      	movs	r4, r7
 80013e0:	0412      	lsls	r2, r2, #16
 80013e2:	4314      	orrs	r4, r2
 80013e4:	46a0      	mov	r8, r4
 80013e6:	4662      	mov	r2, ip
 80013e8:	2a38      	cmp	r2, #56	; 0x38
 80013ea:	dc67      	bgt.n	80014bc <__aeabi_dadd+0x26c>
 80013ec:	2a1f      	cmp	r2, #31
 80013ee:	dc00      	bgt.n	80013f2 <__aeabi_dadd+0x1a2>
 80013f0:	e15f      	b.n	80016b2 <__aeabi_dadd+0x462>
 80013f2:	4647      	mov	r7, r8
 80013f4:	3a20      	subs	r2, #32
 80013f6:	40d7      	lsrs	r7, r2
 80013f8:	4662      	mov	r2, ip
 80013fa:	2a20      	cmp	r2, #32
 80013fc:	d005      	beq.n	800140a <__aeabi_dadd+0x1ba>
 80013fe:	4664      	mov	r4, ip
 8001400:	2240      	movs	r2, #64	; 0x40
 8001402:	1b12      	subs	r2, r2, r4
 8001404:	4644      	mov	r4, r8
 8001406:	4094      	lsls	r4, r2
 8001408:	4321      	orrs	r1, r4
 800140a:	1e4a      	subs	r2, r1, #1
 800140c:	4191      	sbcs	r1, r2
 800140e:	000c      	movs	r4, r1
 8001410:	433c      	orrs	r4, r7
 8001412:	e057      	b.n	80014c4 <__aeabi_dadd+0x274>
 8001414:	003a      	movs	r2, r7
 8001416:	430a      	orrs	r2, r1
 8001418:	d100      	bne.n	800141c <__aeabi_dadd+0x1cc>
 800141a:	e105      	b.n	8001628 <__aeabi_dadd+0x3d8>
 800141c:	0022      	movs	r2, r4
 800141e:	3a01      	subs	r2, #1
 8001420:	2c01      	cmp	r4, #1
 8001422:	d100      	bne.n	8001426 <__aeabi_dadd+0x1d6>
 8001424:	e182      	b.n	800172c <__aeabi_dadd+0x4dc>
 8001426:	4c64      	ldr	r4, [pc, #400]	; (80015b8 <__aeabi_dadd+0x368>)
 8001428:	45a4      	cmp	ip, r4
 800142a:	d05b      	beq.n	80014e4 <__aeabi_dadd+0x294>
 800142c:	4694      	mov	ip, r2
 800142e:	e741      	b.n	80012b4 <__aeabi_dadd+0x64>
 8001430:	4c63      	ldr	r4, [pc, #396]	; (80015c0 <__aeabi_dadd+0x370>)
 8001432:	1c77      	adds	r7, r6, #1
 8001434:	4227      	tst	r7, r4
 8001436:	d000      	beq.n	800143a <__aeabi_dadd+0x1ea>
 8001438:	e0c4      	b.n	80015c4 <__aeabi_dadd+0x374>
 800143a:	0004      	movs	r4, r0
 800143c:	431c      	orrs	r4, r3
 800143e:	2e00      	cmp	r6, #0
 8001440:	d000      	beq.n	8001444 <__aeabi_dadd+0x1f4>
 8001442:	e169      	b.n	8001718 <__aeabi_dadd+0x4c8>
 8001444:	2c00      	cmp	r4, #0
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x1fa>
 8001448:	e1bf      	b.n	80017ca <__aeabi_dadd+0x57a>
 800144a:	4644      	mov	r4, r8
 800144c:	430c      	orrs	r4, r1
 800144e:	d000      	beq.n	8001452 <__aeabi_dadd+0x202>
 8001450:	e1d0      	b.n	80017f4 <__aeabi_dadd+0x5a4>
 8001452:	0742      	lsls	r2, r0, #29
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	4313      	orrs	r3, r2
 8001458:	08c0      	lsrs	r0, r0, #3
 800145a:	e029      	b.n	80014b0 <__aeabi_dadd+0x260>
 800145c:	003a      	movs	r2, r7
 800145e:	430a      	orrs	r2, r1
 8001460:	d100      	bne.n	8001464 <__aeabi_dadd+0x214>
 8001462:	e170      	b.n	8001746 <__aeabi_dadd+0x4f6>
 8001464:	4662      	mov	r2, ip
 8001466:	4664      	mov	r4, ip
 8001468:	3a01      	subs	r2, #1
 800146a:	2c01      	cmp	r4, #1
 800146c:	d100      	bne.n	8001470 <__aeabi_dadd+0x220>
 800146e:	e0e0      	b.n	8001632 <__aeabi_dadd+0x3e2>
 8001470:	4c51      	ldr	r4, [pc, #324]	; (80015b8 <__aeabi_dadd+0x368>)
 8001472:	45a4      	cmp	ip, r4
 8001474:	d100      	bne.n	8001478 <__aeabi_dadd+0x228>
 8001476:	e161      	b.n	800173c <__aeabi_dadd+0x4ec>
 8001478:	4694      	mov	ip, r2
 800147a:	e7b4      	b.n	80013e6 <__aeabi_dadd+0x196>
 800147c:	003a      	movs	r2, r7
 800147e:	391f      	subs	r1, #31
 8001480:	40ca      	lsrs	r2, r1
 8001482:	0011      	movs	r1, r2
 8001484:	2b20      	cmp	r3, #32
 8001486:	d003      	beq.n	8001490 <__aeabi_dadd+0x240>
 8001488:	2240      	movs	r2, #64	; 0x40
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	409f      	lsls	r7, r3
 800148e:	433c      	orrs	r4, r7
 8001490:	1e63      	subs	r3, r4, #1
 8001492:	419c      	sbcs	r4, r3
 8001494:	2700      	movs	r7, #0
 8001496:	2600      	movs	r6, #0
 8001498:	430c      	orrs	r4, r1
 800149a:	0763      	lsls	r3, r4, #29
 800149c:	d000      	beq.n	80014a0 <__aeabi_dadd+0x250>
 800149e:	e753      	b.n	8001348 <__aeabi_dadd+0xf8>
 80014a0:	46b4      	mov	ip, r6
 80014a2:	08e4      	lsrs	r4, r4, #3
 80014a4:	077b      	lsls	r3, r7, #29
 80014a6:	4323      	orrs	r3, r4
 80014a8:	08f8      	lsrs	r0, r7, #3
 80014aa:	4a43      	ldr	r2, [pc, #268]	; (80015b8 <__aeabi_dadd+0x368>)
 80014ac:	4594      	cmp	ip, r2
 80014ae:	d01d      	beq.n	80014ec <__aeabi_dadd+0x29c>
 80014b0:	4662      	mov	r2, ip
 80014b2:	0307      	lsls	r7, r0, #12
 80014b4:	0552      	lsls	r2, r2, #21
 80014b6:	0b3f      	lsrs	r7, r7, #12
 80014b8:	0d52      	lsrs	r2, r2, #21
 80014ba:	e760      	b.n	800137e <__aeabi_dadd+0x12e>
 80014bc:	4644      	mov	r4, r8
 80014be:	430c      	orrs	r4, r1
 80014c0:	1e62      	subs	r2, r4, #1
 80014c2:	4194      	sbcs	r4, r2
 80014c4:	18e4      	adds	r4, r4, r3
 80014c6:	429c      	cmp	r4, r3
 80014c8:	419b      	sbcs	r3, r3
 80014ca:	425f      	negs	r7, r3
 80014cc:	183f      	adds	r7, r7, r0
 80014ce:	023b      	lsls	r3, r7, #8
 80014d0:	d5e3      	bpl.n	800149a <__aeabi_dadd+0x24a>
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <__aeabi_dadd+0x368>)
 80014d4:	3601      	adds	r6, #1
 80014d6:	429e      	cmp	r6, r3
 80014d8:	d000      	beq.n	80014dc <__aeabi_dadd+0x28c>
 80014da:	e0b5      	b.n	8001648 <__aeabi_dadd+0x3f8>
 80014dc:	0032      	movs	r2, r6
 80014de:	2700      	movs	r7, #0
 80014e0:	2300      	movs	r3, #0
 80014e2:	e74c      	b.n	800137e <__aeabi_dadd+0x12e>
 80014e4:	0742      	lsls	r2, r0, #29
 80014e6:	08db      	lsrs	r3, r3, #3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	08c0      	lsrs	r0, r0, #3
 80014ec:	001a      	movs	r2, r3
 80014ee:	4302      	orrs	r2, r0
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dadd+0x2a4>
 80014f2:	e1e1      	b.n	80018b8 <__aeabi_dadd+0x668>
 80014f4:	2780      	movs	r7, #128	; 0x80
 80014f6:	033f      	lsls	r7, r7, #12
 80014f8:	4307      	orrs	r7, r0
 80014fa:	033f      	lsls	r7, r7, #12
 80014fc:	4a2e      	ldr	r2, [pc, #184]	; (80015b8 <__aeabi_dadd+0x368>)
 80014fe:	0b3f      	lsrs	r7, r7, #12
 8001500:	e73d      	b.n	800137e <__aeabi_dadd+0x12e>
 8001502:	0020      	movs	r0, r4
 8001504:	f001 fd5a 	bl	8002fbc <__clzsi2>
 8001508:	0001      	movs	r1, r0
 800150a:	3118      	adds	r1, #24
 800150c:	291f      	cmp	r1, #31
 800150e:	dc00      	bgt.n	8001512 <__aeabi_dadd+0x2c2>
 8001510:	e6fc      	b.n	800130c <__aeabi_dadd+0xbc>
 8001512:	3808      	subs	r0, #8
 8001514:	4084      	lsls	r4, r0
 8001516:	0027      	movs	r7, r4
 8001518:	2400      	movs	r4, #0
 800151a:	42b1      	cmp	r1, r6
 800151c:	db00      	blt.n	8001520 <__aeabi_dadd+0x2d0>
 800151e:	e6ff      	b.n	8001320 <__aeabi_dadd+0xd0>
 8001520:	4a26      	ldr	r2, [pc, #152]	; (80015bc <__aeabi_dadd+0x36c>)
 8001522:	1a76      	subs	r6, r6, r1
 8001524:	4017      	ands	r7, r2
 8001526:	e70d      	b.n	8001344 <__aeabi_dadd+0xf4>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d02f      	beq.n	800158c <__aeabi_dadd+0x33c>
 800152c:	464a      	mov	r2, r9
 800152e:	1b92      	subs	r2, r2, r6
 8001530:	4694      	mov	ip, r2
 8001532:	2e00      	cmp	r6, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_dadd+0x2e8>
 8001536:	e0ad      	b.n	8001694 <__aeabi_dadd+0x444>
 8001538:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <__aeabi_dadd+0x368>)
 800153a:	4591      	cmp	r9, r2
 800153c:	d100      	bne.n	8001540 <__aeabi_dadd+0x2f0>
 800153e:	e10f      	b.n	8001760 <__aeabi_dadd+0x510>
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	0412      	lsls	r2, r2, #16
 8001544:	4310      	orrs	r0, r2
 8001546:	4662      	mov	r2, ip
 8001548:	2a38      	cmp	r2, #56	; 0x38
 800154a:	dd00      	ble.n	800154e <__aeabi_dadd+0x2fe>
 800154c:	e10f      	b.n	800176e <__aeabi_dadd+0x51e>
 800154e:	2a1f      	cmp	r2, #31
 8001550:	dd00      	ble.n	8001554 <__aeabi_dadd+0x304>
 8001552:	e180      	b.n	8001856 <__aeabi_dadd+0x606>
 8001554:	4664      	mov	r4, ip
 8001556:	2220      	movs	r2, #32
 8001558:	001e      	movs	r6, r3
 800155a:	1b12      	subs	r2, r2, r4
 800155c:	4667      	mov	r7, ip
 800155e:	0004      	movs	r4, r0
 8001560:	4093      	lsls	r3, r2
 8001562:	4094      	lsls	r4, r2
 8001564:	40fe      	lsrs	r6, r7
 8001566:	1e5a      	subs	r2, r3, #1
 8001568:	4193      	sbcs	r3, r2
 800156a:	40f8      	lsrs	r0, r7
 800156c:	4334      	orrs	r4, r6
 800156e:	431c      	orrs	r4, r3
 8001570:	4480      	add	r8, r0
 8001572:	1864      	adds	r4, r4, r1
 8001574:	428c      	cmp	r4, r1
 8001576:	41bf      	sbcs	r7, r7
 8001578:	427f      	negs	r7, r7
 800157a:	464e      	mov	r6, r9
 800157c:	4447      	add	r7, r8
 800157e:	e7a6      	b.n	80014ce <__aeabi_dadd+0x27e>
 8001580:	4642      	mov	r2, r8
 8001582:	430a      	orrs	r2, r1
 8001584:	0011      	movs	r1, r2
 8001586:	1e4a      	subs	r2, r1, #1
 8001588:	4191      	sbcs	r1, r2
 800158a:	e6ad      	b.n	80012e8 <__aeabi_dadd+0x98>
 800158c:	4c0c      	ldr	r4, [pc, #48]	; (80015c0 <__aeabi_dadd+0x370>)
 800158e:	1c72      	adds	r2, r6, #1
 8001590:	4222      	tst	r2, r4
 8001592:	d000      	beq.n	8001596 <__aeabi_dadd+0x346>
 8001594:	e0a1      	b.n	80016da <__aeabi_dadd+0x48a>
 8001596:	0002      	movs	r2, r0
 8001598:	431a      	orrs	r2, r3
 800159a:	2e00      	cmp	r6, #0
 800159c:	d000      	beq.n	80015a0 <__aeabi_dadd+0x350>
 800159e:	e0fa      	b.n	8001796 <__aeabi_dadd+0x546>
 80015a0:	2a00      	cmp	r2, #0
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dadd+0x356>
 80015a4:	e145      	b.n	8001832 <__aeabi_dadd+0x5e2>
 80015a6:	003a      	movs	r2, r7
 80015a8:	430a      	orrs	r2, r1
 80015aa:	d000      	beq.n	80015ae <__aeabi_dadd+0x35e>
 80015ac:	e146      	b.n	800183c <__aeabi_dadd+0x5ec>
 80015ae:	0742      	lsls	r2, r0, #29
 80015b0:	08db      	lsrs	r3, r3, #3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	08c0      	lsrs	r0, r0, #3
 80015b6:	e77b      	b.n	80014b0 <__aeabi_dadd+0x260>
 80015b8:	000007ff 	.word	0x000007ff
 80015bc:	ff7fffff 	.word	0xff7fffff
 80015c0:	000007fe 	.word	0x000007fe
 80015c4:	4647      	mov	r7, r8
 80015c6:	1a5c      	subs	r4, r3, r1
 80015c8:	1bc2      	subs	r2, r0, r7
 80015ca:	42a3      	cmp	r3, r4
 80015cc:	41bf      	sbcs	r7, r7
 80015ce:	427f      	negs	r7, r7
 80015d0:	46b9      	mov	r9, r7
 80015d2:	0017      	movs	r7, r2
 80015d4:	464a      	mov	r2, r9
 80015d6:	1abf      	subs	r7, r7, r2
 80015d8:	023a      	lsls	r2, r7, #8
 80015da:	d500      	bpl.n	80015de <__aeabi_dadd+0x38e>
 80015dc:	e08d      	b.n	80016fa <__aeabi_dadd+0x4aa>
 80015de:	0023      	movs	r3, r4
 80015e0:	433b      	orrs	r3, r7
 80015e2:	d000      	beq.n	80015e6 <__aeabi_dadd+0x396>
 80015e4:	e68a      	b.n	80012fc <__aeabi_dadd+0xac>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2500      	movs	r5, #0
 80015ea:	e761      	b.n	80014b0 <__aeabi_dadd+0x260>
 80015ec:	4cb4      	ldr	r4, [pc, #720]	; (80018c0 <__aeabi_dadd+0x670>)
 80015ee:	45a1      	cmp	r9, r4
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dadd+0x3a4>
 80015f2:	e0ad      	b.n	8001750 <__aeabi_dadd+0x500>
 80015f4:	2480      	movs	r4, #128	; 0x80
 80015f6:	0424      	lsls	r4, r4, #16
 80015f8:	4320      	orrs	r0, r4
 80015fa:	4664      	mov	r4, ip
 80015fc:	2c38      	cmp	r4, #56	; 0x38
 80015fe:	dc3d      	bgt.n	800167c <__aeabi_dadd+0x42c>
 8001600:	4662      	mov	r2, ip
 8001602:	2c1f      	cmp	r4, #31
 8001604:	dd00      	ble.n	8001608 <__aeabi_dadd+0x3b8>
 8001606:	e0b7      	b.n	8001778 <__aeabi_dadd+0x528>
 8001608:	2520      	movs	r5, #32
 800160a:	001e      	movs	r6, r3
 800160c:	1b2d      	subs	r5, r5, r4
 800160e:	0004      	movs	r4, r0
 8001610:	40ab      	lsls	r3, r5
 8001612:	40ac      	lsls	r4, r5
 8001614:	40d6      	lsrs	r6, r2
 8001616:	40d0      	lsrs	r0, r2
 8001618:	4642      	mov	r2, r8
 800161a:	1e5d      	subs	r5, r3, #1
 800161c:	41ab      	sbcs	r3, r5
 800161e:	4334      	orrs	r4, r6
 8001620:	1a12      	subs	r2, r2, r0
 8001622:	4690      	mov	r8, r2
 8001624:	4323      	orrs	r3, r4
 8001626:	e02c      	b.n	8001682 <__aeabi_dadd+0x432>
 8001628:	0742      	lsls	r2, r0, #29
 800162a:	08db      	lsrs	r3, r3, #3
 800162c:	4313      	orrs	r3, r2
 800162e:	08c0      	lsrs	r0, r0, #3
 8001630:	e73b      	b.n	80014aa <__aeabi_dadd+0x25a>
 8001632:	185c      	adds	r4, r3, r1
 8001634:	429c      	cmp	r4, r3
 8001636:	419b      	sbcs	r3, r3
 8001638:	4440      	add	r0, r8
 800163a:	425b      	negs	r3, r3
 800163c:	18c7      	adds	r7, r0, r3
 800163e:	2601      	movs	r6, #1
 8001640:	023b      	lsls	r3, r7, #8
 8001642:	d400      	bmi.n	8001646 <__aeabi_dadd+0x3f6>
 8001644:	e729      	b.n	800149a <__aeabi_dadd+0x24a>
 8001646:	2602      	movs	r6, #2
 8001648:	4a9e      	ldr	r2, [pc, #632]	; (80018c4 <__aeabi_dadd+0x674>)
 800164a:	0863      	lsrs	r3, r4, #1
 800164c:	4017      	ands	r7, r2
 800164e:	2201      	movs	r2, #1
 8001650:	4014      	ands	r4, r2
 8001652:	431c      	orrs	r4, r3
 8001654:	07fb      	lsls	r3, r7, #31
 8001656:	431c      	orrs	r4, r3
 8001658:	087f      	lsrs	r7, r7, #1
 800165a:	e673      	b.n	8001344 <__aeabi_dadd+0xf4>
 800165c:	4644      	mov	r4, r8
 800165e:	3a20      	subs	r2, #32
 8001660:	40d4      	lsrs	r4, r2
 8001662:	4662      	mov	r2, ip
 8001664:	2a20      	cmp	r2, #32
 8001666:	d005      	beq.n	8001674 <__aeabi_dadd+0x424>
 8001668:	4667      	mov	r7, ip
 800166a:	2240      	movs	r2, #64	; 0x40
 800166c:	1bd2      	subs	r2, r2, r7
 800166e:	4647      	mov	r7, r8
 8001670:	4097      	lsls	r7, r2
 8001672:	4339      	orrs	r1, r7
 8001674:	1e4a      	subs	r2, r1, #1
 8001676:	4191      	sbcs	r1, r2
 8001678:	4321      	orrs	r1, r4
 800167a:	e635      	b.n	80012e8 <__aeabi_dadd+0x98>
 800167c:	4303      	orrs	r3, r0
 800167e:	1e58      	subs	r0, r3, #1
 8001680:	4183      	sbcs	r3, r0
 8001682:	1acc      	subs	r4, r1, r3
 8001684:	42a1      	cmp	r1, r4
 8001686:	41bf      	sbcs	r7, r7
 8001688:	4643      	mov	r3, r8
 800168a:	427f      	negs	r7, r7
 800168c:	4655      	mov	r5, sl
 800168e:	464e      	mov	r6, r9
 8001690:	1bdf      	subs	r7, r3, r7
 8001692:	e62e      	b.n	80012f2 <__aeabi_dadd+0xa2>
 8001694:	0002      	movs	r2, r0
 8001696:	431a      	orrs	r2, r3
 8001698:	d100      	bne.n	800169c <__aeabi_dadd+0x44c>
 800169a:	e0bd      	b.n	8001818 <__aeabi_dadd+0x5c8>
 800169c:	4662      	mov	r2, ip
 800169e:	4664      	mov	r4, ip
 80016a0:	3a01      	subs	r2, #1
 80016a2:	2c01      	cmp	r4, #1
 80016a4:	d100      	bne.n	80016a8 <__aeabi_dadd+0x458>
 80016a6:	e0e5      	b.n	8001874 <__aeabi_dadd+0x624>
 80016a8:	4c85      	ldr	r4, [pc, #532]	; (80018c0 <__aeabi_dadd+0x670>)
 80016aa:	45a4      	cmp	ip, r4
 80016ac:	d058      	beq.n	8001760 <__aeabi_dadd+0x510>
 80016ae:	4694      	mov	ip, r2
 80016b0:	e749      	b.n	8001546 <__aeabi_dadd+0x2f6>
 80016b2:	4664      	mov	r4, ip
 80016b4:	2220      	movs	r2, #32
 80016b6:	1b12      	subs	r2, r2, r4
 80016b8:	4644      	mov	r4, r8
 80016ba:	4094      	lsls	r4, r2
 80016bc:	000f      	movs	r7, r1
 80016be:	46a1      	mov	r9, r4
 80016c0:	4664      	mov	r4, ip
 80016c2:	4091      	lsls	r1, r2
 80016c4:	40e7      	lsrs	r7, r4
 80016c6:	464c      	mov	r4, r9
 80016c8:	1e4a      	subs	r2, r1, #1
 80016ca:	4191      	sbcs	r1, r2
 80016cc:	433c      	orrs	r4, r7
 80016ce:	4642      	mov	r2, r8
 80016d0:	430c      	orrs	r4, r1
 80016d2:	4661      	mov	r1, ip
 80016d4:	40ca      	lsrs	r2, r1
 80016d6:	1880      	adds	r0, r0, r2
 80016d8:	e6f4      	b.n	80014c4 <__aeabi_dadd+0x274>
 80016da:	4c79      	ldr	r4, [pc, #484]	; (80018c0 <__aeabi_dadd+0x670>)
 80016dc:	42a2      	cmp	r2, r4
 80016de:	d100      	bne.n	80016e2 <__aeabi_dadd+0x492>
 80016e0:	e6fd      	b.n	80014de <__aeabi_dadd+0x28e>
 80016e2:	1859      	adds	r1, r3, r1
 80016e4:	4299      	cmp	r1, r3
 80016e6:	419b      	sbcs	r3, r3
 80016e8:	4440      	add	r0, r8
 80016ea:	425f      	negs	r7, r3
 80016ec:	19c7      	adds	r7, r0, r7
 80016ee:	07fc      	lsls	r4, r7, #31
 80016f0:	0849      	lsrs	r1, r1, #1
 80016f2:	0016      	movs	r6, r2
 80016f4:	430c      	orrs	r4, r1
 80016f6:	087f      	lsrs	r7, r7, #1
 80016f8:	e6cf      	b.n	800149a <__aeabi_dadd+0x24a>
 80016fa:	1acc      	subs	r4, r1, r3
 80016fc:	42a1      	cmp	r1, r4
 80016fe:	41bf      	sbcs	r7, r7
 8001700:	4643      	mov	r3, r8
 8001702:	427f      	negs	r7, r7
 8001704:	1a18      	subs	r0, r3, r0
 8001706:	4655      	mov	r5, sl
 8001708:	1bc7      	subs	r7, r0, r7
 800170a:	e5f7      	b.n	80012fc <__aeabi_dadd+0xac>
 800170c:	08c9      	lsrs	r1, r1, #3
 800170e:	077b      	lsls	r3, r7, #29
 8001710:	4655      	mov	r5, sl
 8001712:	430b      	orrs	r3, r1
 8001714:	08f8      	lsrs	r0, r7, #3
 8001716:	e6c8      	b.n	80014aa <__aeabi_dadd+0x25a>
 8001718:	2c00      	cmp	r4, #0
 800171a:	d000      	beq.n	800171e <__aeabi_dadd+0x4ce>
 800171c:	e081      	b.n	8001822 <__aeabi_dadd+0x5d2>
 800171e:	4643      	mov	r3, r8
 8001720:	430b      	orrs	r3, r1
 8001722:	d115      	bne.n	8001750 <__aeabi_dadd+0x500>
 8001724:	2080      	movs	r0, #128	; 0x80
 8001726:	2500      	movs	r5, #0
 8001728:	0300      	lsls	r0, r0, #12
 800172a:	e6e3      	b.n	80014f4 <__aeabi_dadd+0x2a4>
 800172c:	1a5c      	subs	r4, r3, r1
 800172e:	42a3      	cmp	r3, r4
 8001730:	419b      	sbcs	r3, r3
 8001732:	1bc7      	subs	r7, r0, r7
 8001734:	425b      	negs	r3, r3
 8001736:	2601      	movs	r6, #1
 8001738:	1aff      	subs	r7, r7, r3
 800173a:	e5da      	b.n	80012f2 <__aeabi_dadd+0xa2>
 800173c:	0742      	lsls	r2, r0, #29
 800173e:	08db      	lsrs	r3, r3, #3
 8001740:	4313      	orrs	r3, r2
 8001742:	08c0      	lsrs	r0, r0, #3
 8001744:	e6d2      	b.n	80014ec <__aeabi_dadd+0x29c>
 8001746:	0742      	lsls	r2, r0, #29
 8001748:	08db      	lsrs	r3, r3, #3
 800174a:	4313      	orrs	r3, r2
 800174c:	08c0      	lsrs	r0, r0, #3
 800174e:	e6ac      	b.n	80014aa <__aeabi_dadd+0x25a>
 8001750:	4643      	mov	r3, r8
 8001752:	4642      	mov	r2, r8
 8001754:	08c9      	lsrs	r1, r1, #3
 8001756:	075b      	lsls	r3, r3, #29
 8001758:	4655      	mov	r5, sl
 800175a:	430b      	orrs	r3, r1
 800175c:	08d0      	lsrs	r0, r2, #3
 800175e:	e6c5      	b.n	80014ec <__aeabi_dadd+0x29c>
 8001760:	4643      	mov	r3, r8
 8001762:	4642      	mov	r2, r8
 8001764:	075b      	lsls	r3, r3, #29
 8001766:	08c9      	lsrs	r1, r1, #3
 8001768:	430b      	orrs	r3, r1
 800176a:	08d0      	lsrs	r0, r2, #3
 800176c:	e6be      	b.n	80014ec <__aeabi_dadd+0x29c>
 800176e:	4303      	orrs	r3, r0
 8001770:	001c      	movs	r4, r3
 8001772:	1e63      	subs	r3, r4, #1
 8001774:	419c      	sbcs	r4, r3
 8001776:	e6fc      	b.n	8001572 <__aeabi_dadd+0x322>
 8001778:	0002      	movs	r2, r0
 800177a:	3c20      	subs	r4, #32
 800177c:	40e2      	lsrs	r2, r4
 800177e:	0014      	movs	r4, r2
 8001780:	4662      	mov	r2, ip
 8001782:	2a20      	cmp	r2, #32
 8001784:	d003      	beq.n	800178e <__aeabi_dadd+0x53e>
 8001786:	2540      	movs	r5, #64	; 0x40
 8001788:	1aad      	subs	r5, r5, r2
 800178a:	40a8      	lsls	r0, r5
 800178c:	4303      	orrs	r3, r0
 800178e:	1e58      	subs	r0, r3, #1
 8001790:	4183      	sbcs	r3, r0
 8001792:	4323      	orrs	r3, r4
 8001794:	e775      	b.n	8001682 <__aeabi_dadd+0x432>
 8001796:	2a00      	cmp	r2, #0
 8001798:	d0e2      	beq.n	8001760 <__aeabi_dadd+0x510>
 800179a:	003a      	movs	r2, r7
 800179c:	430a      	orrs	r2, r1
 800179e:	d0cd      	beq.n	800173c <__aeabi_dadd+0x4ec>
 80017a0:	0742      	lsls	r2, r0, #29
 80017a2:	08db      	lsrs	r3, r3, #3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	08c0      	lsrs	r0, r0, #3
 80017aa:	0312      	lsls	r2, r2, #12
 80017ac:	4210      	tst	r0, r2
 80017ae:	d006      	beq.n	80017be <__aeabi_dadd+0x56e>
 80017b0:	08fc      	lsrs	r4, r7, #3
 80017b2:	4214      	tst	r4, r2
 80017b4:	d103      	bne.n	80017be <__aeabi_dadd+0x56e>
 80017b6:	0020      	movs	r0, r4
 80017b8:	08cb      	lsrs	r3, r1, #3
 80017ba:	077a      	lsls	r2, r7, #29
 80017bc:	4313      	orrs	r3, r2
 80017be:	0f5a      	lsrs	r2, r3, #29
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	0752      	lsls	r2, r2, #29
 80017c4:	08db      	lsrs	r3, r3, #3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	e690      	b.n	80014ec <__aeabi_dadd+0x29c>
 80017ca:	4643      	mov	r3, r8
 80017cc:	430b      	orrs	r3, r1
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dadd+0x582>
 80017d0:	e709      	b.n	80015e6 <__aeabi_dadd+0x396>
 80017d2:	4643      	mov	r3, r8
 80017d4:	4642      	mov	r2, r8
 80017d6:	08c9      	lsrs	r1, r1, #3
 80017d8:	075b      	lsls	r3, r3, #29
 80017da:	4655      	mov	r5, sl
 80017dc:	430b      	orrs	r3, r1
 80017de:	08d0      	lsrs	r0, r2, #3
 80017e0:	e666      	b.n	80014b0 <__aeabi_dadd+0x260>
 80017e2:	1acc      	subs	r4, r1, r3
 80017e4:	42a1      	cmp	r1, r4
 80017e6:	4189      	sbcs	r1, r1
 80017e8:	1a3f      	subs	r7, r7, r0
 80017ea:	4249      	negs	r1, r1
 80017ec:	4655      	mov	r5, sl
 80017ee:	2601      	movs	r6, #1
 80017f0:	1a7f      	subs	r7, r7, r1
 80017f2:	e57e      	b.n	80012f2 <__aeabi_dadd+0xa2>
 80017f4:	4642      	mov	r2, r8
 80017f6:	1a5c      	subs	r4, r3, r1
 80017f8:	1a87      	subs	r7, r0, r2
 80017fa:	42a3      	cmp	r3, r4
 80017fc:	4192      	sbcs	r2, r2
 80017fe:	4252      	negs	r2, r2
 8001800:	1abf      	subs	r7, r7, r2
 8001802:	023a      	lsls	r2, r7, #8
 8001804:	d53d      	bpl.n	8001882 <__aeabi_dadd+0x632>
 8001806:	1acc      	subs	r4, r1, r3
 8001808:	42a1      	cmp	r1, r4
 800180a:	4189      	sbcs	r1, r1
 800180c:	4643      	mov	r3, r8
 800180e:	4249      	negs	r1, r1
 8001810:	1a1f      	subs	r7, r3, r0
 8001812:	4655      	mov	r5, sl
 8001814:	1a7f      	subs	r7, r7, r1
 8001816:	e595      	b.n	8001344 <__aeabi_dadd+0xf4>
 8001818:	077b      	lsls	r3, r7, #29
 800181a:	08c9      	lsrs	r1, r1, #3
 800181c:	430b      	orrs	r3, r1
 800181e:	08f8      	lsrs	r0, r7, #3
 8001820:	e643      	b.n	80014aa <__aeabi_dadd+0x25a>
 8001822:	4644      	mov	r4, r8
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	430c      	orrs	r4, r1
 8001828:	d130      	bne.n	800188c <__aeabi_dadd+0x63c>
 800182a:	0742      	lsls	r2, r0, #29
 800182c:	4313      	orrs	r3, r2
 800182e:	08c0      	lsrs	r0, r0, #3
 8001830:	e65c      	b.n	80014ec <__aeabi_dadd+0x29c>
 8001832:	077b      	lsls	r3, r7, #29
 8001834:	08c9      	lsrs	r1, r1, #3
 8001836:	430b      	orrs	r3, r1
 8001838:	08f8      	lsrs	r0, r7, #3
 800183a:	e639      	b.n	80014b0 <__aeabi_dadd+0x260>
 800183c:	185c      	adds	r4, r3, r1
 800183e:	429c      	cmp	r4, r3
 8001840:	419b      	sbcs	r3, r3
 8001842:	4440      	add	r0, r8
 8001844:	425b      	negs	r3, r3
 8001846:	18c7      	adds	r7, r0, r3
 8001848:	023b      	lsls	r3, r7, #8
 800184a:	d400      	bmi.n	800184e <__aeabi_dadd+0x5fe>
 800184c:	e625      	b.n	800149a <__aeabi_dadd+0x24a>
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <__aeabi_dadd+0x674>)
 8001850:	2601      	movs	r6, #1
 8001852:	401f      	ands	r7, r3
 8001854:	e621      	b.n	800149a <__aeabi_dadd+0x24a>
 8001856:	0004      	movs	r4, r0
 8001858:	3a20      	subs	r2, #32
 800185a:	40d4      	lsrs	r4, r2
 800185c:	4662      	mov	r2, ip
 800185e:	2a20      	cmp	r2, #32
 8001860:	d004      	beq.n	800186c <__aeabi_dadd+0x61c>
 8001862:	2240      	movs	r2, #64	; 0x40
 8001864:	4666      	mov	r6, ip
 8001866:	1b92      	subs	r2, r2, r6
 8001868:	4090      	lsls	r0, r2
 800186a:	4303      	orrs	r3, r0
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	4193      	sbcs	r3, r2
 8001870:	431c      	orrs	r4, r3
 8001872:	e67e      	b.n	8001572 <__aeabi_dadd+0x322>
 8001874:	185c      	adds	r4, r3, r1
 8001876:	428c      	cmp	r4, r1
 8001878:	4189      	sbcs	r1, r1
 800187a:	4440      	add	r0, r8
 800187c:	4249      	negs	r1, r1
 800187e:	1847      	adds	r7, r0, r1
 8001880:	e6dd      	b.n	800163e <__aeabi_dadd+0x3ee>
 8001882:	0023      	movs	r3, r4
 8001884:	433b      	orrs	r3, r7
 8001886:	d100      	bne.n	800188a <__aeabi_dadd+0x63a>
 8001888:	e6ad      	b.n	80015e6 <__aeabi_dadd+0x396>
 800188a:	e606      	b.n	800149a <__aeabi_dadd+0x24a>
 800188c:	0744      	lsls	r4, r0, #29
 800188e:	4323      	orrs	r3, r4
 8001890:	2480      	movs	r4, #128	; 0x80
 8001892:	08c0      	lsrs	r0, r0, #3
 8001894:	0324      	lsls	r4, r4, #12
 8001896:	4220      	tst	r0, r4
 8001898:	d008      	beq.n	80018ac <__aeabi_dadd+0x65c>
 800189a:	4642      	mov	r2, r8
 800189c:	08d6      	lsrs	r6, r2, #3
 800189e:	4226      	tst	r6, r4
 80018a0:	d104      	bne.n	80018ac <__aeabi_dadd+0x65c>
 80018a2:	4655      	mov	r5, sl
 80018a4:	0030      	movs	r0, r6
 80018a6:	08cb      	lsrs	r3, r1, #3
 80018a8:	0751      	lsls	r1, r2, #29
 80018aa:	430b      	orrs	r3, r1
 80018ac:	0f5a      	lsrs	r2, r3, #29
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	0752      	lsls	r2, r2, #29
 80018b4:	4313      	orrs	r3, r2
 80018b6:	e619      	b.n	80014ec <__aeabi_dadd+0x29c>
 80018b8:	2300      	movs	r3, #0
 80018ba:	4a01      	ldr	r2, [pc, #4]	; (80018c0 <__aeabi_dadd+0x670>)
 80018bc:	001f      	movs	r7, r3
 80018be:	e55e      	b.n	800137e <__aeabi_dadd+0x12e>
 80018c0:	000007ff 	.word	0x000007ff
 80018c4:	ff7fffff 	.word	0xff7fffff

080018c8 <__aeabi_ddiv>:
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ca:	4657      	mov	r7, sl
 80018cc:	464e      	mov	r6, r9
 80018ce:	4645      	mov	r5, r8
 80018d0:	46de      	mov	lr, fp
 80018d2:	b5e0      	push	{r5, r6, r7, lr}
 80018d4:	4681      	mov	r9, r0
 80018d6:	0005      	movs	r5, r0
 80018d8:	030c      	lsls	r4, r1, #12
 80018da:	0048      	lsls	r0, r1, #1
 80018dc:	4692      	mov	sl, r2
 80018de:	001f      	movs	r7, r3
 80018e0:	b085      	sub	sp, #20
 80018e2:	0b24      	lsrs	r4, r4, #12
 80018e4:	0d40      	lsrs	r0, r0, #21
 80018e6:	0fce      	lsrs	r6, r1, #31
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d100      	bne.n	80018ee <__aeabi_ddiv+0x26>
 80018ec:	e156      	b.n	8001b9c <__aeabi_ddiv+0x2d4>
 80018ee:	4bd4      	ldr	r3, [pc, #848]	; (8001c40 <__aeabi_ddiv+0x378>)
 80018f0:	4298      	cmp	r0, r3
 80018f2:	d100      	bne.n	80018f6 <__aeabi_ddiv+0x2e>
 80018f4:	e172      	b.n	8001bdc <__aeabi_ddiv+0x314>
 80018f6:	0f6b      	lsrs	r3, r5, #29
 80018f8:	00e4      	lsls	r4, r4, #3
 80018fa:	431c      	orrs	r4, r3
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	041b      	lsls	r3, r3, #16
 8001900:	4323      	orrs	r3, r4
 8001902:	4698      	mov	r8, r3
 8001904:	4bcf      	ldr	r3, [pc, #828]	; (8001c44 <__aeabi_ddiv+0x37c>)
 8001906:	00ed      	lsls	r5, r5, #3
 8001908:	469b      	mov	fp, r3
 800190a:	2300      	movs	r3, #0
 800190c:	4699      	mov	r9, r3
 800190e:	4483      	add	fp, r0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	033c      	lsls	r4, r7, #12
 8001914:	007b      	lsls	r3, r7, #1
 8001916:	4650      	mov	r0, sl
 8001918:	0b24      	lsrs	r4, r4, #12
 800191a:	0d5b      	lsrs	r3, r3, #21
 800191c:	0fff      	lsrs	r7, r7, #31
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <__aeabi_ddiv+0x5c>
 8001922:	e11f      	b.n	8001b64 <__aeabi_ddiv+0x29c>
 8001924:	4ac6      	ldr	r2, [pc, #792]	; (8001c40 <__aeabi_ddiv+0x378>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d100      	bne.n	800192c <__aeabi_ddiv+0x64>
 800192a:	e162      	b.n	8001bf2 <__aeabi_ddiv+0x32a>
 800192c:	49c5      	ldr	r1, [pc, #788]	; (8001c44 <__aeabi_ddiv+0x37c>)
 800192e:	0f42      	lsrs	r2, r0, #29
 8001930:	468c      	mov	ip, r1
 8001932:	00e4      	lsls	r4, r4, #3
 8001934:	4659      	mov	r1, fp
 8001936:	4314      	orrs	r4, r2
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	4463      	add	r3, ip
 800193c:	0412      	lsls	r2, r2, #16
 800193e:	1acb      	subs	r3, r1, r3
 8001940:	4314      	orrs	r4, r2
 8001942:	469b      	mov	fp, r3
 8001944:	00c2      	lsls	r2, r0, #3
 8001946:	2000      	movs	r0, #0
 8001948:	0033      	movs	r3, r6
 800194a:	407b      	eors	r3, r7
 800194c:	469a      	mov	sl, r3
 800194e:	464b      	mov	r3, r9
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d827      	bhi.n	80019a4 <__aeabi_ddiv+0xdc>
 8001954:	49bc      	ldr	r1, [pc, #752]	; (8001c48 <__aeabi_ddiv+0x380>)
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	58cb      	ldr	r3, [r1, r3]
 800195a:	469f      	mov	pc, r3
 800195c:	46b2      	mov	sl, r6
 800195e:	9b00      	ldr	r3, [sp, #0]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d016      	beq.n	8001992 <__aeabi_ddiv+0xca>
 8001964:	2b03      	cmp	r3, #3
 8001966:	d100      	bne.n	800196a <__aeabi_ddiv+0xa2>
 8001968:	e28e      	b.n	8001e88 <__aeabi_ddiv+0x5c0>
 800196a:	2b01      	cmp	r3, #1
 800196c:	d000      	beq.n	8001970 <__aeabi_ddiv+0xa8>
 800196e:	e0d9      	b.n	8001b24 <__aeabi_ddiv+0x25c>
 8001970:	2300      	movs	r3, #0
 8001972:	2400      	movs	r4, #0
 8001974:	2500      	movs	r5, #0
 8001976:	4652      	mov	r2, sl
 8001978:	051b      	lsls	r3, r3, #20
 800197a:	4323      	orrs	r3, r4
 800197c:	07d2      	lsls	r2, r2, #31
 800197e:	4313      	orrs	r3, r2
 8001980:	0028      	movs	r0, r5
 8001982:	0019      	movs	r1, r3
 8001984:	b005      	add	sp, #20
 8001986:	bcf0      	pop	{r4, r5, r6, r7}
 8001988:	46bb      	mov	fp, r7
 800198a:	46b2      	mov	sl, r6
 800198c:	46a9      	mov	r9, r5
 800198e:	46a0      	mov	r8, r4
 8001990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001992:	2400      	movs	r4, #0
 8001994:	2500      	movs	r5, #0
 8001996:	4baa      	ldr	r3, [pc, #680]	; (8001c40 <__aeabi_ddiv+0x378>)
 8001998:	e7ed      	b.n	8001976 <__aeabi_ddiv+0xae>
 800199a:	46ba      	mov	sl, r7
 800199c:	46a0      	mov	r8, r4
 800199e:	0015      	movs	r5, r2
 80019a0:	9000      	str	r0, [sp, #0]
 80019a2:	e7dc      	b.n	800195e <__aeabi_ddiv+0x96>
 80019a4:	4544      	cmp	r4, r8
 80019a6:	d200      	bcs.n	80019aa <__aeabi_ddiv+0xe2>
 80019a8:	e1c7      	b.n	8001d3a <__aeabi_ddiv+0x472>
 80019aa:	d100      	bne.n	80019ae <__aeabi_ddiv+0xe6>
 80019ac:	e1c2      	b.n	8001d34 <__aeabi_ddiv+0x46c>
 80019ae:	2301      	movs	r3, #1
 80019b0:	425b      	negs	r3, r3
 80019b2:	469c      	mov	ip, r3
 80019b4:	002e      	movs	r6, r5
 80019b6:	4640      	mov	r0, r8
 80019b8:	2500      	movs	r5, #0
 80019ba:	44e3      	add	fp, ip
 80019bc:	0223      	lsls	r3, r4, #8
 80019be:	0e14      	lsrs	r4, r2, #24
 80019c0:	431c      	orrs	r4, r3
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	4699      	mov	r9, r3
 80019c6:	0423      	lsls	r3, r4, #16
 80019c8:	0c1f      	lsrs	r7, r3, #16
 80019ca:	0212      	lsls	r2, r2, #8
 80019cc:	4649      	mov	r1, r9
 80019ce:	9200      	str	r2, [sp, #0]
 80019d0:	9701      	str	r7, [sp, #4]
 80019d2:	f7fe fc37 	bl	8000244 <__aeabi_uidivmod>
 80019d6:	0002      	movs	r2, r0
 80019d8:	437a      	muls	r2, r7
 80019da:	040b      	lsls	r3, r1, #16
 80019dc:	0c31      	lsrs	r1, r6, #16
 80019de:	4680      	mov	r8, r0
 80019e0:	4319      	orrs	r1, r3
 80019e2:	428a      	cmp	r2, r1
 80019e4:	d907      	bls.n	80019f6 <__aeabi_ddiv+0x12e>
 80019e6:	2301      	movs	r3, #1
 80019e8:	425b      	negs	r3, r3
 80019ea:	469c      	mov	ip, r3
 80019ec:	1909      	adds	r1, r1, r4
 80019ee:	44e0      	add	r8, ip
 80019f0:	428c      	cmp	r4, r1
 80019f2:	d800      	bhi.n	80019f6 <__aeabi_ddiv+0x12e>
 80019f4:	e207      	b.n	8001e06 <__aeabi_ddiv+0x53e>
 80019f6:	1a88      	subs	r0, r1, r2
 80019f8:	4649      	mov	r1, r9
 80019fa:	f7fe fc23 	bl	8000244 <__aeabi_uidivmod>
 80019fe:	0409      	lsls	r1, r1, #16
 8001a00:	468c      	mov	ip, r1
 8001a02:	0431      	lsls	r1, r6, #16
 8001a04:	4666      	mov	r6, ip
 8001a06:	9a01      	ldr	r2, [sp, #4]
 8001a08:	0c09      	lsrs	r1, r1, #16
 8001a0a:	4342      	muls	r2, r0
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	4331      	orrs	r1, r6
 8001a10:	428a      	cmp	r2, r1
 8001a12:	d904      	bls.n	8001a1e <__aeabi_ddiv+0x156>
 8001a14:	1909      	adds	r1, r1, r4
 8001a16:	3b01      	subs	r3, #1
 8001a18:	428c      	cmp	r4, r1
 8001a1a:	d800      	bhi.n	8001a1e <__aeabi_ddiv+0x156>
 8001a1c:	e1ed      	b.n	8001dfa <__aeabi_ddiv+0x532>
 8001a1e:	1a88      	subs	r0, r1, r2
 8001a20:	4642      	mov	r2, r8
 8001a22:	0412      	lsls	r2, r2, #16
 8001a24:	431a      	orrs	r2, r3
 8001a26:	4690      	mov	r8, r2
 8001a28:	4641      	mov	r1, r8
 8001a2a:	9b00      	ldr	r3, [sp, #0]
 8001a2c:	040e      	lsls	r6, r1, #16
 8001a2e:	0c1b      	lsrs	r3, r3, #16
 8001a30:	001f      	movs	r7, r3
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	9b00      	ldr	r3, [sp, #0]
 8001a36:	0c36      	lsrs	r6, r6, #16
 8001a38:	041b      	lsls	r3, r3, #16
 8001a3a:	0c19      	lsrs	r1, r3, #16
 8001a3c:	000b      	movs	r3, r1
 8001a3e:	4373      	muls	r3, r6
 8001a40:	0c12      	lsrs	r2, r2, #16
 8001a42:	437e      	muls	r6, r7
 8001a44:	9103      	str	r1, [sp, #12]
 8001a46:	4351      	muls	r1, r2
 8001a48:	437a      	muls	r2, r7
 8001a4a:	0c1f      	lsrs	r7, r3, #16
 8001a4c:	46bc      	mov	ip, r7
 8001a4e:	1876      	adds	r6, r6, r1
 8001a50:	4466      	add	r6, ip
 8001a52:	42b1      	cmp	r1, r6
 8001a54:	d903      	bls.n	8001a5e <__aeabi_ddiv+0x196>
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	0249      	lsls	r1, r1, #9
 8001a5a:	468c      	mov	ip, r1
 8001a5c:	4462      	add	r2, ip
 8001a5e:	0c31      	lsrs	r1, r6, #16
 8001a60:	188a      	adds	r2, r1, r2
 8001a62:	0431      	lsls	r1, r6, #16
 8001a64:	041e      	lsls	r6, r3, #16
 8001a66:	0c36      	lsrs	r6, r6, #16
 8001a68:	198e      	adds	r6, r1, r6
 8001a6a:	4290      	cmp	r0, r2
 8001a6c:	d302      	bcc.n	8001a74 <__aeabi_ddiv+0x1ac>
 8001a6e:	d112      	bne.n	8001a96 <__aeabi_ddiv+0x1ce>
 8001a70:	42b5      	cmp	r5, r6
 8001a72:	d210      	bcs.n	8001a96 <__aeabi_ddiv+0x1ce>
 8001a74:	4643      	mov	r3, r8
 8001a76:	1e59      	subs	r1, r3, #1
 8001a78:	9b00      	ldr	r3, [sp, #0]
 8001a7a:	469c      	mov	ip, r3
 8001a7c:	4465      	add	r5, ip
 8001a7e:	001f      	movs	r7, r3
 8001a80:	429d      	cmp	r5, r3
 8001a82:	419b      	sbcs	r3, r3
 8001a84:	425b      	negs	r3, r3
 8001a86:	191b      	adds	r3, r3, r4
 8001a88:	18c0      	adds	r0, r0, r3
 8001a8a:	4284      	cmp	r4, r0
 8001a8c:	d200      	bcs.n	8001a90 <__aeabi_ddiv+0x1c8>
 8001a8e:	e1a0      	b.n	8001dd2 <__aeabi_ddiv+0x50a>
 8001a90:	d100      	bne.n	8001a94 <__aeabi_ddiv+0x1cc>
 8001a92:	e19b      	b.n	8001dcc <__aeabi_ddiv+0x504>
 8001a94:	4688      	mov	r8, r1
 8001a96:	1bae      	subs	r6, r5, r6
 8001a98:	42b5      	cmp	r5, r6
 8001a9a:	41ad      	sbcs	r5, r5
 8001a9c:	1a80      	subs	r0, r0, r2
 8001a9e:	426d      	negs	r5, r5
 8001aa0:	1b40      	subs	r0, r0, r5
 8001aa2:	4284      	cmp	r4, r0
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_ddiv+0x1e0>
 8001aa6:	e1d5      	b.n	8001e54 <__aeabi_ddiv+0x58c>
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	f7fe fbcb 	bl	8000244 <__aeabi_uidivmod>
 8001aae:	9a01      	ldr	r2, [sp, #4]
 8001ab0:	040b      	lsls	r3, r1, #16
 8001ab2:	4342      	muls	r2, r0
 8001ab4:	0c31      	lsrs	r1, r6, #16
 8001ab6:	0005      	movs	r5, r0
 8001ab8:	4319      	orrs	r1, r3
 8001aba:	428a      	cmp	r2, r1
 8001abc:	d900      	bls.n	8001ac0 <__aeabi_ddiv+0x1f8>
 8001abe:	e16c      	b.n	8001d9a <__aeabi_ddiv+0x4d2>
 8001ac0:	1a88      	subs	r0, r1, r2
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	f7fe fbbe 	bl	8000244 <__aeabi_uidivmod>
 8001ac8:	9a01      	ldr	r2, [sp, #4]
 8001aca:	0436      	lsls	r6, r6, #16
 8001acc:	4342      	muls	r2, r0
 8001ace:	0409      	lsls	r1, r1, #16
 8001ad0:	0c36      	lsrs	r6, r6, #16
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	430e      	orrs	r6, r1
 8001ad6:	42b2      	cmp	r2, r6
 8001ad8:	d900      	bls.n	8001adc <__aeabi_ddiv+0x214>
 8001ada:	e153      	b.n	8001d84 <__aeabi_ddiv+0x4bc>
 8001adc:	9803      	ldr	r0, [sp, #12]
 8001ade:	1ab6      	subs	r6, r6, r2
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	042d      	lsls	r5, r5, #16
 8001ae4:	431d      	orrs	r5, r3
 8001ae6:	9f02      	ldr	r7, [sp, #8]
 8001ae8:	042b      	lsls	r3, r5, #16
 8001aea:	0c1b      	lsrs	r3, r3, #16
 8001aec:	435a      	muls	r2, r3
 8001aee:	437b      	muls	r3, r7
 8001af0:	469c      	mov	ip, r3
 8001af2:	0c29      	lsrs	r1, r5, #16
 8001af4:	4348      	muls	r0, r1
 8001af6:	0c13      	lsrs	r3, r2, #16
 8001af8:	4484      	add	ip, r0
 8001afa:	4463      	add	r3, ip
 8001afc:	4379      	muls	r1, r7
 8001afe:	4298      	cmp	r0, r3
 8001b00:	d903      	bls.n	8001b0a <__aeabi_ddiv+0x242>
 8001b02:	2080      	movs	r0, #128	; 0x80
 8001b04:	0240      	lsls	r0, r0, #9
 8001b06:	4684      	mov	ip, r0
 8001b08:	4461      	add	r1, ip
 8001b0a:	0c18      	lsrs	r0, r3, #16
 8001b0c:	0412      	lsls	r2, r2, #16
 8001b0e:	041b      	lsls	r3, r3, #16
 8001b10:	0c12      	lsrs	r2, r2, #16
 8001b12:	1841      	adds	r1, r0, r1
 8001b14:	189b      	adds	r3, r3, r2
 8001b16:	428e      	cmp	r6, r1
 8001b18:	d200      	bcs.n	8001b1c <__aeabi_ddiv+0x254>
 8001b1a:	e0ff      	b.n	8001d1c <__aeabi_ddiv+0x454>
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_ddiv+0x258>
 8001b1e:	e0fa      	b.n	8001d16 <__aeabi_ddiv+0x44e>
 8001b20:	2301      	movs	r3, #1
 8001b22:	431d      	orrs	r5, r3
 8001b24:	4a49      	ldr	r2, [pc, #292]	; (8001c4c <__aeabi_ddiv+0x384>)
 8001b26:	445a      	add	r2, fp
 8001b28:	2a00      	cmp	r2, #0
 8001b2a:	dc00      	bgt.n	8001b2e <__aeabi_ddiv+0x266>
 8001b2c:	e0aa      	b.n	8001c84 <__aeabi_ddiv+0x3bc>
 8001b2e:	076b      	lsls	r3, r5, #29
 8001b30:	d000      	beq.n	8001b34 <__aeabi_ddiv+0x26c>
 8001b32:	e13d      	b.n	8001db0 <__aeabi_ddiv+0x4e8>
 8001b34:	08ed      	lsrs	r5, r5, #3
 8001b36:	4643      	mov	r3, r8
 8001b38:	01db      	lsls	r3, r3, #7
 8001b3a:	d506      	bpl.n	8001b4a <__aeabi_ddiv+0x282>
 8001b3c:	4642      	mov	r2, r8
 8001b3e:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <__aeabi_ddiv+0x388>)
 8001b40:	401a      	ands	r2, r3
 8001b42:	4690      	mov	r8, r2
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	00d2      	lsls	r2, r2, #3
 8001b48:	445a      	add	r2, fp
 8001b4a:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <__aeabi_ddiv+0x38c>)
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dd00      	ble.n	8001b52 <__aeabi_ddiv+0x28a>
 8001b50:	e71f      	b.n	8001992 <__aeabi_ddiv+0xca>
 8001b52:	4643      	mov	r3, r8
 8001b54:	075b      	lsls	r3, r3, #29
 8001b56:	431d      	orrs	r5, r3
 8001b58:	4643      	mov	r3, r8
 8001b5a:	0552      	lsls	r2, r2, #21
 8001b5c:	025c      	lsls	r4, r3, #9
 8001b5e:	0b24      	lsrs	r4, r4, #12
 8001b60:	0d53      	lsrs	r3, r2, #21
 8001b62:	e708      	b.n	8001976 <__aeabi_ddiv+0xae>
 8001b64:	4652      	mov	r2, sl
 8001b66:	4322      	orrs	r2, r4
 8001b68:	d100      	bne.n	8001b6c <__aeabi_ddiv+0x2a4>
 8001b6a:	e07b      	b.n	8001c64 <__aeabi_ddiv+0x39c>
 8001b6c:	2c00      	cmp	r4, #0
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_ddiv+0x2aa>
 8001b70:	e0fa      	b.n	8001d68 <__aeabi_ddiv+0x4a0>
 8001b72:	0020      	movs	r0, r4
 8001b74:	f001 fa22 	bl	8002fbc <__clzsi2>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	3a0b      	subs	r2, #11
 8001b7c:	231d      	movs	r3, #29
 8001b7e:	0001      	movs	r1, r0
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	4652      	mov	r2, sl
 8001b84:	3908      	subs	r1, #8
 8001b86:	40da      	lsrs	r2, r3
 8001b88:	408c      	lsls	r4, r1
 8001b8a:	4314      	orrs	r4, r2
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	408a      	lsls	r2, r1
 8001b90:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <__aeabi_ddiv+0x390>)
 8001b92:	4458      	add	r0, fp
 8001b94:	469b      	mov	fp, r3
 8001b96:	4483      	add	fp, r0
 8001b98:	2000      	movs	r0, #0
 8001b9a:	e6d5      	b.n	8001948 <__aeabi_ddiv+0x80>
 8001b9c:	464b      	mov	r3, r9
 8001b9e:	4323      	orrs	r3, r4
 8001ba0:	4698      	mov	r8, r3
 8001ba2:	d044      	beq.n	8001c2e <__aeabi_ddiv+0x366>
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d100      	bne.n	8001baa <__aeabi_ddiv+0x2e2>
 8001ba8:	e0ce      	b.n	8001d48 <__aeabi_ddiv+0x480>
 8001baa:	0020      	movs	r0, r4
 8001bac:	f001 fa06 	bl	8002fbc <__clzsi2>
 8001bb0:	0001      	movs	r1, r0
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	390b      	subs	r1, #11
 8001bb6:	231d      	movs	r3, #29
 8001bb8:	1a5b      	subs	r3, r3, r1
 8001bba:	4649      	mov	r1, r9
 8001bbc:	0010      	movs	r0, r2
 8001bbe:	40d9      	lsrs	r1, r3
 8001bc0:	3808      	subs	r0, #8
 8001bc2:	4084      	lsls	r4, r0
 8001bc4:	000b      	movs	r3, r1
 8001bc6:	464d      	mov	r5, r9
 8001bc8:	4323      	orrs	r3, r4
 8001bca:	4698      	mov	r8, r3
 8001bcc:	4085      	lsls	r5, r0
 8001bce:	4823      	ldr	r0, [pc, #140]	; (8001c5c <__aeabi_ddiv+0x394>)
 8001bd0:	1a83      	subs	r3, r0, r2
 8001bd2:	469b      	mov	fp, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	e69a      	b.n	8001912 <__aeabi_ddiv+0x4a>
 8001bdc:	464b      	mov	r3, r9
 8001bde:	4323      	orrs	r3, r4
 8001be0:	4698      	mov	r8, r3
 8001be2:	d11d      	bne.n	8001c20 <__aeabi_ddiv+0x358>
 8001be4:	2308      	movs	r3, #8
 8001be6:	4699      	mov	r9, r3
 8001be8:	3b06      	subs	r3, #6
 8001bea:	2500      	movs	r5, #0
 8001bec:	4683      	mov	fp, r0
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	e68f      	b.n	8001912 <__aeabi_ddiv+0x4a>
 8001bf2:	4652      	mov	r2, sl
 8001bf4:	4322      	orrs	r2, r4
 8001bf6:	d109      	bne.n	8001c0c <__aeabi_ddiv+0x344>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	4649      	mov	r1, r9
 8001bfc:	4319      	orrs	r1, r3
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <__aeabi_ddiv+0x398>)
 8001c00:	4689      	mov	r9, r1
 8001c02:	469c      	mov	ip, r3
 8001c04:	2400      	movs	r4, #0
 8001c06:	2002      	movs	r0, #2
 8001c08:	44e3      	add	fp, ip
 8001c0a:	e69d      	b.n	8001948 <__aeabi_ddiv+0x80>
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	464a      	mov	r2, r9
 8001c10:	431a      	orrs	r2, r3
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <__aeabi_ddiv+0x398>)
 8001c14:	4691      	mov	r9, r2
 8001c16:	469c      	mov	ip, r3
 8001c18:	4652      	mov	r2, sl
 8001c1a:	2003      	movs	r0, #3
 8001c1c:	44e3      	add	fp, ip
 8001c1e:	e693      	b.n	8001948 <__aeabi_ddiv+0x80>
 8001c20:	230c      	movs	r3, #12
 8001c22:	4699      	mov	r9, r3
 8001c24:	3b09      	subs	r3, #9
 8001c26:	46a0      	mov	r8, r4
 8001c28:	4683      	mov	fp, r0
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	e671      	b.n	8001912 <__aeabi_ddiv+0x4a>
 8001c2e:	2304      	movs	r3, #4
 8001c30:	4699      	mov	r9, r3
 8001c32:	2300      	movs	r3, #0
 8001c34:	469b      	mov	fp, r3
 8001c36:	3301      	adds	r3, #1
 8001c38:	2500      	movs	r5, #0
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	e669      	b.n	8001912 <__aeabi_ddiv+0x4a>
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	000007ff 	.word	0x000007ff
 8001c44:	fffffc01 	.word	0xfffffc01
 8001c48:	0800b128 	.word	0x0800b128
 8001c4c:	000003ff 	.word	0x000003ff
 8001c50:	feffffff 	.word	0xfeffffff
 8001c54:	000007fe 	.word	0x000007fe
 8001c58:	000003f3 	.word	0x000003f3
 8001c5c:	fffffc0d 	.word	0xfffffc0d
 8001c60:	fffff801 	.word	0xfffff801
 8001c64:	4649      	mov	r1, r9
 8001c66:	2301      	movs	r3, #1
 8001c68:	4319      	orrs	r1, r3
 8001c6a:	4689      	mov	r9, r1
 8001c6c:	2400      	movs	r4, #0
 8001c6e:	2001      	movs	r0, #1
 8001c70:	e66a      	b.n	8001948 <__aeabi_ddiv+0x80>
 8001c72:	2300      	movs	r3, #0
 8001c74:	2480      	movs	r4, #128	; 0x80
 8001c76:	469a      	mov	sl, r3
 8001c78:	2500      	movs	r5, #0
 8001c7a:	4b8a      	ldr	r3, [pc, #552]	; (8001ea4 <__aeabi_ddiv+0x5dc>)
 8001c7c:	0324      	lsls	r4, r4, #12
 8001c7e:	e67a      	b.n	8001976 <__aeabi_ddiv+0xae>
 8001c80:	2501      	movs	r5, #1
 8001c82:	426d      	negs	r5, r5
 8001c84:	2301      	movs	r3, #1
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	2b38      	cmp	r3, #56	; 0x38
 8001c8a:	dd00      	ble.n	8001c8e <__aeabi_ddiv+0x3c6>
 8001c8c:	e670      	b.n	8001970 <__aeabi_ddiv+0xa8>
 8001c8e:	2b1f      	cmp	r3, #31
 8001c90:	dc00      	bgt.n	8001c94 <__aeabi_ddiv+0x3cc>
 8001c92:	e0bf      	b.n	8001e14 <__aeabi_ddiv+0x54c>
 8001c94:	211f      	movs	r1, #31
 8001c96:	4249      	negs	r1, r1
 8001c98:	1a8a      	subs	r2, r1, r2
 8001c9a:	4641      	mov	r1, r8
 8001c9c:	40d1      	lsrs	r1, r2
 8001c9e:	000a      	movs	r2, r1
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d004      	beq.n	8001cae <__aeabi_ddiv+0x3e6>
 8001ca4:	4641      	mov	r1, r8
 8001ca6:	4b80      	ldr	r3, [pc, #512]	; (8001ea8 <__aeabi_ddiv+0x5e0>)
 8001ca8:	445b      	add	r3, fp
 8001caa:	4099      	lsls	r1, r3
 8001cac:	430d      	orrs	r5, r1
 8001cae:	1e6b      	subs	r3, r5, #1
 8001cb0:	419d      	sbcs	r5, r3
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	432a      	orrs	r2, r5
 8001cb6:	001d      	movs	r5, r3
 8001cb8:	2400      	movs	r4, #0
 8001cba:	4015      	ands	r5, r2
 8001cbc:	4213      	tst	r3, r2
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_ddiv+0x3fa>
 8001cc0:	e0d4      	b.n	8001e6c <__aeabi_ddiv+0x5a4>
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	4011      	ands	r1, r2
 8001cc8:	2904      	cmp	r1, #4
 8001cca:	d100      	bne.n	8001cce <__aeabi_ddiv+0x406>
 8001ccc:	e0cb      	b.n	8001e66 <__aeabi_ddiv+0x59e>
 8001cce:	1d11      	adds	r1, r2, #4
 8001cd0:	4291      	cmp	r1, r2
 8001cd2:	4192      	sbcs	r2, r2
 8001cd4:	4252      	negs	r2, r2
 8001cd6:	189b      	adds	r3, r3, r2
 8001cd8:	000a      	movs	r2, r1
 8001cda:	0219      	lsls	r1, r3, #8
 8001cdc:	d400      	bmi.n	8001ce0 <__aeabi_ddiv+0x418>
 8001cde:	e0c2      	b.n	8001e66 <__aeabi_ddiv+0x59e>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	2400      	movs	r4, #0
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	e646      	b.n	8001976 <__aeabi_ddiv+0xae>
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	4641      	mov	r1, r8
 8001cec:	031b      	lsls	r3, r3, #12
 8001cee:	4219      	tst	r1, r3
 8001cf0:	d008      	beq.n	8001d04 <__aeabi_ddiv+0x43c>
 8001cf2:	421c      	tst	r4, r3
 8001cf4:	d106      	bne.n	8001d04 <__aeabi_ddiv+0x43c>
 8001cf6:	431c      	orrs	r4, r3
 8001cf8:	0324      	lsls	r4, r4, #12
 8001cfa:	46ba      	mov	sl, r7
 8001cfc:	0015      	movs	r5, r2
 8001cfe:	4b69      	ldr	r3, [pc, #420]	; (8001ea4 <__aeabi_ddiv+0x5dc>)
 8001d00:	0b24      	lsrs	r4, r4, #12
 8001d02:	e638      	b.n	8001976 <__aeabi_ddiv+0xae>
 8001d04:	2480      	movs	r4, #128	; 0x80
 8001d06:	4643      	mov	r3, r8
 8001d08:	0324      	lsls	r4, r4, #12
 8001d0a:	431c      	orrs	r4, r3
 8001d0c:	0324      	lsls	r4, r4, #12
 8001d0e:	46b2      	mov	sl, r6
 8001d10:	4b64      	ldr	r3, [pc, #400]	; (8001ea4 <__aeabi_ddiv+0x5dc>)
 8001d12:	0b24      	lsrs	r4, r4, #12
 8001d14:	e62f      	b.n	8001976 <__aeabi_ddiv+0xae>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_ddiv+0x454>
 8001d1a:	e703      	b.n	8001b24 <__aeabi_ddiv+0x25c>
 8001d1c:	19a6      	adds	r6, r4, r6
 8001d1e:	1e68      	subs	r0, r5, #1
 8001d20:	42a6      	cmp	r6, r4
 8001d22:	d200      	bcs.n	8001d26 <__aeabi_ddiv+0x45e>
 8001d24:	e08d      	b.n	8001e42 <__aeabi_ddiv+0x57a>
 8001d26:	428e      	cmp	r6, r1
 8001d28:	d200      	bcs.n	8001d2c <__aeabi_ddiv+0x464>
 8001d2a:	e0a3      	b.n	8001e74 <__aeabi_ddiv+0x5ac>
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x468>
 8001d2e:	e0b3      	b.n	8001e98 <__aeabi_ddiv+0x5d0>
 8001d30:	0005      	movs	r5, r0
 8001d32:	e6f5      	b.n	8001b20 <__aeabi_ddiv+0x258>
 8001d34:	42aa      	cmp	r2, r5
 8001d36:	d900      	bls.n	8001d3a <__aeabi_ddiv+0x472>
 8001d38:	e639      	b.n	80019ae <__aeabi_ddiv+0xe6>
 8001d3a:	4643      	mov	r3, r8
 8001d3c:	07de      	lsls	r6, r3, #31
 8001d3e:	0858      	lsrs	r0, r3, #1
 8001d40:	086b      	lsrs	r3, r5, #1
 8001d42:	431e      	orrs	r6, r3
 8001d44:	07ed      	lsls	r5, r5, #31
 8001d46:	e639      	b.n	80019bc <__aeabi_ddiv+0xf4>
 8001d48:	4648      	mov	r0, r9
 8001d4a:	f001 f937 	bl	8002fbc <__clzsi2>
 8001d4e:	0001      	movs	r1, r0
 8001d50:	0002      	movs	r2, r0
 8001d52:	3115      	adds	r1, #21
 8001d54:	3220      	adds	r2, #32
 8001d56:	291c      	cmp	r1, #28
 8001d58:	dc00      	bgt.n	8001d5c <__aeabi_ddiv+0x494>
 8001d5a:	e72c      	b.n	8001bb6 <__aeabi_ddiv+0x2ee>
 8001d5c:	464b      	mov	r3, r9
 8001d5e:	3808      	subs	r0, #8
 8001d60:	4083      	lsls	r3, r0
 8001d62:	2500      	movs	r5, #0
 8001d64:	4698      	mov	r8, r3
 8001d66:	e732      	b.n	8001bce <__aeabi_ddiv+0x306>
 8001d68:	f001 f928 	bl	8002fbc <__clzsi2>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	001a      	movs	r2, r3
 8001d70:	3215      	adds	r2, #21
 8001d72:	3020      	adds	r0, #32
 8001d74:	2a1c      	cmp	r2, #28
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_ddiv+0x4b2>
 8001d78:	e700      	b.n	8001b7c <__aeabi_ddiv+0x2b4>
 8001d7a:	4654      	mov	r4, sl
 8001d7c:	3b08      	subs	r3, #8
 8001d7e:	2200      	movs	r2, #0
 8001d80:	409c      	lsls	r4, r3
 8001d82:	e705      	b.n	8001b90 <__aeabi_ddiv+0x2c8>
 8001d84:	1936      	adds	r6, r6, r4
 8001d86:	3b01      	subs	r3, #1
 8001d88:	42b4      	cmp	r4, r6
 8001d8a:	d900      	bls.n	8001d8e <__aeabi_ddiv+0x4c6>
 8001d8c:	e6a6      	b.n	8001adc <__aeabi_ddiv+0x214>
 8001d8e:	42b2      	cmp	r2, r6
 8001d90:	d800      	bhi.n	8001d94 <__aeabi_ddiv+0x4cc>
 8001d92:	e6a3      	b.n	8001adc <__aeabi_ddiv+0x214>
 8001d94:	1e83      	subs	r3, r0, #2
 8001d96:	1936      	adds	r6, r6, r4
 8001d98:	e6a0      	b.n	8001adc <__aeabi_ddiv+0x214>
 8001d9a:	1909      	adds	r1, r1, r4
 8001d9c:	3d01      	subs	r5, #1
 8001d9e:	428c      	cmp	r4, r1
 8001da0:	d900      	bls.n	8001da4 <__aeabi_ddiv+0x4dc>
 8001da2:	e68d      	b.n	8001ac0 <__aeabi_ddiv+0x1f8>
 8001da4:	428a      	cmp	r2, r1
 8001da6:	d800      	bhi.n	8001daa <__aeabi_ddiv+0x4e2>
 8001da8:	e68a      	b.n	8001ac0 <__aeabi_ddiv+0x1f8>
 8001daa:	1e85      	subs	r5, r0, #2
 8001dac:	1909      	adds	r1, r1, r4
 8001dae:	e687      	b.n	8001ac0 <__aeabi_ddiv+0x1f8>
 8001db0:	230f      	movs	r3, #15
 8001db2:	402b      	ands	r3, r5
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x4f2>
 8001db8:	e6bc      	b.n	8001b34 <__aeabi_ddiv+0x26c>
 8001dba:	2305      	movs	r3, #5
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	42ab      	cmp	r3, r5
 8001dc0:	419b      	sbcs	r3, r3
 8001dc2:	3504      	adds	r5, #4
 8001dc4:	425b      	negs	r3, r3
 8001dc6:	08ed      	lsrs	r5, r5, #3
 8001dc8:	4498      	add	r8, r3
 8001dca:	e6b4      	b.n	8001b36 <__aeabi_ddiv+0x26e>
 8001dcc:	42af      	cmp	r7, r5
 8001dce:	d900      	bls.n	8001dd2 <__aeabi_ddiv+0x50a>
 8001dd0:	e660      	b.n	8001a94 <__aeabi_ddiv+0x1cc>
 8001dd2:	4282      	cmp	r2, r0
 8001dd4:	d804      	bhi.n	8001de0 <__aeabi_ddiv+0x518>
 8001dd6:	d000      	beq.n	8001dda <__aeabi_ddiv+0x512>
 8001dd8:	e65c      	b.n	8001a94 <__aeabi_ddiv+0x1cc>
 8001dda:	42ae      	cmp	r6, r5
 8001ddc:	d800      	bhi.n	8001de0 <__aeabi_ddiv+0x518>
 8001dde:	e659      	b.n	8001a94 <__aeabi_ddiv+0x1cc>
 8001de0:	2302      	movs	r3, #2
 8001de2:	425b      	negs	r3, r3
 8001de4:	469c      	mov	ip, r3
 8001de6:	9b00      	ldr	r3, [sp, #0]
 8001de8:	44e0      	add	r8, ip
 8001dea:	469c      	mov	ip, r3
 8001dec:	4465      	add	r5, ip
 8001dee:	429d      	cmp	r5, r3
 8001df0:	419b      	sbcs	r3, r3
 8001df2:	425b      	negs	r3, r3
 8001df4:	191b      	adds	r3, r3, r4
 8001df6:	18c0      	adds	r0, r0, r3
 8001df8:	e64d      	b.n	8001a96 <__aeabi_ddiv+0x1ce>
 8001dfa:	428a      	cmp	r2, r1
 8001dfc:	d800      	bhi.n	8001e00 <__aeabi_ddiv+0x538>
 8001dfe:	e60e      	b.n	8001a1e <__aeabi_ddiv+0x156>
 8001e00:	1e83      	subs	r3, r0, #2
 8001e02:	1909      	adds	r1, r1, r4
 8001e04:	e60b      	b.n	8001a1e <__aeabi_ddiv+0x156>
 8001e06:	428a      	cmp	r2, r1
 8001e08:	d800      	bhi.n	8001e0c <__aeabi_ddiv+0x544>
 8001e0a:	e5f4      	b.n	80019f6 <__aeabi_ddiv+0x12e>
 8001e0c:	1e83      	subs	r3, r0, #2
 8001e0e:	4698      	mov	r8, r3
 8001e10:	1909      	adds	r1, r1, r4
 8001e12:	e5f0      	b.n	80019f6 <__aeabi_ddiv+0x12e>
 8001e14:	4925      	ldr	r1, [pc, #148]	; (8001eac <__aeabi_ddiv+0x5e4>)
 8001e16:	0028      	movs	r0, r5
 8001e18:	4459      	add	r1, fp
 8001e1a:	408d      	lsls	r5, r1
 8001e1c:	4642      	mov	r2, r8
 8001e1e:	408a      	lsls	r2, r1
 8001e20:	1e69      	subs	r1, r5, #1
 8001e22:	418d      	sbcs	r5, r1
 8001e24:	4641      	mov	r1, r8
 8001e26:	40d8      	lsrs	r0, r3
 8001e28:	40d9      	lsrs	r1, r3
 8001e2a:	4302      	orrs	r2, r0
 8001e2c:	432a      	orrs	r2, r5
 8001e2e:	000b      	movs	r3, r1
 8001e30:	0751      	lsls	r1, r2, #29
 8001e32:	d100      	bne.n	8001e36 <__aeabi_ddiv+0x56e>
 8001e34:	e751      	b.n	8001cda <__aeabi_ddiv+0x412>
 8001e36:	210f      	movs	r1, #15
 8001e38:	4011      	ands	r1, r2
 8001e3a:	2904      	cmp	r1, #4
 8001e3c:	d000      	beq.n	8001e40 <__aeabi_ddiv+0x578>
 8001e3e:	e746      	b.n	8001cce <__aeabi_ddiv+0x406>
 8001e40:	e74b      	b.n	8001cda <__aeabi_ddiv+0x412>
 8001e42:	0005      	movs	r5, r0
 8001e44:	428e      	cmp	r6, r1
 8001e46:	d000      	beq.n	8001e4a <__aeabi_ddiv+0x582>
 8001e48:	e66a      	b.n	8001b20 <__aeabi_ddiv+0x258>
 8001e4a:	9a00      	ldr	r2, [sp, #0]
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_ddiv+0x58a>
 8001e50:	e666      	b.n	8001b20 <__aeabi_ddiv+0x258>
 8001e52:	e667      	b.n	8001b24 <__aeabi_ddiv+0x25c>
 8001e54:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <__aeabi_ddiv+0x5e8>)
 8001e56:	445a      	add	r2, fp
 8001e58:	2a00      	cmp	r2, #0
 8001e5a:	dc00      	bgt.n	8001e5e <__aeabi_ddiv+0x596>
 8001e5c:	e710      	b.n	8001c80 <__aeabi_ddiv+0x3b8>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	2500      	movs	r5, #0
 8001e62:	4498      	add	r8, r3
 8001e64:	e667      	b.n	8001b36 <__aeabi_ddiv+0x26e>
 8001e66:	075d      	lsls	r5, r3, #29
 8001e68:	025b      	lsls	r3, r3, #9
 8001e6a:	0b1c      	lsrs	r4, r3, #12
 8001e6c:	08d2      	lsrs	r2, r2, #3
 8001e6e:	2300      	movs	r3, #0
 8001e70:	4315      	orrs	r5, r2
 8001e72:	e580      	b.n	8001976 <__aeabi_ddiv+0xae>
 8001e74:	9800      	ldr	r0, [sp, #0]
 8001e76:	3d02      	subs	r5, #2
 8001e78:	0042      	lsls	r2, r0, #1
 8001e7a:	4282      	cmp	r2, r0
 8001e7c:	41bf      	sbcs	r7, r7
 8001e7e:	427f      	negs	r7, r7
 8001e80:	193c      	adds	r4, r7, r4
 8001e82:	1936      	adds	r6, r6, r4
 8001e84:	9200      	str	r2, [sp, #0]
 8001e86:	e7dd      	b.n	8001e44 <__aeabi_ddiv+0x57c>
 8001e88:	2480      	movs	r4, #128	; 0x80
 8001e8a:	4643      	mov	r3, r8
 8001e8c:	0324      	lsls	r4, r4, #12
 8001e8e:	431c      	orrs	r4, r3
 8001e90:	0324      	lsls	r4, r4, #12
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <__aeabi_ddiv+0x5dc>)
 8001e94:	0b24      	lsrs	r4, r4, #12
 8001e96:	e56e      	b.n	8001976 <__aeabi_ddiv+0xae>
 8001e98:	9a00      	ldr	r2, [sp, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d3ea      	bcc.n	8001e74 <__aeabi_ddiv+0x5ac>
 8001e9e:	0005      	movs	r5, r0
 8001ea0:	e7d3      	b.n	8001e4a <__aeabi_ddiv+0x582>
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	000007ff 	.word	0x000007ff
 8001ea8:	0000043e 	.word	0x0000043e
 8001eac:	0000041e 	.word	0x0000041e
 8001eb0:	000003ff 	.word	0x000003ff

08001eb4 <__eqdf2>:
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb6:	464e      	mov	r6, r9
 8001eb8:	4645      	mov	r5, r8
 8001eba:	46de      	mov	lr, fp
 8001ebc:	4657      	mov	r7, sl
 8001ebe:	4690      	mov	r8, r2
 8001ec0:	b5e0      	push	{r5, r6, r7, lr}
 8001ec2:	0017      	movs	r7, r2
 8001ec4:	031a      	lsls	r2, r3, #12
 8001ec6:	0b12      	lsrs	r2, r2, #12
 8001ec8:	0005      	movs	r5, r0
 8001eca:	4684      	mov	ip, r0
 8001ecc:	4819      	ldr	r0, [pc, #100]	; (8001f34 <__eqdf2+0x80>)
 8001ece:	030e      	lsls	r6, r1, #12
 8001ed0:	004c      	lsls	r4, r1, #1
 8001ed2:	4691      	mov	r9, r2
 8001ed4:	005a      	lsls	r2, r3, #1
 8001ed6:	0fdb      	lsrs	r3, r3, #31
 8001ed8:	469b      	mov	fp, r3
 8001eda:	0b36      	lsrs	r6, r6, #12
 8001edc:	0d64      	lsrs	r4, r4, #21
 8001ede:	0fc9      	lsrs	r1, r1, #31
 8001ee0:	0d52      	lsrs	r2, r2, #21
 8001ee2:	4284      	cmp	r4, r0
 8001ee4:	d019      	beq.n	8001f1a <__eqdf2+0x66>
 8001ee6:	4282      	cmp	r2, r0
 8001ee8:	d010      	beq.n	8001f0c <__eqdf2+0x58>
 8001eea:	2001      	movs	r0, #1
 8001eec:	4294      	cmp	r4, r2
 8001eee:	d10e      	bne.n	8001f0e <__eqdf2+0x5a>
 8001ef0:	454e      	cmp	r6, r9
 8001ef2:	d10c      	bne.n	8001f0e <__eqdf2+0x5a>
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	45c4      	cmp	ip, r8
 8001ef8:	d109      	bne.n	8001f0e <__eqdf2+0x5a>
 8001efa:	4559      	cmp	r1, fp
 8001efc:	d017      	beq.n	8001f2e <__eqdf2+0x7a>
 8001efe:	2c00      	cmp	r4, #0
 8001f00:	d105      	bne.n	8001f0e <__eqdf2+0x5a>
 8001f02:	0030      	movs	r0, r6
 8001f04:	4328      	orrs	r0, r5
 8001f06:	1e43      	subs	r3, r0, #1
 8001f08:	4198      	sbcs	r0, r3
 8001f0a:	e000      	b.n	8001f0e <__eqdf2+0x5a>
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f10:	46bb      	mov	fp, r7
 8001f12:	46b2      	mov	sl, r6
 8001f14:	46a9      	mov	r9, r5
 8001f16:	46a0      	mov	r8, r4
 8001f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1a:	0033      	movs	r3, r6
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	432b      	orrs	r3, r5
 8001f20:	d1f5      	bne.n	8001f0e <__eqdf2+0x5a>
 8001f22:	42a2      	cmp	r2, r4
 8001f24:	d1f3      	bne.n	8001f0e <__eqdf2+0x5a>
 8001f26:	464b      	mov	r3, r9
 8001f28:	433b      	orrs	r3, r7
 8001f2a:	d1f0      	bne.n	8001f0e <__eqdf2+0x5a>
 8001f2c:	e7e2      	b.n	8001ef4 <__eqdf2+0x40>
 8001f2e:	2000      	movs	r0, #0
 8001f30:	e7ed      	b.n	8001f0e <__eqdf2+0x5a>
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	000007ff 	.word	0x000007ff

08001f38 <__gedf2>:
 8001f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f3a:	4647      	mov	r7, r8
 8001f3c:	46ce      	mov	lr, r9
 8001f3e:	0004      	movs	r4, r0
 8001f40:	0018      	movs	r0, r3
 8001f42:	0016      	movs	r6, r2
 8001f44:	031b      	lsls	r3, r3, #12
 8001f46:	0b1b      	lsrs	r3, r3, #12
 8001f48:	4d2d      	ldr	r5, [pc, #180]	; (8002000 <__gedf2+0xc8>)
 8001f4a:	004a      	lsls	r2, r1, #1
 8001f4c:	4699      	mov	r9, r3
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	0043      	lsls	r3, r0, #1
 8001f52:	030f      	lsls	r7, r1, #12
 8001f54:	46a4      	mov	ip, r4
 8001f56:	46b0      	mov	r8, r6
 8001f58:	0b3f      	lsrs	r7, r7, #12
 8001f5a:	0d52      	lsrs	r2, r2, #21
 8001f5c:	0fc9      	lsrs	r1, r1, #31
 8001f5e:	0d5b      	lsrs	r3, r3, #21
 8001f60:	0fc0      	lsrs	r0, r0, #31
 8001f62:	42aa      	cmp	r2, r5
 8001f64:	d021      	beq.n	8001faa <__gedf2+0x72>
 8001f66:	42ab      	cmp	r3, r5
 8001f68:	d013      	beq.n	8001f92 <__gedf2+0x5a>
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	d122      	bne.n	8001fb4 <__gedf2+0x7c>
 8001f6e:	433c      	orrs	r4, r7
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <__gedf2+0x42>
 8001f74:	464d      	mov	r5, r9
 8001f76:	432e      	orrs	r6, r5
 8001f78:	d022      	beq.n	8001fc0 <__gedf2+0x88>
 8001f7a:	2c00      	cmp	r4, #0
 8001f7c:	d010      	beq.n	8001fa0 <__gedf2+0x68>
 8001f7e:	4281      	cmp	r1, r0
 8001f80:	d022      	beq.n	8001fc8 <__gedf2+0x90>
 8001f82:	2002      	movs	r0, #2
 8001f84:	3901      	subs	r1, #1
 8001f86:	4008      	ands	r0, r1
 8001f88:	3801      	subs	r0, #1
 8001f8a:	bcc0      	pop	{r6, r7}
 8001f8c:	46b9      	mov	r9, r7
 8001f8e:	46b0      	mov	r8, r6
 8001f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f92:	464d      	mov	r5, r9
 8001f94:	432e      	orrs	r6, r5
 8001f96:	d129      	bne.n	8001fec <__gedf2+0xb4>
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d1f0      	bne.n	8001f7e <__gedf2+0x46>
 8001f9c:	433c      	orrs	r4, r7
 8001f9e:	d1ee      	bne.n	8001f7e <__gedf2+0x46>
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d1f2      	bne.n	8001f8a <__gedf2+0x52>
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	4240      	negs	r0, r0
 8001fa8:	e7ef      	b.n	8001f8a <__gedf2+0x52>
 8001faa:	003d      	movs	r5, r7
 8001fac:	4325      	orrs	r5, r4
 8001fae:	d11d      	bne.n	8001fec <__gedf2+0xb4>
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d0ee      	beq.n	8001f92 <__gedf2+0x5a>
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e2      	bne.n	8001f7e <__gedf2+0x46>
 8001fb8:	464c      	mov	r4, r9
 8001fba:	4326      	orrs	r6, r4
 8001fbc:	d1df      	bne.n	8001f7e <__gedf2+0x46>
 8001fbe:	e7e0      	b.n	8001f82 <__gedf2+0x4a>
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	2c00      	cmp	r4, #0
 8001fc4:	d0e1      	beq.n	8001f8a <__gedf2+0x52>
 8001fc6:	e7dc      	b.n	8001f82 <__gedf2+0x4a>
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dc0a      	bgt.n	8001fe2 <__gedf2+0xaa>
 8001fcc:	dbe8      	blt.n	8001fa0 <__gedf2+0x68>
 8001fce:	454f      	cmp	r7, r9
 8001fd0:	d8d7      	bhi.n	8001f82 <__gedf2+0x4a>
 8001fd2:	d00e      	beq.n	8001ff2 <__gedf2+0xba>
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	454f      	cmp	r7, r9
 8001fd8:	d2d7      	bcs.n	8001f8a <__gedf2+0x52>
 8001fda:	2900      	cmp	r1, #0
 8001fdc:	d0e2      	beq.n	8001fa4 <__gedf2+0x6c>
 8001fde:	0008      	movs	r0, r1
 8001fe0:	e7d3      	b.n	8001f8a <__gedf2+0x52>
 8001fe2:	4243      	negs	r3, r0
 8001fe4:	4158      	adcs	r0, r3
 8001fe6:	0040      	lsls	r0, r0, #1
 8001fe8:	3801      	subs	r0, #1
 8001fea:	e7ce      	b.n	8001f8a <__gedf2+0x52>
 8001fec:	2002      	movs	r0, #2
 8001fee:	4240      	negs	r0, r0
 8001ff0:	e7cb      	b.n	8001f8a <__gedf2+0x52>
 8001ff2:	45c4      	cmp	ip, r8
 8001ff4:	d8c5      	bhi.n	8001f82 <__gedf2+0x4a>
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	45c4      	cmp	ip, r8
 8001ffa:	d2c6      	bcs.n	8001f8a <__gedf2+0x52>
 8001ffc:	e7ed      	b.n	8001fda <__gedf2+0xa2>
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	000007ff 	.word	0x000007ff

08002004 <__ledf2>:
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	4647      	mov	r7, r8
 8002008:	46ce      	mov	lr, r9
 800200a:	0004      	movs	r4, r0
 800200c:	0018      	movs	r0, r3
 800200e:	0016      	movs	r6, r2
 8002010:	031b      	lsls	r3, r3, #12
 8002012:	0b1b      	lsrs	r3, r3, #12
 8002014:	4d2c      	ldr	r5, [pc, #176]	; (80020c8 <__ledf2+0xc4>)
 8002016:	004a      	lsls	r2, r1, #1
 8002018:	4699      	mov	r9, r3
 800201a:	b580      	push	{r7, lr}
 800201c:	0043      	lsls	r3, r0, #1
 800201e:	030f      	lsls	r7, r1, #12
 8002020:	46a4      	mov	ip, r4
 8002022:	46b0      	mov	r8, r6
 8002024:	0b3f      	lsrs	r7, r7, #12
 8002026:	0d52      	lsrs	r2, r2, #21
 8002028:	0fc9      	lsrs	r1, r1, #31
 800202a:	0d5b      	lsrs	r3, r3, #21
 800202c:	0fc0      	lsrs	r0, r0, #31
 800202e:	42aa      	cmp	r2, r5
 8002030:	d00d      	beq.n	800204e <__ledf2+0x4a>
 8002032:	42ab      	cmp	r3, r5
 8002034:	d010      	beq.n	8002058 <__ledf2+0x54>
 8002036:	2a00      	cmp	r2, #0
 8002038:	d127      	bne.n	800208a <__ledf2+0x86>
 800203a:	433c      	orrs	r4, r7
 800203c:	2b00      	cmp	r3, #0
 800203e:	d111      	bne.n	8002064 <__ledf2+0x60>
 8002040:	464d      	mov	r5, r9
 8002042:	432e      	orrs	r6, r5
 8002044:	d10e      	bne.n	8002064 <__ledf2+0x60>
 8002046:	2000      	movs	r0, #0
 8002048:	2c00      	cmp	r4, #0
 800204a:	d015      	beq.n	8002078 <__ledf2+0x74>
 800204c:	e00e      	b.n	800206c <__ledf2+0x68>
 800204e:	003d      	movs	r5, r7
 8002050:	4325      	orrs	r5, r4
 8002052:	d110      	bne.n	8002076 <__ledf2+0x72>
 8002054:	4293      	cmp	r3, r2
 8002056:	d118      	bne.n	800208a <__ledf2+0x86>
 8002058:	464d      	mov	r5, r9
 800205a:	432e      	orrs	r6, r5
 800205c:	d10b      	bne.n	8002076 <__ledf2+0x72>
 800205e:	2a00      	cmp	r2, #0
 8002060:	d102      	bne.n	8002068 <__ledf2+0x64>
 8002062:	433c      	orrs	r4, r7
 8002064:	2c00      	cmp	r4, #0
 8002066:	d00b      	beq.n	8002080 <__ledf2+0x7c>
 8002068:	4281      	cmp	r1, r0
 800206a:	d014      	beq.n	8002096 <__ledf2+0x92>
 800206c:	2002      	movs	r0, #2
 800206e:	3901      	subs	r1, #1
 8002070:	4008      	ands	r0, r1
 8002072:	3801      	subs	r0, #1
 8002074:	e000      	b.n	8002078 <__ledf2+0x74>
 8002076:	2002      	movs	r0, #2
 8002078:	bcc0      	pop	{r6, r7}
 800207a:	46b9      	mov	r9, r7
 800207c:	46b0      	mov	r8, r6
 800207e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002080:	2800      	cmp	r0, #0
 8002082:	d1f9      	bne.n	8002078 <__ledf2+0x74>
 8002084:	2001      	movs	r0, #1
 8002086:	4240      	negs	r0, r0
 8002088:	e7f6      	b.n	8002078 <__ledf2+0x74>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ec      	bne.n	8002068 <__ledf2+0x64>
 800208e:	464c      	mov	r4, r9
 8002090:	4326      	orrs	r6, r4
 8002092:	d1e9      	bne.n	8002068 <__ledf2+0x64>
 8002094:	e7ea      	b.n	800206c <__ledf2+0x68>
 8002096:	429a      	cmp	r2, r3
 8002098:	dd04      	ble.n	80020a4 <__ledf2+0xa0>
 800209a:	4243      	negs	r3, r0
 800209c:	4158      	adcs	r0, r3
 800209e:	0040      	lsls	r0, r0, #1
 80020a0:	3801      	subs	r0, #1
 80020a2:	e7e9      	b.n	8002078 <__ledf2+0x74>
 80020a4:	429a      	cmp	r2, r3
 80020a6:	dbeb      	blt.n	8002080 <__ledf2+0x7c>
 80020a8:	454f      	cmp	r7, r9
 80020aa:	d8df      	bhi.n	800206c <__ledf2+0x68>
 80020ac:	d006      	beq.n	80020bc <__ledf2+0xb8>
 80020ae:	2000      	movs	r0, #0
 80020b0:	454f      	cmp	r7, r9
 80020b2:	d2e1      	bcs.n	8002078 <__ledf2+0x74>
 80020b4:	2900      	cmp	r1, #0
 80020b6:	d0e5      	beq.n	8002084 <__ledf2+0x80>
 80020b8:	0008      	movs	r0, r1
 80020ba:	e7dd      	b.n	8002078 <__ledf2+0x74>
 80020bc:	45c4      	cmp	ip, r8
 80020be:	d8d5      	bhi.n	800206c <__ledf2+0x68>
 80020c0:	2000      	movs	r0, #0
 80020c2:	45c4      	cmp	ip, r8
 80020c4:	d2d8      	bcs.n	8002078 <__ledf2+0x74>
 80020c6:	e7f5      	b.n	80020b4 <__ledf2+0xb0>
 80020c8:	000007ff 	.word	0x000007ff

080020cc <__aeabi_dmul>:
 80020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ce:	4657      	mov	r7, sl
 80020d0:	464e      	mov	r6, r9
 80020d2:	4645      	mov	r5, r8
 80020d4:	46de      	mov	lr, fp
 80020d6:	b5e0      	push	{r5, r6, r7, lr}
 80020d8:	4698      	mov	r8, r3
 80020da:	030c      	lsls	r4, r1, #12
 80020dc:	004b      	lsls	r3, r1, #1
 80020de:	0006      	movs	r6, r0
 80020e0:	4692      	mov	sl, r2
 80020e2:	b087      	sub	sp, #28
 80020e4:	0b24      	lsrs	r4, r4, #12
 80020e6:	0d5b      	lsrs	r3, r3, #21
 80020e8:	0fcf      	lsrs	r7, r1, #31
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dmul+0x24>
 80020ee:	e15c      	b.n	80023aa <__aeabi_dmul+0x2de>
 80020f0:	4ad9      	ldr	r2, [pc, #868]	; (8002458 <__aeabi_dmul+0x38c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dmul+0x2c>
 80020f6:	e175      	b.n	80023e4 <__aeabi_dmul+0x318>
 80020f8:	0f42      	lsrs	r2, r0, #29
 80020fa:	00e4      	lsls	r4, r4, #3
 80020fc:	4314      	orrs	r4, r2
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	0412      	lsls	r2, r2, #16
 8002102:	4314      	orrs	r4, r2
 8002104:	4ad5      	ldr	r2, [pc, #852]	; (800245c <__aeabi_dmul+0x390>)
 8002106:	00c5      	lsls	r5, r0, #3
 8002108:	4694      	mov	ip, r2
 800210a:	4463      	add	r3, ip
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	4699      	mov	r9, r3
 8002112:	469b      	mov	fp, r3
 8002114:	4643      	mov	r3, r8
 8002116:	4642      	mov	r2, r8
 8002118:	031e      	lsls	r6, r3, #12
 800211a:	0fd2      	lsrs	r2, r2, #31
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4650      	mov	r0, sl
 8002120:	4690      	mov	r8, r2
 8002122:	0b36      	lsrs	r6, r6, #12
 8002124:	0d5b      	lsrs	r3, r3, #21
 8002126:	d100      	bne.n	800212a <__aeabi_dmul+0x5e>
 8002128:	e120      	b.n	800236c <__aeabi_dmul+0x2a0>
 800212a:	4acb      	ldr	r2, [pc, #812]	; (8002458 <__aeabi_dmul+0x38c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d100      	bne.n	8002132 <__aeabi_dmul+0x66>
 8002130:	e162      	b.n	80023f8 <__aeabi_dmul+0x32c>
 8002132:	49ca      	ldr	r1, [pc, #808]	; (800245c <__aeabi_dmul+0x390>)
 8002134:	0f42      	lsrs	r2, r0, #29
 8002136:	468c      	mov	ip, r1
 8002138:	9900      	ldr	r1, [sp, #0]
 800213a:	4463      	add	r3, ip
 800213c:	00f6      	lsls	r6, r6, #3
 800213e:	468c      	mov	ip, r1
 8002140:	4316      	orrs	r6, r2
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	449c      	add	ip, r3
 8002146:	0412      	lsls	r2, r2, #16
 8002148:	4663      	mov	r3, ip
 800214a:	4316      	orrs	r6, r2
 800214c:	00c2      	lsls	r2, r0, #3
 800214e:	2000      	movs	r0, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	9900      	ldr	r1, [sp, #0]
 8002154:	4643      	mov	r3, r8
 8002156:	3101      	adds	r1, #1
 8002158:	468c      	mov	ip, r1
 800215a:	4649      	mov	r1, r9
 800215c:	407b      	eors	r3, r7
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	290f      	cmp	r1, #15
 8002162:	d826      	bhi.n	80021b2 <__aeabi_dmul+0xe6>
 8002164:	4bbe      	ldr	r3, [pc, #760]	; (8002460 <__aeabi_dmul+0x394>)
 8002166:	0089      	lsls	r1, r1, #2
 8002168:	5859      	ldr	r1, [r3, r1]
 800216a:	468f      	mov	pc, r1
 800216c:	4643      	mov	r3, r8
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	0034      	movs	r4, r6
 8002172:	0015      	movs	r5, r2
 8002174:	4683      	mov	fp, r0
 8002176:	465b      	mov	r3, fp
 8002178:	2b02      	cmp	r3, #2
 800217a:	d016      	beq.n	80021aa <__aeabi_dmul+0xde>
 800217c:	2b03      	cmp	r3, #3
 800217e:	d100      	bne.n	8002182 <__aeabi_dmul+0xb6>
 8002180:	e203      	b.n	800258a <__aeabi_dmul+0x4be>
 8002182:	2b01      	cmp	r3, #1
 8002184:	d000      	beq.n	8002188 <__aeabi_dmul+0xbc>
 8002186:	e0cd      	b.n	8002324 <__aeabi_dmul+0x258>
 8002188:	2200      	movs	r2, #0
 800218a:	2400      	movs	r4, #0
 800218c:	2500      	movs	r5, #0
 800218e:	9b01      	ldr	r3, [sp, #4]
 8002190:	0512      	lsls	r2, r2, #20
 8002192:	4322      	orrs	r2, r4
 8002194:	07db      	lsls	r3, r3, #31
 8002196:	431a      	orrs	r2, r3
 8002198:	0028      	movs	r0, r5
 800219a:	0011      	movs	r1, r2
 800219c:	b007      	add	sp, #28
 800219e:	bcf0      	pop	{r4, r5, r6, r7}
 80021a0:	46bb      	mov	fp, r7
 80021a2:	46b2      	mov	sl, r6
 80021a4:	46a9      	mov	r9, r5
 80021a6:	46a0      	mov	r8, r4
 80021a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021aa:	2400      	movs	r4, #0
 80021ac:	2500      	movs	r5, #0
 80021ae:	4aaa      	ldr	r2, [pc, #680]	; (8002458 <__aeabi_dmul+0x38c>)
 80021b0:	e7ed      	b.n	800218e <__aeabi_dmul+0xc2>
 80021b2:	0c28      	lsrs	r0, r5, #16
 80021b4:	042d      	lsls	r5, r5, #16
 80021b6:	0c2d      	lsrs	r5, r5, #16
 80021b8:	002b      	movs	r3, r5
 80021ba:	0c11      	lsrs	r1, r2, #16
 80021bc:	0412      	lsls	r2, r2, #16
 80021be:	0c12      	lsrs	r2, r2, #16
 80021c0:	4353      	muls	r3, r2
 80021c2:	4698      	mov	r8, r3
 80021c4:	0013      	movs	r3, r2
 80021c6:	002f      	movs	r7, r5
 80021c8:	4343      	muls	r3, r0
 80021ca:	4699      	mov	r9, r3
 80021cc:	434f      	muls	r7, r1
 80021ce:	444f      	add	r7, r9
 80021d0:	46bb      	mov	fp, r7
 80021d2:	4647      	mov	r7, r8
 80021d4:	000b      	movs	r3, r1
 80021d6:	0c3f      	lsrs	r7, r7, #16
 80021d8:	46ba      	mov	sl, r7
 80021da:	4343      	muls	r3, r0
 80021dc:	44da      	add	sl, fp
 80021de:	9302      	str	r3, [sp, #8]
 80021e0:	45d1      	cmp	r9, sl
 80021e2:	d904      	bls.n	80021ee <__aeabi_dmul+0x122>
 80021e4:	2780      	movs	r7, #128	; 0x80
 80021e6:	027f      	lsls	r7, r7, #9
 80021e8:	46b9      	mov	r9, r7
 80021ea:	444b      	add	r3, r9
 80021ec:	9302      	str	r3, [sp, #8]
 80021ee:	4653      	mov	r3, sl
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	469b      	mov	fp, r3
 80021f4:	4653      	mov	r3, sl
 80021f6:	041f      	lsls	r7, r3, #16
 80021f8:	4643      	mov	r3, r8
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	4698      	mov	r8, r3
 8002200:	003b      	movs	r3, r7
 8002202:	4443      	add	r3, r8
 8002204:	9304      	str	r3, [sp, #16]
 8002206:	0c33      	lsrs	r3, r6, #16
 8002208:	0436      	lsls	r6, r6, #16
 800220a:	0c36      	lsrs	r6, r6, #16
 800220c:	4698      	mov	r8, r3
 800220e:	0033      	movs	r3, r6
 8002210:	4343      	muls	r3, r0
 8002212:	4699      	mov	r9, r3
 8002214:	4643      	mov	r3, r8
 8002216:	4343      	muls	r3, r0
 8002218:	002f      	movs	r7, r5
 800221a:	469a      	mov	sl, r3
 800221c:	4643      	mov	r3, r8
 800221e:	4377      	muls	r7, r6
 8002220:	435d      	muls	r5, r3
 8002222:	0c38      	lsrs	r0, r7, #16
 8002224:	444d      	add	r5, r9
 8002226:	1945      	adds	r5, r0, r5
 8002228:	45a9      	cmp	r9, r5
 800222a:	d903      	bls.n	8002234 <__aeabi_dmul+0x168>
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	025b      	lsls	r3, r3, #9
 8002230:	4699      	mov	r9, r3
 8002232:	44ca      	add	sl, r9
 8002234:	043f      	lsls	r7, r7, #16
 8002236:	0c28      	lsrs	r0, r5, #16
 8002238:	0c3f      	lsrs	r7, r7, #16
 800223a:	042d      	lsls	r5, r5, #16
 800223c:	19ed      	adds	r5, r5, r7
 800223e:	0c27      	lsrs	r7, r4, #16
 8002240:	0424      	lsls	r4, r4, #16
 8002242:	0c24      	lsrs	r4, r4, #16
 8002244:	0003      	movs	r3, r0
 8002246:	0020      	movs	r0, r4
 8002248:	4350      	muls	r0, r2
 800224a:	437a      	muls	r2, r7
 800224c:	4691      	mov	r9, r2
 800224e:	003a      	movs	r2, r7
 8002250:	4453      	add	r3, sl
 8002252:	9305      	str	r3, [sp, #20]
 8002254:	0c03      	lsrs	r3, r0, #16
 8002256:	469a      	mov	sl, r3
 8002258:	434a      	muls	r2, r1
 800225a:	4361      	muls	r1, r4
 800225c:	4449      	add	r1, r9
 800225e:	4451      	add	r1, sl
 8002260:	44ab      	add	fp, r5
 8002262:	4589      	cmp	r9, r1
 8002264:	d903      	bls.n	800226e <__aeabi_dmul+0x1a2>
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	025b      	lsls	r3, r3, #9
 800226a:	4699      	mov	r9, r3
 800226c:	444a      	add	r2, r9
 800226e:	0400      	lsls	r0, r0, #16
 8002270:	0c0b      	lsrs	r3, r1, #16
 8002272:	0c00      	lsrs	r0, r0, #16
 8002274:	0409      	lsls	r1, r1, #16
 8002276:	1809      	adds	r1, r1, r0
 8002278:	0020      	movs	r0, r4
 800227a:	4699      	mov	r9, r3
 800227c:	4643      	mov	r3, r8
 800227e:	4370      	muls	r0, r6
 8002280:	435c      	muls	r4, r3
 8002282:	437e      	muls	r6, r7
 8002284:	435f      	muls	r7, r3
 8002286:	0c03      	lsrs	r3, r0, #16
 8002288:	4698      	mov	r8, r3
 800228a:	19a4      	adds	r4, r4, r6
 800228c:	4444      	add	r4, r8
 800228e:	444a      	add	r2, r9
 8002290:	9703      	str	r7, [sp, #12]
 8002292:	42a6      	cmp	r6, r4
 8002294:	d904      	bls.n	80022a0 <__aeabi_dmul+0x1d4>
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	025b      	lsls	r3, r3, #9
 800229a:	4698      	mov	r8, r3
 800229c:	4447      	add	r7, r8
 800229e:	9703      	str	r7, [sp, #12]
 80022a0:	0423      	lsls	r3, r4, #16
 80022a2:	9e02      	ldr	r6, [sp, #8]
 80022a4:	469a      	mov	sl, r3
 80022a6:	9b05      	ldr	r3, [sp, #20]
 80022a8:	445e      	add	r6, fp
 80022aa:	4698      	mov	r8, r3
 80022ac:	42ae      	cmp	r6, r5
 80022ae:	41ad      	sbcs	r5, r5
 80022b0:	1876      	adds	r6, r6, r1
 80022b2:	428e      	cmp	r6, r1
 80022b4:	4189      	sbcs	r1, r1
 80022b6:	0400      	lsls	r0, r0, #16
 80022b8:	0c00      	lsrs	r0, r0, #16
 80022ba:	4450      	add	r0, sl
 80022bc:	4440      	add	r0, r8
 80022be:	426d      	negs	r5, r5
 80022c0:	1947      	adds	r7, r0, r5
 80022c2:	46b8      	mov	r8, r7
 80022c4:	4693      	mov	fp, r2
 80022c6:	4249      	negs	r1, r1
 80022c8:	4689      	mov	r9, r1
 80022ca:	44c3      	add	fp, r8
 80022cc:	44d9      	add	r9, fp
 80022ce:	4298      	cmp	r0, r3
 80022d0:	4180      	sbcs	r0, r0
 80022d2:	45a8      	cmp	r8, r5
 80022d4:	41ad      	sbcs	r5, r5
 80022d6:	4593      	cmp	fp, r2
 80022d8:	4192      	sbcs	r2, r2
 80022da:	4589      	cmp	r9, r1
 80022dc:	4189      	sbcs	r1, r1
 80022de:	426d      	negs	r5, r5
 80022e0:	4240      	negs	r0, r0
 80022e2:	4328      	orrs	r0, r5
 80022e4:	0c24      	lsrs	r4, r4, #16
 80022e6:	4252      	negs	r2, r2
 80022e8:	4249      	negs	r1, r1
 80022ea:	430a      	orrs	r2, r1
 80022ec:	9b03      	ldr	r3, [sp, #12]
 80022ee:	1900      	adds	r0, r0, r4
 80022f0:	1880      	adds	r0, r0, r2
 80022f2:	18c7      	adds	r7, r0, r3
 80022f4:	464b      	mov	r3, r9
 80022f6:	0ddc      	lsrs	r4, r3, #23
 80022f8:	9b04      	ldr	r3, [sp, #16]
 80022fa:	0275      	lsls	r5, r6, #9
 80022fc:	431d      	orrs	r5, r3
 80022fe:	1e6a      	subs	r2, r5, #1
 8002300:	4195      	sbcs	r5, r2
 8002302:	464b      	mov	r3, r9
 8002304:	0df6      	lsrs	r6, r6, #23
 8002306:	027f      	lsls	r7, r7, #9
 8002308:	4335      	orrs	r5, r6
 800230a:	025a      	lsls	r2, r3, #9
 800230c:	433c      	orrs	r4, r7
 800230e:	4315      	orrs	r5, r2
 8002310:	01fb      	lsls	r3, r7, #7
 8002312:	d400      	bmi.n	8002316 <__aeabi_dmul+0x24a>
 8002314:	e11c      	b.n	8002550 <__aeabi_dmul+0x484>
 8002316:	2101      	movs	r1, #1
 8002318:	086a      	lsrs	r2, r5, #1
 800231a:	400d      	ands	r5, r1
 800231c:	4315      	orrs	r5, r2
 800231e:	07e2      	lsls	r2, r4, #31
 8002320:	4315      	orrs	r5, r2
 8002322:	0864      	lsrs	r4, r4, #1
 8002324:	494f      	ldr	r1, [pc, #316]	; (8002464 <__aeabi_dmul+0x398>)
 8002326:	4461      	add	r1, ip
 8002328:	2900      	cmp	r1, #0
 800232a:	dc00      	bgt.n	800232e <__aeabi_dmul+0x262>
 800232c:	e0b0      	b.n	8002490 <__aeabi_dmul+0x3c4>
 800232e:	076b      	lsls	r3, r5, #29
 8002330:	d009      	beq.n	8002346 <__aeabi_dmul+0x27a>
 8002332:	220f      	movs	r2, #15
 8002334:	402a      	ands	r2, r5
 8002336:	2a04      	cmp	r2, #4
 8002338:	d005      	beq.n	8002346 <__aeabi_dmul+0x27a>
 800233a:	1d2a      	adds	r2, r5, #4
 800233c:	42aa      	cmp	r2, r5
 800233e:	41ad      	sbcs	r5, r5
 8002340:	426d      	negs	r5, r5
 8002342:	1964      	adds	r4, r4, r5
 8002344:	0015      	movs	r5, r2
 8002346:	01e3      	lsls	r3, r4, #7
 8002348:	d504      	bpl.n	8002354 <__aeabi_dmul+0x288>
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	4a46      	ldr	r2, [pc, #280]	; (8002468 <__aeabi_dmul+0x39c>)
 800234e:	00c9      	lsls	r1, r1, #3
 8002350:	4014      	ands	r4, r2
 8002352:	4461      	add	r1, ip
 8002354:	4a45      	ldr	r2, [pc, #276]	; (800246c <__aeabi_dmul+0x3a0>)
 8002356:	4291      	cmp	r1, r2
 8002358:	dd00      	ble.n	800235c <__aeabi_dmul+0x290>
 800235a:	e726      	b.n	80021aa <__aeabi_dmul+0xde>
 800235c:	0762      	lsls	r2, r4, #29
 800235e:	08ed      	lsrs	r5, r5, #3
 8002360:	0264      	lsls	r4, r4, #9
 8002362:	0549      	lsls	r1, r1, #21
 8002364:	4315      	orrs	r5, r2
 8002366:	0b24      	lsrs	r4, r4, #12
 8002368:	0d4a      	lsrs	r2, r1, #21
 800236a:	e710      	b.n	800218e <__aeabi_dmul+0xc2>
 800236c:	4652      	mov	r2, sl
 800236e:	4332      	orrs	r2, r6
 8002370:	d100      	bne.n	8002374 <__aeabi_dmul+0x2a8>
 8002372:	e07f      	b.n	8002474 <__aeabi_dmul+0x3a8>
 8002374:	2e00      	cmp	r6, #0
 8002376:	d100      	bne.n	800237a <__aeabi_dmul+0x2ae>
 8002378:	e0dc      	b.n	8002534 <__aeabi_dmul+0x468>
 800237a:	0030      	movs	r0, r6
 800237c:	f000 fe1e 	bl	8002fbc <__clzsi2>
 8002380:	0002      	movs	r2, r0
 8002382:	3a0b      	subs	r2, #11
 8002384:	231d      	movs	r3, #29
 8002386:	0001      	movs	r1, r0
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	4652      	mov	r2, sl
 800238c:	3908      	subs	r1, #8
 800238e:	40da      	lsrs	r2, r3
 8002390:	408e      	lsls	r6, r1
 8002392:	4316      	orrs	r6, r2
 8002394:	4652      	mov	r2, sl
 8002396:	408a      	lsls	r2, r1
 8002398:	9b00      	ldr	r3, [sp, #0]
 800239a:	4935      	ldr	r1, [pc, #212]	; (8002470 <__aeabi_dmul+0x3a4>)
 800239c:	1a18      	subs	r0, r3, r0
 800239e:	0003      	movs	r3, r0
 80023a0:	468c      	mov	ip, r1
 80023a2:	4463      	add	r3, ip
 80023a4:	2000      	movs	r0, #0
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	e6d3      	b.n	8002152 <__aeabi_dmul+0x86>
 80023aa:	0025      	movs	r5, r4
 80023ac:	4305      	orrs	r5, r0
 80023ae:	d04a      	beq.n	8002446 <__aeabi_dmul+0x37a>
 80023b0:	2c00      	cmp	r4, #0
 80023b2:	d100      	bne.n	80023b6 <__aeabi_dmul+0x2ea>
 80023b4:	e0b0      	b.n	8002518 <__aeabi_dmul+0x44c>
 80023b6:	0020      	movs	r0, r4
 80023b8:	f000 fe00 	bl	8002fbc <__clzsi2>
 80023bc:	0001      	movs	r1, r0
 80023be:	0002      	movs	r2, r0
 80023c0:	390b      	subs	r1, #11
 80023c2:	231d      	movs	r3, #29
 80023c4:	0010      	movs	r0, r2
 80023c6:	1a5b      	subs	r3, r3, r1
 80023c8:	0031      	movs	r1, r6
 80023ca:	0035      	movs	r5, r6
 80023cc:	3808      	subs	r0, #8
 80023ce:	4084      	lsls	r4, r0
 80023d0:	40d9      	lsrs	r1, r3
 80023d2:	4085      	lsls	r5, r0
 80023d4:	430c      	orrs	r4, r1
 80023d6:	4826      	ldr	r0, [pc, #152]	; (8002470 <__aeabi_dmul+0x3a4>)
 80023d8:	1a83      	subs	r3, r0, r2
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2300      	movs	r3, #0
 80023de:	4699      	mov	r9, r3
 80023e0:	469b      	mov	fp, r3
 80023e2:	e697      	b.n	8002114 <__aeabi_dmul+0x48>
 80023e4:	0005      	movs	r5, r0
 80023e6:	4325      	orrs	r5, r4
 80023e8:	d126      	bne.n	8002438 <__aeabi_dmul+0x36c>
 80023ea:	2208      	movs	r2, #8
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2302      	movs	r3, #2
 80023f0:	2400      	movs	r4, #0
 80023f2:	4691      	mov	r9, r2
 80023f4:	469b      	mov	fp, r3
 80023f6:	e68d      	b.n	8002114 <__aeabi_dmul+0x48>
 80023f8:	4652      	mov	r2, sl
 80023fa:	9b00      	ldr	r3, [sp, #0]
 80023fc:	4332      	orrs	r2, r6
 80023fe:	d110      	bne.n	8002422 <__aeabi_dmul+0x356>
 8002400:	4915      	ldr	r1, [pc, #84]	; (8002458 <__aeabi_dmul+0x38c>)
 8002402:	2600      	movs	r6, #0
 8002404:	468c      	mov	ip, r1
 8002406:	4463      	add	r3, ip
 8002408:	4649      	mov	r1, r9
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2302      	movs	r3, #2
 800240e:	4319      	orrs	r1, r3
 8002410:	4689      	mov	r9, r1
 8002412:	2002      	movs	r0, #2
 8002414:	e69d      	b.n	8002152 <__aeabi_dmul+0x86>
 8002416:	465b      	mov	r3, fp
 8002418:	9701      	str	r7, [sp, #4]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d000      	beq.n	8002420 <__aeabi_dmul+0x354>
 800241e:	e6ad      	b.n	800217c <__aeabi_dmul+0xb0>
 8002420:	e6c3      	b.n	80021aa <__aeabi_dmul+0xde>
 8002422:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <__aeabi_dmul+0x38c>)
 8002424:	2003      	movs	r0, #3
 8002426:	4694      	mov	ip, r2
 8002428:	4463      	add	r3, ip
 800242a:	464a      	mov	r2, r9
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2303      	movs	r3, #3
 8002430:	431a      	orrs	r2, r3
 8002432:	4691      	mov	r9, r2
 8002434:	4652      	mov	r2, sl
 8002436:	e68c      	b.n	8002152 <__aeabi_dmul+0x86>
 8002438:	220c      	movs	r2, #12
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2303      	movs	r3, #3
 800243e:	0005      	movs	r5, r0
 8002440:	4691      	mov	r9, r2
 8002442:	469b      	mov	fp, r3
 8002444:	e666      	b.n	8002114 <__aeabi_dmul+0x48>
 8002446:	2304      	movs	r3, #4
 8002448:	4699      	mov	r9, r3
 800244a:	2300      	movs	r3, #0
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	3301      	adds	r3, #1
 8002450:	2400      	movs	r4, #0
 8002452:	469b      	mov	fp, r3
 8002454:	e65e      	b.n	8002114 <__aeabi_dmul+0x48>
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	000007ff 	.word	0x000007ff
 800245c:	fffffc01 	.word	0xfffffc01
 8002460:	0800b168 	.word	0x0800b168
 8002464:	000003ff 	.word	0x000003ff
 8002468:	feffffff 	.word	0xfeffffff
 800246c:	000007fe 	.word	0x000007fe
 8002470:	fffffc0d 	.word	0xfffffc0d
 8002474:	4649      	mov	r1, r9
 8002476:	2301      	movs	r3, #1
 8002478:	4319      	orrs	r1, r3
 800247a:	4689      	mov	r9, r1
 800247c:	2600      	movs	r6, #0
 800247e:	2001      	movs	r0, #1
 8002480:	e667      	b.n	8002152 <__aeabi_dmul+0x86>
 8002482:	2300      	movs	r3, #0
 8002484:	2480      	movs	r4, #128	; 0x80
 8002486:	2500      	movs	r5, #0
 8002488:	4a43      	ldr	r2, [pc, #268]	; (8002598 <__aeabi_dmul+0x4cc>)
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	0324      	lsls	r4, r4, #12
 800248e:	e67e      	b.n	800218e <__aeabi_dmul+0xc2>
 8002490:	2001      	movs	r0, #1
 8002492:	1a40      	subs	r0, r0, r1
 8002494:	2838      	cmp	r0, #56	; 0x38
 8002496:	dd00      	ble.n	800249a <__aeabi_dmul+0x3ce>
 8002498:	e676      	b.n	8002188 <__aeabi_dmul+0xbc>
 800249a:	281f      	cmp	r0, #31
 800249c:	dd5b      	ble.n	8002556 <__aeabi_dmul+0x48a>
 800249e:	221f      	movs	r2, #31
 80024a0:	0023      	movs	r3, r4
 80024a2:	4252      	negs	r2, r2
 80024a4:	1a51      	subs	r1, r2, r1
 80024a6:	40cb      	lsrs	r3, r1
 80024a8:	0019      	movs	r1, r3
 80024aa:	2820      	cmp	r0, #32
 80024ac:	d003      	beq.n	80024b6 <__aeabi_dmul+0x3ea>
 80024ae:	4a3b      	ldr	r2, [pc, #236]	; (800259c <__aeabi_dmul+0x4d0>)
 80024b0:	4462      	add	r2, ip
 80024b2:	4094      	lsls	r4, r2
 80024b4:	4325      	orrs	r5, r4
 80024b6:	1e6a      	subs	r2, r5, #1
 80024b8:	4195      	sbcs	r5, r2
 80024ba:	002a      	movs	r2, r5
 80024bc:	430a      	orrs	r2, r1
 80024be:	2107      	movs	r1, #7
 80024c0:	000d      	movs	r5, r1
 80024c2:	2400      	movs	r4, #0
 80024c4:	4015      	ands	r5, r2
 80024c6:	4211      	tst	r1, r2
 80024c8:	d05b      	beq.n	8002582 <__aeabi_dmul+0x4b6>
 80024ca:	210f      	movs	r1, #15
 80024cc:	2400      	movs	r4, #0
 80024ce:	4011      	ands	r1, r2
 80024d0:	2904      	cmp	r1, #4
 80024d2:	d053      	beq.n	800257c <__aeabi_dmul+0x4b0>
 80024d4:	1d11      	adds	r1, r2, #4
 80024d6:	4291      	cmp	r1, r2
 80024d8:	4192      	sbcs	r2, r2
 80024da:	4252      	negs	r2, r2
 80024dc:	18a4      	adds	r4, r4, r2
 80024de:	000a      	movs	r2, r1
 80024e0:	0223      	lsls	r3, r4, #8
 80024e2:	d54b      	bpl.n	800257c <__aeabi_dmul+0x4b0>
 80024e4:	2201      	movs	r2, #1
 80024e6:	2400      	movs	r4, #0
 80024e8:	2500      	movs	r5, #0
 80024ea:	e650      	b.n	800218e <__aeabi_dmul+0xc2>
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	031b      	lsls	r3, r3, #12
 80024f0:	421c      	tst	r4, r3
 80024f2:	d009      	beq.n	8002508 <__aeabi_dmul+0x43c>
 80024f4:	421e      	tst	r6, r3
 80024f6:	d107      	bne.n	8002508 <__aeabi_dmul+0x43c>
 80024f8:	4333      	orrs	r3, r6
 80024fa:	031c      	lsls	r4, r3, #12
 80024fc:	4643      	mov	r3, r8
 80024fe:	0015      	movs	r5, r2
 8002500:	0b24      	lsrs	r4, r4, #12
 8002502:	4a25      	ldr	r2, [pc, #148]	; (8002598 <__aeabi_dmul+0x4cc>)
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	e642      	b.n	800218e <__aeabi_dmul+0xc2>
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	0312      	lsls	r2, r2, #12
 800250c:	4314      	orrs	r4, r2
 800250e:	0324      	lsls	r4, r4, #12
 8002510:	4a21      	ldr	r2, [pc, #132]	; (8002598 <__aeabi_dmul+0x4cc>)
 8002512:	0b24      	lsrs	r4, r4, #12
 8002514:	9701      	str	r7, [sp, #4]
 8002516:	e63a      	b.n	800218e <__aeabi_dmul+0xc2>
 8002518:	f000 fd50 	bl	8002fbc <__clzsi2>
 800251c:	0001      	movs	r1, r0
 800251e:	0002      	movs	r2, r0
 8002520:	3115      	adds	r1, #21
 8002522:	3220      	adds	r2, #32
 8002524:	291c      	cmp	r1, #28
 8002526:	dc00      	bgt.n	800252a <__aeabi_dmul+0x45e>
 8002528:	e74b      	b.n	80023c2 <__aeabi_dmul+0x2f6>
 800252a:	0034      	movs	r4, r6
 800252c:	3808      	subs	r0, #8
 800252e:	2500      	movs	r5, #0
 8002530:	4084      	lsls	r4, r0
 8002532:	e750      	b.n	80023d6 <__aeabi_dmul+0x30a>
 8002534:	f000 fd42 	bl	8002fbc <__clzsi2>
 8002538:	0003      	movs	r3, r0
 800253a:	001a      	movs	r2, r3
 800253c:	3215      	adds	r2, #21
 800253e:	3020      	adds	r0, #32
 8002540:	2a1c      	cmp	r2, #28
 8002542:	dc00      	bgt.n	8002546 <__aeabi_dmul+0x47a>
 8002544:	e71e      	b.n	8002384 <__aeabi_dmul+0x2b8>
 8002546:	4656      	mov	r6, sl
 8002548:	3b08      	subs	r3, #8
 800254a:	2200      	movs	r2, #0
 800254c:	409e      	lsls	r6, r3
 800254e:	e723      	b.n	8002398 <__aeabi_dmul+0x2cc>
 8002550:	9b00      	ldr	r3, [sp, #0]
 8002552:	469c      	mov	ip, r3
 8002554:	e6e6      	b.n	8002324 <__aeabi_dmul+0x258>
 8002556:	4912      	ldr	r1, [pc, #72]	; (80025a0 <__aeabi_dmul+0x4d4>)
 8002558:	0022      	movs	r2, r4
 800255a:	4461      	add	r1, ip
 800255c:	002e      	movs	r6, r5
 800255e:	408d      	lsls	r5, r1
 8002560:	408a      	lsls	r2, r1
 8002562:	40c6      	lsrs	r6, r0
 8002564:	1e69      	subs	r1, r5, #1
 8002566:	418d      	sbcs	r5, r1
 8002568:	4332      	orrs	r2, r6
 800256a:	432a      	orrs	r2, r5
 800256c:	40c4      	lsrs	r4, r0
 800256e:	0753      	lsls	r3, r2, #29
 8002570:	d0b6      	beq.n	80024e0 <__aeabi_dmul+0x414>
 8002572:	210f      	movs	r1, #15
 8002574:	4011      	ands	r1, r2
 8002576:	2904      	cmp	r1, #4
 8002578:	d1ac      	bne.n	80024d4 <__aeabi_dmul+0x408>
 800257a:	e7b1      	b.n	80024e0 <__aeabi_dmul+0x414>
 800257c:	0765      	lsls	r5, r4, #29
 800257e:	0264      	lsls	r4, r4, #9
 8002580:	0b24      	lsrs	r4, r4, #12
 8002582:	08d2      	lsrs	r2, r2, #3
 8002584:	4315      	orrs	r5, r2
 8002586:	2200      	movs	r2, #0
 8002588:	e601      	b.n	800218e <__aeabi_dmul+0xc2>
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	0312      	lsls	r2, r2, #12
 800258e:	4314      	orrs	r4, r2
 8002590:	0324      	lsls	r4, r4, #12
 8002592:	4a01      	ldr	r2, [pc, #4]	; (8002598 <__aeabi_dmul+0x4cc>)
 8002594:	0b24      	lsrs	r4, r4, #12
 8002596:	e5fa      	b.n	800218e <__aeabi_dmul+0xc2>
 8002598:	000007ff 	.word	0x000007ff
 800259c:	0000043e 	.word	0x0000043e
 80025a0:	0000041e 	.word	0x0000041e

080025a4 <__aeabi_dsub>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	4657      	mov	r7, sl
 80025a8:	464e      	mov	r6, r9
 80025aa:	4645      	mov	r5, r8
 80025ac:	46de      	mov	lr, fp
 80025ae:	b5e0      	push	{r5, r6, r7, lr}
 80025b0:	001e      	movs	r6, r3
 80025b2:	0017      	movs	r7, r2
 80025b4:	004a      	lsls	r2, r1, #1
 80025b6:	030b      	lsls	r3, r1, #12
 80025b8:	0d52      	lsrs	r2, r2, #21
 80025ba:	0a5b      	lsrs	r3, r3, #9
 80025bc:	4690      	mov	r8, r2
 80025be:	0f42      	lsrs	r2, r0, #29
 80025c0:	431a      	orrs	r2, r3
 80025c2:	0fcd      	lsrs	r5, r1, #31
 80025c4:	4ccd      	ldr	r4, [pc, #820]	; (80028fc <__aeabi_dsub+0x358>)
 80025c6:	0331      	lsls	r1, r6, #12
 80025c8:	00c3      	lsls	r3, r0, #3
 80025ca:	4694      	mov	ip, r2
 80025cc:	0070      	lsls	r0, r6, #1
 80025ce:	0f7a      	lsrs	r2, r7, #29
 80025d0:	0a49      	lsrs	r1, r1, #9
 80025d2:	00ff      	lsls	r7, r7, #3
 80025d4:	469a      	mov	sl, r3
 80025d6:	46b9      	mov	r9, r7
 80025d8:	0d40      	lsrs	r0, r0, #21
 80025da:	0ff6      	lsrs	r6, r6, #31
 80025dc:	4311      	orrs	r1, r2
 80025de:	42a0      	cmp	r0, r4
 80025e0:	d100      	bne.n	80025e4 <__aeabi_dsub+0x40>
 80025e2:	e0b1      	b.n	8002748 <__aeabi_dsub+0x1a4>
 80025e4:	2201      	movs	r2, #1
 80025e6:	4056      	eors	r6, r2
 80025e8:	46b3      	mov	fp, r6
 80025ea:	42b5      	cmp	r5, r6
 80025ec:	d100      	bne.n	80025f0 <__aeabi_dsub+0x4c>
 80025ee:	e088      	b.n	8002702 <__aeabi_dsub+0x15e>
 80025f0:	4642      	mov	r2, r8
 80025f2:	1a12      	subs	r2, r2, r0
 80025f4:	2a00      	cmp	r2, #0
 80025f6:	dc00      	bgt.n	80025fa <__aeabi_dsub+0x56>
 80025f8:	e0ae      	b.n	8002758 <__aeabi_dsub+0x1b4>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d100      	bne.n	8002600 <__aeabi_dsub+0x5c>
 80025fe:	e0c1      	b.n	8002784 <__aeabi_dsub+0x1e0>
 8002600:	48be      	ldr	r0, [pc, #760]	; (80028fc <__aeabi_dsub+0x358>)
 8002602:	4580      	cmp	r8, r0
 8002604:	d100      	bne.n	8002608 <__aeabi_dsub+0x64>
 8002606:	e151      	b.n	80028ac <__aeabi_dsub+0x308>
 8002608:	2080      	movs	r0, #128	; 0x80
 800260a:	0400      	lsls	r0, r0, #16
 800260c:	4301      	orrs	r1, r0
 800260e:	2a38      	cmp	r2, #56	; 0x38
 8002610:	dd00      	ble.n	8002614 <__aeabi_dsub+0x70>
 8002612:	e17b      	b.n	800290c <__aeabi_dsub+0x368>
 8002614:	2a1f      	cmp	r2, #31
 8002616:	dd00      	ble.n	800261a <__aeabi_dsub+0x76>
 8002618:	e1ee      	b.n	80029f8 <__aeabi_dsub+0x454>
 800261a:	2020      	movs	r0, #32
 800261c:	003e      	movs	r6, r7
 800261e:	1a80      	subs	r0, r0, r2
 8002620:	000c      	movs	r4, r1
 8002622:	40d6      	lsrs	r6, r2
 8002624:	40d1      	lsrs	r1, r2
 8002626:	4087      	lsls	r7, r0
 8002628:	4662      	mov	r2, ip
 800262a:	4084      	lsls	r4, r0
 800262c:	1a52      	subs	r2, r2, r1
 800262e:	1e78      	subs	r0, r7, #1
 8002630:	4187      	sbcs	r7, r0
 8002632:	4694      	mov	ip, r2
 8002634:	4334      	orrs	r4, r6
 8002636:	4327      	orrs	r7, r4
 8002638:	1bdc      	subs	r4, r3, r7
 800263a:	42a3      	cmp	r3, r4
 800263c:	419b      	sbcs	r3, r3
 800263e:	4662      	mov	r2, ip
 8002640:	425b      	negs	r3, r3
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	4699      	mov	r9, r3
 8002646:	464b      	mov	r3, r9
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	d400      	bmi.n	800264e <__aeabi_dsub+0xaa>
 800264c:	e118      	b.n	8002880 <__aeabi_dsub+0x2dc>
 800264e:	464b      	mov	r3, r9
 8002650:	0258      	lsls	r0, r3, #9
 8002652:	0a43      	lsrs	r3, r0, #9
 8002654:	4699      	mov	r9, r3
 8002656:	464b      	mov	r3, r9
 8002658:	2b00      	cmp	r3, #0
 800265a:	d100      	bne.n	800265e <__aeabi_dsub+0xba>
 800265c:	e137      	b.n	80028ce <__aeabi_dsub+0x32a>
 800265e:	4648      	mov	r0, r9
 8002660:	f000 fcac 	bl	8002fbc <__clzsi2>
 8002664:	0001      	movs	r1, r0
 8002666:	3908      	subs	r1, #8
 8002668:	2320      	movs	r3, #32
 800266a:	0022      	movs	r2, r4
 800266c:	4648      	mov	r0, r9
 800266e:	1a5b      	subs	r3, r3, r1
 8002670:	40da      	lsrs	r2, r3
 8002672:	4088      	lsls	r0, r1
 8002674:	408c      	lsls	r4, r1
 8002676:	4643      	mov	r3, r8
 8002678:	4310      	orrs	r0, r2
 800267a:	4588      	cmp	r8, r1
 800267c:	dd00      	ble.n	8002680 <__aeabi_dsub+0xdc>
 800267e:	e136      	b.n	80028ee <__aeabi_dsub+0x34a>
 8002680:	1ac9      	subs	r1, r1, r3
 8002682:	1c4b      	adds	r3, r1, #1
 8002684:	2b1f      	cmp	r3, #31
 8002686:	dd00      	ble.n	800268a <__aeabi_dsub+0xe6>
 8002688:	e0ea      	b.n	8002860 <__aeabi_dsub+0x2bc>
 800268a:	2220      	movs	r2, #32
 800268c:	0026      	movs	r6, r4
 800268e:	1ad2      	subs	r2, r2, r3
 8002690:	0001      	movs	r1, r0
 8002692:	4094      	lsls	r4, r2
 8002694:	40de      	lsrs	r6, r3
 8002696:	40d8      	lsrs	r0, r3
 8002698:	2300      	movs	r3, #0
 800269a:	4091      	lsls	r1, r2
 800269c:	1e62      	subs	r2, r4, #1
 800269e:	4194      	sbcs	r4, r2
 80026a0:	4681      	mov	r9, r0
 80026a2:	4698      	mov	r8, r3
 80026a4:	4331      	orrs	r1, r6
 80026a6:	430c      	orrs	r4, r1
 80026a8:	0763      	lsls	r3, r4, #29
 80026aa:	d009      	beq.n	80026c0 <__aeabi_dsub+0x11c>
 80026ac:	230f      	movs	r3, #15
 80026ae:	4023      	ands	r3, r4
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d005      	beq.n	80026c0 <__aeabi_dsub+0x11c>
 80026b4:	1d23      	adds	r3, r4, #4
 80026b6:	42a3      	cmp	r3, r4
 80026b8:	41a4      	sbcs	r4, r4
 80026ba:	4264      	negs	r4, r4
 80026bc:	44a1      	add	r9, r4
 80026be:	001c      	movs	r4, r3
 80026c0:	464b      	mov	r3, r9
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	d400      	bmi.n	80026c8 <__aeabi_dsub+0x124>
 80026c6:	e0de      	b.n	8002886 <__aeabi_dsub+0x2e2>
 80026c8:	4641      	mov	r1, r8
 80026ca:	4b8c      	ldr	r3, [pc, #560]	; (80028fc <__aeabi_dsub+0x358>)
 80026cc:	3101      	adds	r1, #1
 80026ce:	4299      	cmp	r1, r3
 80026d0:	d100      	bne.n	80026d4 <__aeabi_dsub+0x130>
 80026d2:	e0e7      	b.n	80028a4 <__aeabi_dsub+0x300>
 80026d4:	464b      	mov	r3, r9
 80026d6:	488a      	ldr	r0, [pc, #552]	; (8002900 <__aeabi_dsub+0x35c>)
 80026d8:	08e4      	lsrs	r4, r4, #3
 80026da:	4003      	ands	r3, r0
 80026dc:	0018      	movs	r0, r3
 80026de:	0549      	lsls	r1, r1, #21
 80026e0:	075b      	lsls	r3, r3, #29
 80026e2:	0240      	lsls	r0, r0, #9
 80026e4:	4323      	orrs	r3, r4
 80026e6:	0d4a      	lsrs	r2, r1, #21
 80026e8:	0b04      	lsrs	r4, r0, #12
 80026ea:	0512      	lsls	r2, r2, #20
 80026ec:	07ed      	lsls	r5, r5, #31
 80026ee:	4322      	orrs	r2, r4
 80026f0:	432a      	orrs	r2, r5
 80026f2:	0018      	movs	r0, r3
 80026f4:	0011      	movs	r1, r2
 80026f6:	bcf0      	pop	{r4, r5, r6, r7}
 80026f8:	46bb      	mov	fp, r7
 80026fa:	46b2      	mov	sl, r6
 80026fc:	46a9      	mov	r9, r5
 80026fe:	46a0      	mov	r8, r4
 8002700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002702:	4642      	mov	r2, r8
 8002704:	1a12      	subs	r2, r2, r0
 8002706:	2a00      	cmp	r2, #0
 8002708:	dd52      	ble.n	80027b0 <__aeabi_dsub+0x20c>
 800270a:	2800      	cmp	r0, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dsub+0x16c>
 800270e:	e09c      	b.n	800284a <__aeabi_dsub+0x2a6>
 8002710:	45a0      	cmp	r8, r4
 8002712:	d100      	bne.n	8002716 <__aeabi_dsub+0x172>
 8002714:	e0ca      	b.n	80028ac <__aeabi_dsub+0x308>
 8002716:	2080      	movs	r0, #128	; 0x80
 8002718:	0400      	lsls	r0, r0, #16
 800271a:	4301      	orrs	r1, r0
 800271c:	2a38      	cmp	r2, #56	; 0x38
 800271e:	dd00      	ble.n	8002722 <__aeabi_dsub+0x17e>
 8002720:	e149      	b.n	80029b6 <__aeabi_dsub+0x412>
 8002722:	2a1f      	cmp	r2, #31
 8002724:	dc00      	bgt.n	8002728 <__aeabi_dsub+0x184>
 8002726:	e197      	b.n	8002a58 <__aeabi_dsub+0x4b4>
 8002728:	0010      	movs	r0, r2
 800272a:	000e      	movs	r6, r1
 800272c:	3820      	subs	r0, #32
 800272e:	40c6      	lsrs	r6, r0
 8002730:	2a20      	cmp	r2, #32
 8002732:	d004      	beq.n	800273e <__aeabi_dsub+0x19a>
 8002734:	2040      	movs	r0, #64	; 0x40
 8002736:	1a82      	subs	r2, r0, r2
 8002738:	4091      	lsls	r1, r2
 800273a:	430f      	orrs	r7, r1
 800273c:	46b9      	mov	r9, r7
 800273e:	464c      	mov	r4, r9
 8002740:	1e62      	subs	r2, r4, #1
 8002742:	4194      	sbcs	r4, r2
 8002744:	4334      	orrs	r4, r6
 8002746:	e13a      	b.n	80029be <__aeabi_dsub+0x41a>
 8002748:	000a      	movs	r2, r1
 800274a:	433a      	orrs	r2, r7
 800274c:	d028      	beq.n	80027a0 <__aeabi_dsub+0x1fc>
 800274e:	46b3      	mov	fp, r6
 8002750:	42b5      	cmp	r5, r6
 8002752:	d02b      	beq.n	80027ac <__aeabi_dsub+0x208>
 8002754:	4a6b      	ldr	r2, [pc, #428]	; (8002904 <__aeabi_dsub+0x360>)
 8002756:	4442      	add	r2, r8
 8002758:	2a00      	cmp	r2, #0
 800275a:	d05d      	beq.n	8002818 <__aeabi_dsub+0x274>
 800275c:	4642      	mov	r2, r8
 800275e:	4644      	mov	r4, r8
 8002760:	1a82      	subs	r2, r0, r2
 8002762:	2c00      	cmp	r4, #0
 8002764:	d000      	beq.n	8002768 <__aeabi_dsub+0x1c4>
 8002766:	e0f5      	b.n	8002954 <__aeabi_dsub+0x3b0>
 8002768:	4665      	mov	r5, ip
 800276a:	431d      	orrs	r5, r3
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x1cc>
 800276e:	e19c      	b.n	8002aaa <__aeabi_dsub+0x506>
 8002770:	1e55      	subs	r5, r2, #1
 8002772:	2a01      	cmp	r2, #1
 8002774:	d100      	bne.n	8002778 <__aeabi_dsub+0x1d4>
 8002776:	e1fb      	b.n	8002b70 <__aeabi_dsub+0x5cc>
 8002778:	4c60      	ldr	r4, [pc, #384]	; (80028fc <__aeabi_dsub+0x358>)
 800277a:	42a2      	cmp	r2, r4
 800277c:	d100      	bne.n	8002780 <__aeabi_dsub+0x1dc>
 800277e:	e1bd      	b.n	8002afc <__aeabi_dsub+0x558>
 8002780:	002a      	movs	r2, r5
 8002782:	e0f0      	b.n	8002966 <__aeabi_dsub+0x3c2>
 8002784:	0008      	movs	r0, r1
 8002786:	4338      	orrs	r0, r7
 8002788:	d100      	bne.n	800278c <__aeabi_dsub+0x1e8>
 800278a:	e0c3      	b.n	8002914 <__aeabi_dsub+0x370>
 800278c:	1e50      	subs	r0, r2, #1
 800278e:	2a01      	cmp	r2, #1
 8002790:	d100      	bne.n	8002794 <__aeabi_dsub+0x1f0>
 8002792:	e1a8      	b.n	8002ae6 <__aeabi_dsub+0x542>
 8002794:	4c59      	ldr	r4, [pc, #356]	; (80028fc <__aeabi_dsub+0x358>)
 8002796:	42a2      	cmp	r2, r4
 8002798:	d100      	bne.n	800279c <__aeabi_dsub+0x1f8>
 800279a:	e087      	b.n	80028ac <__aeabi_dsub+0x308>
 800279c:	0002      	movs	r2, r0
 800279e:	e736      	b.n	800260e <__aeabi_dsub+0x6a>
 80027a0:	2201      	movs	r2, #1
 80027a2:	4056      	eors	r6, r2
 80027a4:	46b3      	mov	fp, r6
 80027a6:	42b5      	cmp	r5, r6
 80027a8:	d000      	beq.n	80027ac <__aeabi_dsub+0x208>
 80027aa:	e721      	b.n	80025f0 <__aeabi_dsub+0x4c>
 80027ac:	4a55      	ldr	r2, [pc, #340]	; (8002904 <__aeabi_dsub+0x360>)
 80027ae:	4442      	add	r2, r8
 80027b0:	2a00      	cmp	r2, #0
 80027b2:	d100      	bne.n	80027b6 <__aeabi_dsub+0x212>
 80027b4:	e0b5      	b.n	8002922 <__aeabi_dsub+0x37e>
 80027b6:	4642      	mov	r2, r8
 80027b8:	4644      	mov	r4, r8
 80027ba:	1a82      	subs	r2, r0, r2
 80027bc:	2c00      	cmp	r4, #0
 80027be:	d100      	bne.n	80027c2 <__aeabi_dsub+0x21e>
 80027c0:	e138      	b.n	8002a34 <__aeabi_dsub+0x490>
 80027c2:	4e4e      	ldr	r6, [pc, #312]	; (80028fc <__aeabi_dsub+0x358>)
 80027c4:	42b0      	cmp	r0, r6
 80027c6:	d100      	bne.n	80027ca <__aeabi_dsub+0x226>
 80027c8:	e1de      	b.n	8002b88 <__aeabi_dsub+0x5e4>
 80027ca:	2680      	movs	r6, #128	; 0x80
 80027cc:	4664      	mov	r4, ip
 80027ce:	0436      	lsls	r6, r6, #16
 80027d0:	4334      	orrs	r4, r6
 80027d2:	46a4      	mov	ip, r4
 80027d4:	2a38      	cmp	r2, #56	; 0x38
 80027d6:	dd00      	ble.n	80027da <__aeabi_dsub+0x236>
 80027d8:	e196      	b.n	8002b08 <__aeabi_dsub+0x564>
 80027da:	2a1f      	cmp	r2, #31
 80027dc:	dd00      	ble.n	80027e0 <__aeabi_dsub+0x23c>
 80027de:	e224      	b.n	8002c2a <__aeabi_dsub+0x686>
 80027e0:	2620      	movs	r6, #32
 80027e2:	1ab4      	subs	r4, r6, r2
 80027e4:	46a2      	mov	sl, r4
 80027e6:	4664      	mov	r4, ip
 80027e8:	4656      	mov	r6, sl
 80027ea:	40b4      	lsls	r4, r6
 80027ec:	46a1      	mov	r9, r4
 80027ee:	001c      	movs	r4, r3
 80027f0:	464e      	mov	r6, r9
 80027f2:	40d4      	lsrs	r4, r2
 80027f4:	4326      	orrs	r6, r4
 80027f6:	0034      	movs	r4, r6
 80027f8:	4656      	mov	r6, sl
 80027fa:	40b3      	lsls	r3, r6
 80027fc:	1e5e      	subs	r6, r3, #1
 80027fe:	41b3      	sbcs	r3, r6
 8002800:	431c      	orrs	r4, r3
 8002802:	4663      	mov	r3, ip
 8002804:	40d3      	lsrs	r3, r2
 8002806:	18c9      	adds	r1, r1, r3
 8002808:	19e4      	adds	r4, r4, r7
 800280a:	42bc      	cmp	r4, r7
 800280c:	41bf      	sbcs	r7, r7
 800280e:	427f      	negs	r7, r7
 8002810:	46b9      	mov	r9, r7
 8002812:	4680      	mov	r8, r0
 8002814:	4489      	add	r9, r1
 8002816:	e0d8      	b.n	80029ca <__aeabi_dsub+0x426>
 8002818:	4640      	mov	r0, r8
 800281a:	4c3b      	ldr	r4, [pc, #236]	; (8002908 <__aeabi_dsub+0x364>)
 800281c:	3001      	adds	r0, #1
 800281e:	4220      	tst	r0, r4
 8002820:	d000      	beq.n	8002824 <__aeabi_dsub+0x280>
 8002822:	e0b4      	b.n	800298e <__aeabi_dsub+0x3ea>
 8002824:	4640      	mov	r0, r8
 8002826:	2800      	cmp	r0, #0
 8002828:	d000      	beq.n	800282c <__aeabi_dsub+0x288>
 800282a:	e144      	b.n	8002ab6 <__aeabi_dsub+0x512>
 800282c:	4660      	mov	r0, ip
 800282e:	4318      	orrs	r0, r3
 8002830:	d100      	bne.n	8002834 <__aeabi_dsub+0x290>
 8002832:	e190      	b.n	8002b56 <__aeabi_dsub+0x5b2>
 8002834:	0008      	movs	r0, r1
 8002836:	4338      	orrs	r0, r7
 8002838:	d000      	beq.n	800283c <__aeabi_dsub+0x298>
 800283a:	e1aa      	b.n	8002b92 <__aeabi_dsub+0x5ee>
 800283c:	4661      	mov	r1, ip
 800283e:	08db      	lsrs	r3, r3, #3
 8002840:	0749      	lsls	r1, r1, #29
 8002842:	430b      	orrs	r3, r1
 8002844:	4661      	mov	r1, ip
 8002846:	08cc      	lsrs	r4, r1, #3
 8002848:	e027      	b.n	800289a <__aeabi_dsub+0x2f6>
 800284a:	0008      	movs	r0, r1
 800284c:	4338      	orrs	r0, r7
 800284e:	d061      	beq.n	8002914 <__aeabi_dsub+0x370>
 8002850:	1e50      	subs	r0, r2, #1
 8002852:	2a01      	cmp	r2, #1
 8002854:	d100      	bne.n	8002858 <__aeabi_dsub+0x2b4>
 8002856:	e139      	b.n	8002acc <__aeabi_dsub+0x528>
 8002858:	42a2      	cmp	r2, r4
 800285a:	d027      	beq.n	80028ac <__aeabi_dsub+0x308>
 800285c:	0002      	movs	r2, r0
 800285e:	e75d      	b.n	800271c <__aeabi_dsub+0x178>
 8002860:	0002      	movs	r2, r0
 8002862:	391f      	subs	r1, #31
 8002864:	40ca      	lsrs	r2, r1
 8002866:	0011      	movs	r1, r2
 8002868:	2b20      	cmp	r3, #32
 800286a:	d003      	beq.n	8002874 <__aeabi_dsub+0x2d0>
 800286c:	2240      	movs	r2, #64	; 0x40
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	4098      	lsls	r0, r3
 8002872:	4304      	orrs	r4, r0
 8002874:	1e63      	subs	r3, r4, #1
 8002876:	419c      	sbcs	r4, r3
 8002878:	2300      	movs	r3, #0
 800287a:	4699      	mov	r9, r3
 800287c:	4698      	mov	r8, r3
 800287e:	430c      	orrs	r4, r1
 8002880:	0763      	lsls	r3, r4, #29
 8002882:	d000      	beq.n	8002886 <__aeabi_dsub+0x2e2>
 8002884:	e712      	b.n	80026ac <__aeabi_dsub+0x108>
 8002886:	464b      	mov	r3, r9
 8002888:	464a      	mov	r2, r9
 800288a:	08e4      	lsrs	r4, r4, #3
 800288c:	075b      	lsls	r3, r3, #29
 800288e:	4323      	orrs	r3, r4
 8002890:	08d4      	lsrs	r4, r2, #3
 8002892:	4642      	mov	r2, r8
 8002894:	4919      	ldr	r1, [pc, #100]	; (80028fc <__aeabi_dsub+0x358>)
 8002896:	428a      	cmp	r2, r1
 8002898:	d00e      	beq.n	80028b8 <__aeabi_dsub+0x314>
 800289a:	0324      	lsls	r4, r4, #12
 800289c:	0552      	lsls	r2, r2, #21
 800289e:	0b24      	lsrs	r4, r4, #12
 80028a0:	0d52      	lsrs	r2, r2, #21
 80028a2:	e722      	b.n	80026ea <__aeabi_dsub+0x146>
 80028a4:	000a      	movs	r2, r1
 80028a6:	2400      	movs	r4, #0
 80028a8:	2300      	movs	r3, #0
 80028aa:	e71e      	b.n	80026ea <__aeabi_dsub+0x146>
 80028ac:	08db      	lsrs	r3, r3, #3
 80028ae:	4662      	mov	r2, ip
 80028b0:	0752      	lsls	r2, r2, #29
 80028b2:	4313      	orrs	r3, r2
 80028b4:	4662      	mov	r2, ip
 80028b6:	08d4      	lsrs	r4, r2, #3
 80028b8:	001a      	movs	r2, r3
 80028ba:	4322      	orrs	r2, r4
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x31c>
 80028be:	e1fc      	b.n	8002cba <__aeabi_dsub+0x716>
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	0312      	lsls	r2, r2, #12
 80028c4:	4314      	orrs	r4, r2
 80028c6:	0324      	lsls	r4, r4, #12
 80028c8:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <__aeabi_dsub+0x358>)
 80028ca:	0b24      	lsrs	r4, r4, #12
 80028cc:	e70d      	b.n	80026ea <__aeabi_dsub+0x146>
 80028ce:	0020      	movs	r0, r4
 80028d0:	f000 fb74 	bl	8002fbc <__clzsi2>
 80028d4:	0001      	movs	r1, r0
 80028d6:	3118      	adds	r1, #24
 80028d8:	291f      	cmp	r1, #31
 80028da:	dc00      	bgt.n	80028de <__aeabi_dsub+0x33a>
 80028dc:	e6c4      	b.n	8002668 <__aeabi_dsub+0xc4>
 80028de:	3808      	subs	r0, #8
 80028e0:	4084      	lsls	r4, r0
 80028e2:	4643      	mov	r3, r8
 80028e4:	0020      	movs	r0, r4
 80028e6:	2400      	movs	r4, #0
 80028e8:	4588      	cmp	r8, r1
 80028ea:	dc00      	bgt.n	80028ee <__aeabi_dsub+0x34a>
 80028ec:	e6c8      	b.n	8002680 <__aeabi_dsub+0xdc>
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <__aeabi_dsub+0x35c>)
 80028f0:	1a5b      	subs	r3, r3, r1
 80028f2:	4010      	ands	r0, r2
 80028f4:	4698      	mov	r8, r3
 80028f6:	4681      	mov	r9, r0
 80028f8:	e6d6      	b.n	80026a8 <__aeabi_dsub+0x104>
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	000007ff 	.word	0x000007ff
 8002900:	ff7fffff 	.word	0xff7fffff
 8002904:	fffff801 	.word	0xfffff801
 8002908:	000007fe 	.word	0x000007fe
 800290c:	430f      	orrs	r7, r1
 800290e:	1e7a      	subs	r2, r7, #1
 8002910:	4197      	sbcs	r7, r2
 8002912:	e691      	b.n	8002638 <__aeabi_dsub+0x94>
 8002914:	4661      	mov	r1, ip
 8002916:	08db      	lsrs	r3, r3, #3
 8002918:	0749      	lsls	r1, r1, #29
 800291a:	430b      	orrs	r3, r1
 800291c:	4661      	mov	r1, ip
 800291e:	08cc      	lsrs	r4, r1, #3
 8002920:	e7b8      	b.n	8002894 <__aeabi_dsub+0x2f0>
 8002922:	4640      	mov	r0, r8
 8002924:	4cd3      	ldr	r4, [pc, #844]	; (8002c74 <__aeabi_dsub+0x6d0>)
 8002926:	3001      	adds	r0, #1
 8002928:	4220      	tst	r0, r4
 800292a:	d000      	beq.n	800292e <__aeabi_dsub+0x38a>
 800292c:	e0a2      	b.n	8002a74 <__aeabi_dsub+0x4d0>
 800292e:	4640      	mov	r0, r8
 8002930:	2800      	cmp	r0, #0
 8002932:	d000      	beq.n	8002936 <__aeabi_dsub+0x392>
 8002934:	e101      	b.n	8002b3a <__aeabi_dsub+0x596>
 8002936:	4660      	mov	r0, ip
 8002938:	4318      	orrs	r0, r3
 800293a:	d100      	bne.n	800293e <__aeabi_dsub+0x39a>
 800293c:	e15e      	b.n	8002bfc <__aeabi_dsub+0x658>
 800293e:	0008      	movs	r0, r1
 8002940:	4338      	orrs	r0, r7
 8002942:	d000      	beq.n	8002946 <__aeabi_dsub+0x3a2>
 8002944:	e15f      	b.n	8002c06 <__aeabi_dsub+0x662>
 8002946:	4661      	mov	r1, ip
 8002948:	08db      	lsrs	r3, r3, #3
 800294a:	0749      	lsls	r1, r1, #29
 800294c:	430b      	orrs	r3, r1
 800294e:	4661      	mov	r1, ip
 8002950:	08cc      	lsrs	r4, r1, #3
 8002952:	e7a2      	b.n	800289a <__aeabi_dsub+0x2f6>
 8002954:	4dc8      	ldr	r5, [pc, #800]	; (8002c78 <__aeabi_dsub+0x6d4>)
 8002956:	42a8      	cmp	r0, r5
 8002958:	d100      	bne.n	800295c <__aeabi_dsub+0x3b8>
 800295a:	e0cf      	b.n	8002afc <__aeabi_dsub+0x558>
 800295c:	2580      	movs	r5, #128	; 0x80
 800295e:	4664      	mov	r4, ip
 8002960:	042d      	lsls	r5, r5, #16
 8002962:	432c      	orrs	r4, r5
 8002964:	46a4      	mov	ip, r4
 8002966:	2a38      	cmp	r2, #56	; 0x38
 8002968:	dc56      	bgt.n	8002a18 <__aeabi_dsub+0x474>
 800296a:	2a1f      	cmp	r2, #31
 800296c:	dd00      	ble.n	8002970 <__aeabi_dsub+0x3cc>
 800296e:	e0d1      	b.n	8002b14 <__aeabi_dsub+0x570>
 8002970:	2520      	movs	r5, #32
 8002972:	001e      	movs	r6, r3
 8002974:	1aad      	subs	r5, r5, r2
 8002976:	4664      	mov	r4, ip
 8002978:	40ab      	lsls	r3, r5
 800297a:	40ac      	lsls	r4, r5
 800297c:	40d6      	lsrs	r6, r2
 800297e:	1e5d      	subs	r5, r3, #1
 8002980:	41ab      	sbcs	r3, r5
 8002982:	4334      	orrs	r4, r6
 8002984:	4323      	orrs	r3, r4
 8002986:	4664      	mov	r4, ip
 8002988:	40d4      	lsrs	r4, r2
 800298a:	1b09      	subs	r1, r1, r4
 800298c:	e049      	b.n	8002a22 <__aeabi_dsub+0x47e>
 800298e:	4660      	mov	r0, ip
 8002990:	1bdc      	subs	r4, r3, r7
 8002992:	1a46      	subs	r6, r0, r1
 8002994:	42a3      	cmp	r3, r4
 8002996:	4180      	sbcs	r0, r0
 8002998:	4240      	negs	r0, r0
 800299a:	4681      	mov	r9, r0
 800299c:	0030      	movs	r0, r6
 800299e:	464e      	mov	r6, r9
 80029a0:	1b80      	subs	r0, r0, r6
 80029a2:	4681      	mov	r9, r0
 80029a4:	0200      	lsls	r0, r0, #8
 80029a6:	d476      	bmi.n	8002a96 <__aeabi_dsub+0x4f2>
 80029a8:	464b      	mov	r3, r9
 80029aa:	4323      	orrs	r3, r4
 80029ac:	d000      	beq.n	80029b0 <__aeabi_dsub+0x40c>
 80029ae:	e652      	b.n	8002656 <__aeabi_dsub+0xb2>
 80029b0:	2400      	movs	r4, #0
 80029b2:	2500      	movs	r5, #0
 80029b4:	e771      	b.n	800289a <__aeabi_dsub+0x2f6>
 80029b6:	4339      	orrs	r1, r7
 80029b8:	000c      	movs	r4, r1
 80029ba:	1e62      	subs	r2, r4, #1
 80029bc:	4194      	sbcs	r4, r2
 80029be:	18e4      	adds	r4, r4, r3
 80029c0:	429c      	cmp	r4, r3
 80029c2:	419b      	sbcs	r3, r3
 80029c4:	425b      	negs	r3, r3
 80029c6:	4463      	add	r3, ip
 80029c8:	4699      	mov	r9, r3
 80029ca:	464b      	mov	r3, r9
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	d400      	bmi.n	80029d2 <__aeabi_dsub+0x42e>
 80029d0:	e756      	b.n	8002880 <__aeabi_dsub+0x2dc>
 80029d2:	2301      	movs	r3, #1
 80029d4:	469c      	mov	ip, r3
 80029d6:	4ba8      	ldr	r3, [pc, #672]	; (8002c78 <__aeabi_dsub+0x6d4>)
 80029d8:	44e0      	add	r8, ip
 80029da:	4598      	cmp	r8, r3
 80029dc:	d038      	beq.n	8002a50 <__aeabi_dsub+0x4ac>
 80029de:	464b      	mov	r3, r9
 80029e0:	48a6      	ldr	r0, [pc, #664]	; (8002c7c <__aeabi_dsub+0x6d8>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	4003      	ands	r3, r0
 80029e6:	0018      	movs	r0, r3
 80029e8:	0863      	lsrs	r3, r4, #1
 80029ea:	4014      	ands	r4, r2
 80029ec:	431c      	orrs	r4, r3
 80029ee:	07c3      	lsls	r3, r0, #31
 80029f0:	431c      	orrs	r4, r3
 80029f2:	0843      	lsrs	r3, r0, #1
 80029f4:	4699      	mov	r9, r3
 80029f6:	e657      	b.n	80026a8 <__aeabi_dsub+0x104>
 80029f8:	0010      	movs	r0, r2
 80029fa:	000e      	movs	r6, r1
 80029fc:	3820      	subs	r0, #32
 80029fe:	40c6      	lsrs	r6, r0
 8002a00:	2a20      	cmp	r2, #32
 8002a02:	d004      	beq.n	8002a0e <__aeabi_dsub+0x46a>
 8002a04:	2040      	movs	r0, #64	; 0x40
 8002a06:	1a82      	subs	r2, r0, r2
 8002a08:	4091      	lsls	r1, r2
 8002a0a:	430f      	orrs	r7, r1
 8002a0c:	46b9      	mov	r9, r7
 8002a0e:	464f      	mov	r7, r9
 8002a10:	1e7a      	subs	r2, r7, #1
 8002a12:	4197      	sbcs	r7, r2
 8002a14:	4337      	orrs	r7, r6
 8002a16:	e60f      	b.n	8002638 <__aeabi_dsub+0x94>
 8002a18:	4662      	mov	r2, ip
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	0013      	movs	r3, r2
 8002a1e:	1e5a      	subs	r2, r3, #1
 8002a20:	4193      	sbcs	r3, r2
 8002a22:	1afc      	subs	r4, r7, r3
 8002a24:	42a7      	cmp	r7, r4
 8002a26:	41bf      	sbcs	r7, r7
 8002a28:	427f      	negs	r7, r7
 8002a2a:	1bcb      	subs	r3, r1, r7
 8002a2c:	4699      	mov	r9, r3
 8002a2e:	465d      	mov	r5, fp
 8002a30:	4680      	mov	r8, r0
 8002a32:	e608      	b.n	8002646 <__aeabi_dsub+0xa2>
 8002a34:	4666      	mov	r6, ip
 8002a36:	431e      	orrs	r6, r3
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x498>
 8002a3a:	e0be      	b.n	8002bba <__aeabi_dsub+0x616>
 8002a3c:	1e56      	subs	r6, r2, #1
 8002a3e:	2a01      	cmp	r2, #1
 8002a40:	d100      	bne.n	8002a44 <__aeabi_dsub+0x4a0>
 8002a42:	e109      	b.n	8002c58 <__aeabi_dsub+0x6b4>
 8002a44:	4c8c      	ldr	r4, [pc, #560]	; (8002c78 <__aeabi_dsub+0x6d4>)
 8002a46:	42a2      	cmp	r2, r4
 8002a48:	d100      	bne.n	8002a4c <__aeabi_dsub+0x4a8>
 8002a4a:	e119      	b.n	8002c80 <__aeabi_dsub+0x6dc>
 8002a4c:	0032      	movs	r2, r6
 8002a4e:	e6c1      	b.n	80027d4 <__aeabi_dsub+0x230>
 8002a50:	4642      	mov	r2, r8
 8002a52:	2400      	movs	r4, #0
 8002a54:	2300      	movs	r3, #0
 8002a56:	e648      	b.n	80026ea <__aeabi_dsub+0x146>
 8002a58:	2020      	movs	r0, #32
 8002a5a:	000c      	movs	r4, r1
 8002a5c:	1a80      	subs	r0, r0, r2
 8002a5e:	003e      	movs	r6, r7
 8002a60:	4087      	lsls	r7, r0
 8002a62:	4084      	lsls	r4, r0
 8002a64:	40d6      	lsrs	r6, r2
 8002a66:	1e78      	subs	r0, r7, #1
 8002a68:	4187      	sbcs	r7, r0
 8002a6a:	40d1      	lsrs	r1, r2
 8002a6c:	4334      	orrs	r4, r6
 8002a6e:	433c      	orrs	r4, r7
 8002a70:	448c      	add	ip, r1
 8002a72:	e7a4      	b.n	80029be <__aeabi_dsub+0x41a>
 8002a74:	4a80      	ldr	r2, [pc, #512]	; (8002c78 <__aeabi_dsub+0x6d4>)
 8002a76:	4290      	cmp	r0, r2
 8002a78:	d100      	bne.n	8002a7c <__aeabi_dsub+0x4d8>
 8002a7a:	e0e9      	b.n	8002c50 <__aeabi_dsub+0x6ac>
 8002a7c:	19df      	adds	r7, r3, r7
 8002a7e:	429f      	cmp	r7, r3
 8002a80:	419b      	sbcs	r3, r3
 8002a82:	4461      	add	r1, ip
 8002a84:	425b      	negs	r3, r3
 8002a86:	18c9      	adds	r1, r1, r3
 8002a88:	07cc      	lsls	r4, r1, #31
 8002a8a:	087f      	lsrs	r7, r7, #1
 8002a8c:	084b      	lsrs	r3, r1, #1
 8002a8e:	4699      	mov	r9, r3
 8002a90:	4680      	mov	r8, r0
 8002a92:	433c      	orrs	r4, r7
 8002a94:	e6f4      	b.n	8002880 <__aeabi_dsub+0x2dc>
 8002a96:	1afc      	subs	r4, r7, r3
 8002a98:	42a7      	cmp	r7, r4
 8002a9a:	41bf      	sbcs	r7, r7
 8002a9c:	4663      	mov	r3, ip
 8002a9e:	427f      	negs	r7, r7
 8002aa0:	1ac9      	subs	r1, r1, r3
 8002aa2:	1bcb      	subs	r3, r1, r7
 8002aa4:	4699      	mov	r9, r3
 8002aa6:	465d      	mov	r5, fp
 8002aa8:	e5d5      	b.n	8002656 <__aeabi_dsub+0xb2>
 8002aaa:	08ff      	lsrs	r7, r7, #3
 8002aac:	074b      	lsls	r3, r1, #29
 8002aae:	465d      	mov	r5, fp
 8002ab0:	433b      	orrs	r3, r7
 8002ab2:	08cc      	lsrs	r4, r1, #3
 8002ab4:	e6ee      	b.n	8002894 <__aeabi_dsub+0x2f0>
 8002ab6:	4662      	mov	r2, ip
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	d000      	beq.n	8002abe <__aeabi_dsub+0x51a>
 8002abc:	e082      	b.n	8002bc4 <__aeabi_dsub+0x620>
 8002abe:	000b      	movs	r3, r1
 8002ac0:	433b      	orrs	r3, r7
 8002ac2:	d11b      	bne.n	8002afc <__aeabi_dsub+0x558>
 8002ac4:	2480      	movs	r4, #128	; 0x80
 8002ac6:	2500      	movs	r5, #0
 8002ac8:	0324      	lsls	r4, r4, #12
 8002aca:	e6f9      	b.n	80028c0 <__aeabi_dsub+0x31c>
 8002acc:	19dc      	adds	r4, r3, r7
 8002ace:	429c      	cmp	r4, r3
 8002ad0:	419b      	sbcs	r3, r3
 8002ad2:	4461      	add	r1, ip
 8002ad4:	4689      	mov	r9, r1
 8002ad6:	425b      	negs	r3, r3
 8002ad8:	4499      	add	r9, r3
 8002ada:	464b      	mov	r3, r9
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	d444      	bmi.n	8002b6a <__aeabi_dsub+0x5c6>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	4698      	mov	r8, r3
 8002ae4:	e6cc      	b.n	8002880 <__aeabi_dsub+0x2dc>
 8002ae6:	1bdc      	subs	r4, r3, r7
 8002ae8:	4662      	mov	r2, ip
 8002aea:	42a3      	cmp	r3, r4
 8002aec:	419b      	sbcs	r3, r3
 8002aee:	1a51      	subs	r1, r2, r1
 8002af0:	425b      	negs	r3, r3
 8002af2:	1acb      	subs	r3, r1, r3
 8002af4:	4699      	mov	r9, r3
 8002af6:	2301      	movs	r3, #1
 8002af8:	4698      	mov	r8, r3
 8002afa:	e5a4      	b.n	8002646 <__aeabi_dsub+0xa2>
 8002afc:	08ff      	lsrs	r7, r7, #3
 8002afe:	074b      	lsls	r3, r1, #29
 8002b00:	465d      	mov	r5, fp
 8002b02:	433b      	orrs	r3, r7
 8002b04:	08cc      	lsrs	r4, r1, #3
 8002b06:	e6d7      	b.n	80028b8 <__aeabi_dsub+0x314>
 8002b08:	4662      	mov	r2, ip
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	0014      	movs	r4, r2
 8002b0e:	1e63      	subs	r3, r4, #1
 8002b10:	419c      	sbcs	r4, r3
 8002b12:	e679      	b.n	8002808 <__aeabi_dsub+0x264>
 8002b14:	0015      	movs	r5, r2
 8002b16:	4664      	mov	r4, ip
 8002b18:	3d20      	subs	r5, #32
 8002b1a:	40ec      	lsrs	r4, r5
 8002b1c:	46a0      	mov	r8, r4
 8002b1e:	2a20      	cmp	r2, #32
 8002b20:	d005      	beq.n	8002b2e <__aeabi_dsub+0x58a>
 8002b22:	2540      	movs	r5, #64	; 0x40
 8002b24:	4664      	mov	r4, ip
 8002b26:	1aaa      	subs	r2, r5, r2
 8002b28:	4094      	lsls	r4, r2
 8002b2a:	4323      	orrs	r3, r4
 8002b2c:	469a      	mov	sl, r3
 8002b2e:	4654      	mov	r4, sl
 8002b30:	1e63      	subs	r3, r4, #1
 8002b32:	419c      	sbcs	r4, r3
 8002b34:	4643      	mov	r3, r8
 8002b36:	4323      	orrs	r3, r4
 8002b38:	e773      	b.n	8002a22 <__aeabi_dsub+0x47e>
 8002b3a:	4662      	mov	r2, ip
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	d023      	beq.n	8002b88 <__aeabi_dsub+0x5e4>
 8002b40:	000a      	movs	r2, r1
 8002b42:	433a      	orrs	r2, r7
 8002b44:	d000      	beq.n	8002b48 <__aeabi_dsub+0x5a4>
 8002b46:	e0a0      	b.n	8002c8a <__aeabi_dsub+0x6e6>
 8002b48:	4662      	mov	r2, ip
 8002b4a:	08db      	lsrs	r3, r3, #3
 8002b4c:	0752      	lsls	r2, r2, #29
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	4662      	mov	r2, ip
 8002b52:	08d4      	lsrs	r4, r2, #3
 8002b54:	e6b0      	b.n	80028b8 <__aeabi_dsub+0x314>
 8002b56:	000b      	movs	r3, r1
 8002b58:	433b      	orrs	r3, r7
 8002b5a:	d100      	bne.n	8002b5e <__aeabi_dsub+0x5ba>
 8002b5c:	e728      	b.n	80029b0 <__aeabi_dsub+0x40c>
 8002b5e:	08ff      	lsrs	r7, r7, #3
 8002b60:	074b      	lsls	r3, r1, #29
 8002b62:	465d      	mov	r5, fp
 8002b64:	433b      	orrs	r3, r7
 8002b66:	08cc      	lsrs	r4, r1, #3
 8002b68:	e697      	b.n	800289a <__aeabi_dsub+0x2f6>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	4698      	mov	r8, r3
 8002b6e:	e736      	b.n	80029de <__aeabi_dsub+0x43a>
 8002b70:	1afc      	subs	r4, r7, r3
 8002b72:	42a7      	cmp	r7, r4
 8002b74:	41bf      	sbcs	r7, r7
 8002b76:	4663      	mov	r3, ip
 8002b78:	427f      	negs	r7, r7
 8002b7a:	1ac9      	subs	r1, r1, r3
 8002b7c:	1bcb      	subs	r3, r1, r7
 8002b7e:	4699      	mov	r9, r3
 8002b80:	2301      	movs	r3, #1
 8002b82:	465d      	mov	r5, fp
 8002b84:	4698      	mov	r8, r3
 8002b86:	e55e      	b.n	8002646 <__aeabi_dsub+0xa2>
 8002b88:	074b      	lsls	r3, r1, #29
 8002b8a:	08ff      	lsrs	r7, r7, #3
 8002b8c:	433b      	orrs	r3, r7
 8002b8e:	08cc      	lsrs	r4, r1, #3
 8002b90:	e692      	b.n	80028b8 <__aeabi_dsub+0x314>
 8002b92:	1bdc      	subs	r4, r3, r7
 8002b94:	4660      	mov	r0, ip
 8002b96:	42a3      	cmp	r3, r4
 8002b98:	41b6      	sbcs	r6, r6
 8002b9a:	1a40      	subs	r0, r0, r1
 8002b9c:	4276      	negs	r6, r6
 8002b9e:	1b80      	subs	r0, r0, r6
 8002ba0:	4681      	mov	r9, r0
 8002ba2:	0200      	lsls	r0, r0, #8
 8002ba4:	d560      	bpl.n	8002c68 <__aeabi_dsub+0x6c4>
 8002ba6:	1afc      	subs	r4, r7, r3
 8002ba8:	42a7      	cmp	r7, r4
 8002baa:	41bf      	sbcs	r7, r7
 8002bac:	4663      	mov	r3, ip
 8002bae:	427f      	negs	r7, r7
 8002bb0:	1ac9      	subs	r1, r1, r3
 8002bb2:	1bcb      	subs	r3, r1, r7
 8002bb4:	4699      	mov	r9, r3
 8002bb6:	465d      	mov	r5, fp
 8002bb8:	e576      	b.n	80026a8 <__aeabi_dsub+0x104>
 8002bba:	08ff      	lsrs	r7, r7, #3
 8002bbc:	074b      	lsls	r3, r1, #29
 8002bbe:	433b      	orrs	r3, r7
 8002bc0:	08cc      	lsrs	r4, r1, #3
 8002bc2:	e667      	b.n	8002894 <__aeabi_dsub+0x2f0>
 8002bc4:	000a      	movs	r2, r1
 8002bc6:	08db      	lsrs	r3, r3, #3
 8002bc8:	433a      	orrs	r2, r7
 8002bca:	d100      	bne.n	8002bce <__aeabi_dsub+0x62a>
 8002bcc:	e66f      	b.n	80028ae <__aeabi_dsub+0x30a>
 8002bce:	4662      	mov	r2, ip
 8002bd0:	0752      	lsls	r2, r2, #29
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	4662      	mov	r2, ip
 8002bd6:	08d4      	lsrs	r4, r2, #3
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	0312      	lsls	r2, r2, #12
 8002bdc:	4214      	tst	r4, r2
 8002bde:	d007      	beq.n	8002bf0 <__aeabi_dsub+0x64c>
 8002be0:	08c8      	lsrs	r0, r1, #3
 8002be2:	4210      	tst	r0, r2
 8002be4:	d104      	bne.n	8002bf0 <__aeabi_dsub+0x64c>
 8002be6:	465d      	mov	r5, fp
 8002be8:	0004      	movs	r4, r0
 8002bea:	08fb      	lsrs	r3, r7, #3
 8002bec:	0749      	lsls	r1, r1, #29
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	0f5a      	lsrs	r2, r3, #29
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	08db      	lsrs	r3, r3, #3
 8002bf6:	0752      	lsls	r2, r2, #29
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	e65d      	b.n	80028b8 <__aeabi_dsub+0x314>
 8002bfc:	074b      	lsls	r3, r1, #29
 8002bfe:	08ff      	lsrs	r7, r7, #3
 8002c00:	433b      	orrs	r3, r7
 8002c02:	08cc      	lsrs	r4, r1, #3
 8002c04:	e649      	b.n	800289a <__aeabi_dsub+0x2f6>
 8002c06:	19dc      	adds	r4, r3, r7
 8002c08:	429c      	cmp	r4, r3
 8002c0a:	419b      	sbcs	r3, r3
 8002c0c:	4461      	add	r1, ip
 8002c0e:	4689      	mov	r9, r1
 8002c10:	425b      	negs	r3, r3
 8002c12:	4499      	add	r9, r3
 8002c14:	464b      	mov	r3, r9
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	d400      	bmi.n	8002c1c <__aeabi_dsub+0x678>
 8002c1a:	e631      	b.n	8002880 <__aeabi_dsub+0x2dc>
 8002c1c:	464a      	mov	r2, r9
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <__aeabi_dsub+0x6d8>)
 8002c20:	401a      	ands	r2, r3
 8002c22:	2301      	movs	r3, #1
 8002c24:	4691      	mov	r9, r2
 8002c26:	4698      	mov	r8, r3
 8002c28:	e62a      	b.n	8002880 <__aeabi_dsub+0x2dc>
 8002c2a:	0016      	movs	r6, r2
 8002c2c:	4664      	mov	r4, ip
 8002c2e:	3e20      	subs	r6, #32
 8002c30:	40f4      	lsrs	r4, r6
 8002c32:	46a0      	mov	r8, r4
 8002c34:	2a20      	cmp	r2, #32
 8002c36:	d005      	beq.n	8002c44 <__aeabi_dsub+0x6a0>
 8002c38:	2640      	movs	r6, #64	; 0x40
 8002c3a:	4664      	mov	r4, ip
 8002c3c:	1ab2      	subs	r2, r6, r2
 8002c3e:	4094      	lsls	r4, r2
 8002c40:	4323      	orrs	r3, r4
 8002c42:	469a      	mov	sl, r3
 8002c44:	4654      	mov	r4, sl
 8002c46:	1e63      	subs	r3, r4, #1
 8002c48:	419c      	sbcs	r4, r3
 8002c4a:	4643      	mov	r3, r8
 8002c4c:	431c      	orrs	r4, r3
 8002c4e:	e5db      	b.n	8002808 <__aeabi_dsub+0x264>
 8002c50:	0002      	movs	r2, r0
 8002c52:	2400      	movs	r4, #0
 8002c54:	2300      	movs	r3, #0
 8002c56:	e548      	b.n	80026ea <__aeabi_dsub+0x146>
 8002c58:	19dc      	adds	r4, r3, r7
 8002c5a:	42bc      	cmp	r4, r7
 8002c5c:	41bf      	sbcs	r7, r7
 8002c5e:	4461      	add	r1, ip
 8002c60:	4689      	mov	r9, r1
 8002c62:	427f      	negs	r7, r7
 8002c64:	44b9      	add	r9, r7
 8002c66:	e738      	b.n	8002ada <__aeabi_dsub+0x536>
 8002c68:	464b      	mov	r3, r9
 8002c6a:	4323      	orrs	r3, r4
 8002c6c:	d100      	bne.n	8002c70 <__aeabi_dsub+0x6cc>
 8002c6e:	e69f      	b.n	80029b0 <__aeabi_dsub+0x40c>
 8002c70:	e606      	b.n	8002880 <__aeabi_dsub+0x2dc>
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	000007fe 	.word	0x000007fe
 8002c78:	000007ff 	.word	0x000007ff
 8002c7c:	ff7fffff 	.word	0xff7fffff
 8002c80:	08ff      	lsrs	r7, r7, #3
 8002c82:	074b      	lsls	r3, r1, #29
 8002c84:	433b      	orrs	r3, r7
 8002c86:	08cc      	lsrs	r4, r1, #3
 8002c88:	e616      	b.n	80028b8 <__aeabi_dsub+0x314>
 8002c8a:	4662      	mov	r2, ip
 8002c8c:	08db      	lsrs	r3, r3, #3
 8002c8e:	0752      	lsls	r2, r2, #29
 8002c90:	4313      	orrs	r3, r2
 8002c92:	4662      	mov	r2, ip
 8002c94:	08d4      	lsrs	r4, r2, #3
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	0312      	lsls	r2, r2, #12
 8002c9a:	4214      	tst	r4, r2
 8002c9c:	d007      	beq.n	8002cae <__aeabi_dsub+0x70a>
 8002c9e:	08c8      	lsrs	r0, r1, #3
 8002ca0:	4210      	tst	r0, r2
 8002ca2:	d104      	bne.n	8002cae <__aeabi_dsub+0x70a>
 8002ca4:	465d      	mov	r5, fp
 8002ca6:	0004      	movs	r4, r0
 8002ca8:	08fb      	lsrs	r3, r7, #3
 8002caa:	0749      	lsls	r1, r1, #29
 8002cac:	430b      	orrs	r3, r1
 8002cae:	0f5a      	lsrs	r2, r3, #29
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	0752      	lsls	r2, r2, #29
 8002cb4:	08db      	lsrs	r3, r3, #3
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	e5fe      	b.n	80028b8 <__aeabi_dsub+0x314>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	4a01      	ldr	r2, [pc, #4]	; (8002cc4 <__aeabi_dsub+0x720>)
 8002cbe:	001c      	movs	r4, r3
 8002cc0:	e513      	b.n	80026ea <__aeabi_dsub+0x146>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	000007ff 	.word	0x000007ff

08002cc8 <__aeabi_dcmpun>:
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	0005      	movs	r5, r0
 8002ccc:	480c      	ldr	r0, [pc, #48]	; (8002d00 <__aeabi_dcmpun+0x38>)
 8002cce:	031c      	lsls	r4, r3, #12
 8002cd0:	0016      	movs	r6, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	030a      	lsls	r2, r1, #12
 8002cd6:	0049      	lsls	r1, r1, #1
 8002cd8:	0b12      	lsrs	r2, r2, #12
 8002cda:	0d49      	lsrs	r1, r1, #21
 8002cdc:	0b24      	lsrs	r4, r4, #12
 8002cde:	0d5b      	lsrs	r3, r3, #21
 8002ce0:	4281      	cmp	r1, r0
 8002ce2:	d008      	beq.n	8002cf6 <__aeabi_dcmpun+0x2e>
 8002ce4:	4a06      	ldr	r2, [pc, #24]	; (8002d00 <__aeabi_dcmpun+0x38>)
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d103      	bne.n	8002cf4 <__aeabi_dcmpun+0x2c>
 8002cec:	0020      	movs	r0, r4
 8002cee:	4330      	orrs	r0, r6
 8002cf0:	1e43      	subs	r3, r0, #1
 8002cf2:	4198      	sbcs	r0, r3
 8002cf4:	bd70      	pop	{r4, r5, r6, pc}
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	432a      	orrs	r2, r5
 8002cfa:	d1fb      	bne.n	8002cf4 <__aeabi_dcmpun+0x2c>
 8002cfc:	e7f2      	b.n	8002ce4 <__aeabi_dcmpun+0x1c>
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	000007ff 	.word	0x000007ff

08002d04 <__aeabi_d2iz>:
 8002d04:	000a      	movs	r2, r1
 8002d06:	b530      	push	{r4, r5, lr}
 8002d08:	4c13      	ldr	r4, [pc, #76]	; (8002d58 <__aeabi_d2iz+0x54>)
 8002d0a:	0053      	lsls	r3, r2, #1
 8002d0c:	0309      	lsls	r1, r1, #12
 8002d0e:	0005      	movs	r5, r0
 8002d10:	0b09      	lsrs	r1, r1, #12
 8002d12:	2000      	movs	r0, #0
 8002d14:	0d5b      	lsrs	r3, r3, #21
 8002d16:	0fd2      	lsrs	r2, r2, #31
 8002d18:	42a3      	cmp	r3, r4
 8002d1a:	dd04      	ble.n	8002d26 <__aeabi_d2iz+0x22>
 8002d1c:	480f      	ldr	r0, [pc, #60]	; (8002d5c <__aeabi_d2iz+0x58>)
 8002d1e:	4283      	cmp	r3, r0
 8002d20:	dd02      	ble.n	8002d28 <__aeabi_d2iz+0x24>
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <__aeabi_d2iz+0x5c>)
 8002d24:	18d0      	adds	r0, r2, r3
 8002d26:	bd30      	pop	{r4, r5, pc}
 8002d28:	2080      	movs	r0, #128	; 0x80
 8002d2a:	0340      	lsls	r0, r0, #13
 8002d2c:	4301      	orrs	r1, r0
 8002d2e:	480d      	ldr	r0, [pc, #52]	; (8002d64 <__aeabi_d2iz+0x60>)
 8002d30:	1ac0      	subs	r0, r0, r3
 8002d32:	281f      	cmp	r0, #31
 8002d34:	dd08      	ble.n	8002d48 <__aeabi_d2iz+0x44>
 8002d36:	480c      	ldr	r0, [pc, #48]	; (8002d68 <__aeabi_d2iz+0x64>)
 8002d38:	1ac3      	subs	r3, r0, r3
 8002d3a:	40d9      	lsrs	r1, r3
 8002d3c:	000b      	movs	r3, r1
 8002d3e:	4258      	negs	r0, r3
 8002d40:	2a00      	cmp	r2, #0
 8002d42:	d1f0      	bne.n	8002d26 <__aeabi_d2iz+0x22>
 8002d44:	0018      	movs	r0, r3
 8002d46:	e7ee      	b.n	8002d26 <__aeabi_d2iz+0x22>
 8002d48:	4c08      	ldr	r4, [pc, #32]	; (8002d6c <__aeabi_d2iz+0x68>)
 8002d4a:	40c5      	lsrs	r5, r0
 8002d4c:	46a4      	mov	ip, r4
 8002d4e:	4463      	add	r3, ip
 8002d50:	4099      	lsls	r1, r3
 8002d52:	000b      	movs	r3, r1
 8002d54:	432b      	orrs	r3, r5
 8002d56:	e7f2      	b.n	8002d3e <__aeabi_d2iz+0x3a>
 8002d58:	000003fe 	.word	0x000003fe
 8002d5c:	0000041d 	.word	0x0000041d
 8002d60:	7fffffff 	.word	0x7fffffff
 8002d64:	00000433 	.word	0x00000433
 8002d68:	00000413 	.word	0x00000413
 8002d6c:	fffffbed 	.word	0xfffffbed

08002d70 <__aeabi_i2d>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d016      	beq.n	8002da4 <__aeabi_i2d+0x34>
 8002d76:	17c3      	asrs	r3, r0, #31
 8002d78:	18c5      	adds	r5, r0, r3
 8002d7a:	405d      	eors	r5, r3
 8002d7c:	0fc4      	lsrs	r4, r0, #31
 8002d7e:	0028      	movs	r0, r5
 8002d80:	f000 f91c 	bl	8002fbc <__clzsi2>
 8002d84:	4a11      	ldr	r2, [pc, #68]	; (8002dcc <__aeabi_i2d+0x5c>)
 8002d86:	1a12      	subs	r2, r2, r0
 8002d88:	280a      	cmp	r0, #10
 8002d8a:	dc16      	bgt.n	8002dba <__aeabi_i2d+0x4a>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	002e      	movs	r6, r5
 8002d90:	3315      	adds	r3, #21
 8002d92:	409e      	lsls	r6, r3
 8002d94:	230b      	movs	r3, #11
 8002d96:	1a18      	subs	r0, r3, r0
 8002d98:	40c5      	lsrs	r5, r0
 8002d9a:	0552      	lsls	r2, r2, #21
 8002d9c:	032d      	lsls	r5, r5, #12
 8002d9e:	0b2d      	lsrs	r5, r5, #12
 8002da0:	0d53      	lsrs	r3, r2, #21
 8002da2:	e003      	b.n	8002dac <__aeabi_i2d+0x3c>
 8002da4:	2400      	movs	r4, #0
 8002da6:	2300      	movs	r3, #0
 8002da8:	2500      	movs	r5, #0
 8002daa:	2600      	movs	r6, #0
 8002dac:	051b      	lsls	r3, r3, #20
 8002dae:	432b      	orrs	r3, r5
 8002db0:	07e4      	lsls	r4, r4, #31
 8002db2:	4323      	orrs	r3, r4
 8002db4:	0030      	movs	r0, r6
 8002db6:	0019      	movs	r1, r3
 8002db8:	bd70      	pop	{r4, r5, r6, pc}
 8002dba:	380b      	subs	r0, #11
 8002dbc:	4085      	lsls	r5, r0
 8002dbe:	0552      	lsls	r2, r2, #21
 8002dc0:	032d      	lsls	r5, r5, #12
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	0b2d      	lsrs	r5, r5, #12
 8002dc6:	0d53      	lsrs	r3, r2, #21
 8002dc8:	e7f0      	b.n	8002dac <__aeabi_i2d+0x3c>
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	0000041e 	.word	0x0000041e

08002dd0 <__aeabi_ui2d>:
 8002dd0:	b510      	push	{r4, lr}
 8002dd2:	1e04      	subs	r4, r0, #0
 8002dd4:	d010      	beq.n	8002df8 <__aeabi_ui2d+0x28>
 8002dd6:	f000 f8f1 	bl	8002fbc <__clzsi2>
 8002dda:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <__aeabi_ui2d+0x48>)
 8002ddc:	1a1b      	subs	r3, r3, r0
 8002dde:	280a      	cmp	r0, #10
 8002de0:	dc11      	bgt.n	8002e06 <__aeabi_ui2d+0x36>
 8002de2:	220b      	movs	r2, #11
 8002de4:	0021      	movs	r1, r4
 8002de6:	1a12      	subs	r2, r2, r0
 8002de8:	40d1      	lsrs	r1, r2
 8002dea:	3015      	adds	r0, #21
 8002dec:	030a      	lsls	r2, r1, #12
 8002dee:	055b      	lsls	r3, r3, #21
 8002df0:	4084      	lsls	r4, r0
 8002df2:	0b12      	lsrs	r2, r2, #12
 8002df4:	0d5b      	lsrs	r3, r3, #21
 8002df6:	e001      	b.n	8002dfc <__aeabi_ui2d+0x2c>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	051b      	lsls	r3, r3, #20
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	0020      	movs	r0, r4
 8002e02:	0019      	movs	r1, r3
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	0022      	movs	r2, r4
 8002e08:	380b      	subs	r0, #11
 8002e0a:	4082      	lsls	r2, r0
 8002e0c:	055b      	lsls	r3, r3, #21
 8002e0e:	0312      	lsls	r2, r2, #12
 8002e10:	2400      	movs	r4, #0
 8002e12:	0b12      	lsrs	r2, r2, #12
 8002e14:	0d5b      	lsrs	r3, r3, #21
 8002e16:	e7f1      	b.n	8002dfc <__aeabi_ui2d+0x2c>
 8002e18:	0000041e 	.word	0x0000041e

08002e1c <__aeabi_f2d>:
 8002e1c:	b570      	push	{r4, r5, r6, lr}
 8002e1e:	0043      	lsls	r3, r0, #1
 8002e20:	0246      	lsls	r6, r0, #9
 8002e22:	0fc4      	lsrs	r4, r0, #31
 8002e24:	20fe      	movs	r0, #254	; 0xfe
 8002e26:	0e1b      	lsrs	r3, r3, #24
 8002e28:	1c59      	adds	r1, r3, #1
 8002e2a:	0a75      	lsrs	r5, r6, #9
 8002e2c:	4208      	tst	r0, r1
 8002e2e:	d00c      	beq.n	8002e4a <__aeabi_f2d+0x2e>
 8002e30:	22e0      	movs	r2, #224	; 0xe0
 8002e32:	0092      	lsls	r2, r2, #2
 8002e34:	4694      	mov	ip, r2
 8002e36:	076d      	lsls	r5, r5, #29
 8002e38:	0b36      	lsrs	r6, r6, #12
 8002e3a:	4463      	add	r3, ip
 8002e3c:	051b      	lsls	r3, r3, #20
 8002e3e:	4333      	orrs	r3, r6
 8002e40:	07e4      	lsls	r4, r4, #31
 8002e42:	4323      	orrs	r3, r4
 8002e44:	0028      	movs	r0, r5
 8002e46:	0019      	movs	r1, r3
 8002e48:	bd70      	pop	{r4, r5, r6, pc}
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d114      	bne.n	8002e78 <__aeabi_f2d+0x5c>
 8002e4e:	2d00      	cmp	r5, #0
 8002e50:	d01b      	beq.n	8002e8a <__aeabi_f2d+0x6e>
 8002e52:	0028      	movs	r0, r5
 8002e54:	f000 f8b2 	bl	8002fbc <__clzsi2>
 8002e58:	280a      	cmp	r0, #10
 8002e5a:	dc1c      	bgt.n	8002e96 <__aeabi_f2d+0x7a>
 8002e5c:	230b      	movs	r3, #11
 8002e5e:	002e      	movs	r6, r5
 8002e60:	1a1b      	subs	r3, r3, r0
 8002e62:	40de      	lsrs	r6, r3
 8002e64:	0003      	movs	r3, r0
 8002e66:	3315      	adds	r3, #21
 8002e68:	409d      	lsls	r5, r3
 8002e6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <__aeabi_f2d+0x88>)
 8002e6c:	0336      	lsls	r6, r6, #12
 8002e6e:	1a12      	subs	r2, r2, r0
 8002e70:	0552      	lsls	r2, r2, #21
 8002e72:	0b36      	lsrs	r6, r6, #12
 8002e74:	0d53      	lsrs	r3, r2, #21
 8002e76:	e7e1      	b.n	8002e3c <__aeabi_f2d+0x20>
 8002e78:	2d00      	cmp	r5, #0
 8002e7a:	d009      	beq.n	8002e90 <__aeabi_f2d+0x74>
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	0b36      	lsrs	r6, r6, #12
 8002e80:	0312      	lsls	r2, r2, #12
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <__aeabi_f2d+0x8c>)
 8002e84:	076d      	lsls	r5, r5, #29
 8002e86:	4316      	orrs	r6, r2
 8002e88:	e7d8      	b.n	8002e3c <__aeabi_f2d+0x20>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2600      	movs	r6, #0
 8002e8e:	e7d5      	b.n	8002e3c <__aeabi_f2d+0x20>
 8002e90:	2600      	movs	r6, #0
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <__aeabi_f2d+0x8c>)
 8002e94:	e7d2      	b.n	8002e3c <__aeabi_f2d+0x20>
 8002e96:	0003      	movs	r3, r0
 8002e98:	3b0b      	subs	r3, #11
 8002e9a:	409d      	lsls	r5, r3
 8002e9c:	002e      	movs	r6, r5
 8002e9e:	2500      	movs	r5, #0
 8002ea0:	e7e3      	b.n	8002e6a <__aeabi_f2d+0x4e>
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	00000389 	.word	0x00000389
 8002ea8:	000007ff 	.word	0x000007ff

08002eac <__aeabi_d2f>:
 8002eac:	0002      	movs	r2, r0
 8002eae:	004b      	lsls	r3, r1, #1
 8002eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb2:	0d5b      	lsrs	r3, r3, #21
 8002eb4:	030c      	lsls	r4, r1, #12
 8002eb6:	4e3d      	ldr	r6, [pc, #244]	; (8002fac <__aeabi_d2f+0x100>)
 8002eb8:	0a64      	lsrs	r4, r4, #9
 8002eba:	0f40      	lsrs	r0, r0, #29
 8002ebc:	1c5f      	adds	r7, r3, #1
 8002ebe:	0fc9      	lsrs	r1, r1, #31
 8002ec0:	4304      	orrs	r4, r0
 8002ec2:	00d5      	lsls	r5, r2, #3
 8002ec4:	4237      	tst	r7, r6
 8002ec6:	d00a      	beq.n	8002ede <__aeabi_d2f+0x32>
 8002ec8:	4839      	ldr	r0, [pc, #228]	; (8002fb0 <__aeabi_d2f+0x104>)
 8002eca:	181e      	adds	r6, r3, r0
 8002ecc:	2efe      	cmp	r6, #254	; 0xfe
 8002ece:	dd16      	ble.n	8002efe <__aeabi_d2f+0x52>
 8002ed0:	20ff      	movs	r0, #255	; 0xff
 8002ed2:	2400      	movs	r4, #0
 8002ed4:	05c0      	lsls	r0, r0, #23
 8002ed6:	4320      	orrs	r0, r4
 8002ed8:	07c9      	lsls	r1, r1, #31
 8002eda:	4308      	orrs	r0, r1
 8002edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <__aeabi_d2f+0x44>
 8002ee2:	432c      	orrs	r4, r5
 8002ee4:	d026      	beq.n	8002f34 <__aeabi_d2f+0x88>
 8002ee6:	2205      	movs	r2, #5
 8002ee8:	0192      	lsls	r2, r2, #6
 8002eea:	0a54      	lsrs	r4, r2, #9
 8002eec:	b2d8      	uxtb	r0, r3
 8002eee:	e7f1      	b.n	8002ed4 <__aeabi_d2f+0x28>
 8002ef0:	4325      	orrs	r5, r4
 8002ef2:	d0ed      	beq.n	8002ed0 <__aeabi_d2f+0x24>
 8002ef4:	2080      	movs	r0, #128	; 0x80
 8002ef6:	03c0      	lsls	r0, r0, #15
 8002ef8:	4304      	orrs	r4, r0
 8002efa:	20ff      	movs	r0, #255	; 0xff
 8002efc:	e7ea      	b.n	8002ed4 <__aeabi_d2f+0x28>
 8002efe:	2e00      	cmp	r6, #0
 8002f00:	dd1b      	ble.n	8002f3a <__aeabi_d2f+0x8e>
 8002f02:	0192      	lsls	r2, r2, #6
 8002f04:	1e53      	subs	r3, r2, #1
 8002f06:	419a      	sbcs	r2, r3
 8002f08:	00e4      	lsls	r4, r4, #3
 8002f0a:	0f6d      	lsrs	r5, r5, #29
 8002f0c:	4322      	orrs	r2, r4
 8002f0e:	432a      	orrs	r2, r5
 8002f10:	0753      	lsls	r3, r2, #29
 8002f12:	d048      	beq.n	8002fa6 <__aeabi_d2f+0xfa>
 8002f14:	230f      	movs	r3, #15
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d000      	beq.n	8002f1e <__aeabi_d2f+0x72>
 8002f1c:	3204      	adds	r2, #4
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	04db      	lsls	r3, r3, #19
 8002f22:	4013      	ands	r3, r2
 8002f24:	d03f      	beq.n	8002fa6 <__aeabi_d2f+0xfa>
 8002f26:	1c70      	adds	r0, r6, #1
 8002f28:	2efe      	cmp	r6, #254	; 0xfe
 8002f2a:	d0d1      	beq.n	8002ed0 <__aeabi_d2f+0x24>
 8002f2c:	0192      	lsls	r2, r2, #6
 8002f2e:	0a54      	lsrs	r4, r2, #9
 8002f30:	b2c0      	uxtb	r0, r0
 8002f32:	e7cf      	b.n	8002ed4 <__aeabi_d2f+0x28>
 8002f34:	2000      	movs	r0, #0
 8002f36:	2400      	movs	r4, #0
 8002f38:	e7cc      	b.n	8002ed4 <__aeabi_d2f+0x28>
 8002f3a:	0032      	movs	r2, r6
 8002f3c:	3217      	adds	r2, #23
 8002f3e:	db22      	blt.n	8002f86 <__aeabi_d2f+0xda>
 8002f40:	2080      	movs	r0, #128	; 0x80
 8002f42:	0400      	lsls	r0, r0, #16
 8002f44:	4320      	orrs	r0, r4
 8002f46:	241e      	movs	r4, #30
 8002f48:	1ba4      	subs	r4, r4, r6
 8002f4a:	2c1f      	cmp	r4, #31
 8002f4c:	dd1d      	ble.n	8002f8a <__aeabi_d2f+0xde>
 8002f4e:	2202      	movs	r2, #2
 8002f50:	4252      	negs	r2, r2
 8002f52:	1b96      	subs	r6, r2, r6
 8002f54:	0002      	movs	r2, r0
 8002f56:	40f2      	lsrs	r2, r6
 8002f58:	0016      	movs	r6, r2
 8002f5a:	2c20      	cmp	r4, #32
 8002f5c:	d004      	beq.n	8002f68 <__aeabi_d2f+0xbc>
 8002f5e:	4a15      	ldr	r2, [pc, #84]	; (8002fb4 <__aeabi_d2f+0x108>)
 8002f60:	4694      	mov	ip, r2
 8002f62:	4463      	add	r3, ip
 8002f64:	4098      	lsls	r0, r3
 8002f66:	4305      	orrs	r5, r0
 8002f68:	002a      	movs	r2, r5
 8002f6a:	1e53      	subs	r3, r2, #1
 8002f6c:	419a      	sbcs	r2, r3
 8002f6e:	4332      	orrs	r2, r6
 8002f70:	2600      	movs	r6, #0
 8002f72:	0753      	lsls	r3, r2, #29
 8002f74:	d1ce      	bne.n	8002f14 <__aeabi_d2f+0x68>
 8002f76:	2480      	movs	r4, #128	; 0x80
 8002f78:	0013      	movs	r3, r2
 8002f7a:	04e4      	lsls	r4, r4, #19
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	4023      	ands	r3, r4
 8002f80:	4222      	tst	r2, r4
 8002f82:	d1d3      	bne.n	8002f2c <__aeabi_d2f+0x80>
 8002f84:	e7b0      	b.n	8002ee8 <__aeabi_d2f+0x3c>
 8002f86:	2300      	movs	r3, #0
 8002f88:	e7ad      	b.n	8002ee6 <__aeabi_d2f+0x3a>
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <__aeabi_d2f+0x10c>)
 8002f8c:	4694      	mov	ip, r2
 8002f8e:	002a      	movs	r2, r5
 8002f90:	40e2      	lsrs	r2, r4
 8002f92:	0014      	movs	r4, r2
 8002f94:	002a      	movs	r2, r5
 8002f96:	4463      	add	r3, ip
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	4098      	lsls	r0, r3
 8002f9c:	1e55      	subs	r5, r2, #1
 8002f9e:	41aa      	sbcs	r2, r5
 8002fa0:	4302      	orrs	r2, r0
 8002fa2:	4322      	orrs	r2, r4
 8002fa4:	e7e4      	b.n	8002f70 <__aeabi_d2f+0xc4>
 8002fa6:	0033      	movs	r3, r6
 8002fa8:	e79e      	b.n	8002ee8 <__aeabi_d2f+0x3c>
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	000007fe 	.word	0x000007fe
 8002fb0:	fffffc80 	.word	0xfffffc80
 8002fb4:	fffffca2 	.word	0xfffffca2
 8002fb8:	fffffc82 	.word	0xfffffc82

08002fbc <__clzsi2>:
 8002fbc:	211c      	movs	r1, #28
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	4298      	cmp	r0, r3
 8002fc4:	d301      	bcc.n	8002fca <__clzsi2+0xe>
 8002fc6:	0c00      	lsrs	r0, r0, #16
 8002fc8:	3910      	subs	r1, #16
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	4298      	cmp	r0, r3
 8002fce:	d301      	bcc.n	8002fd4 <__clzsi2+0x18>
 8002fd0:	0a00      	lsrs	r0, r0, #8
 8002fd2:	3908      	subs	r1, #8
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	4298      	cmp	r0, r3
 8002fd8:	d301      	bcc.n	8002fde <__clzsi2+0x22>
 8002fda:	0900      	lsrs	r0, r0, #4
 8002fdc:	3904      	subs	r1, #4
 8002fde:	a202      	add	r2, pc, #8	; (adr r2, 8002fe8 <__clzsi2+0x2c>)
 8002fe0:	5c10      	ldrb	r0, [r2, r0]
 8002fe2:	1840      	adds	r0, r0, r1
 8002fe4:	4770      	bx	lr
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	02020304 	.word	0x02020304
 8002fec:	01010101 	.word	0x01010101
	...

08002ff8 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8002ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffa:	001f      	movs	r7, r3
 8002ffc:	0014      	movs	r4, r2
 8002ffe:	b085      	sub	sp, #20
 8003000:	ab0a      	add	r3, sp, #40	; 0x28
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	0006      	movs	r6, r0
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003006:	18d3      	adds	r3, r2, r3
 8003008:	b29b      	uxth	r3, r3
 800300a:	9303      	str	r3, [sp, #12]
 800300c:	9a03      	ldr	r2, [sp, #12]
 800300e:	19cb      	adds	r3, r1, r7
 8003010:	9200      	str	r2, [sp, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	0022      	movs	r2, r4
{
 8003016:	000d      	movs	r5, r1
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003018:	f000 fb9c 	bl	8003754 <u8g2_IsIntersection>
 800301c:	2800      	cmp	r0, #0
 800301e:	d10b      	bne.n	8003038 <u8g2_DrawBox+0x40>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
 8003020:	b005      	add	sp, #20
 8003022:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8003024:	2300      	movs	r3, #0
 8003026:	0022      	movs	r2, r4
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	0029      	movs	r1, r5
 800302c:	003b      	movs	r3, r7
 800302e:	0030      	movs	r0, r6
 8003030:	f000 fb07 	bl	8003642 <u8g2_DrawHVLine>
    y++;    
 8003034:	3401      	adds	r4, #1
 8003036:	b2a4      	uxth	r4, r4
  while( h != 0 )
 8003038:	9b03      	ldr	r3, [sp, #12]
 800303a:	42a3      	cmp	r3, r4
 800303c:	d1f2      	bne.n	8003024 <u8g2_DrawBox+0x2c>
 800303e:	e7ef      	b.n	8003020 <u8g2_DrawBox+0x28>

08003040 <u8g2_send_buffer>:
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
 8003040:	0003      	movs	r3, r0
{
 8003042:	b5f0      	push	{r4, r5, r6, r7, lr}
  src_max = u8g2->tile_buf_height;
 8003044:	3338      	adds	r3, #56	; 0x38
 8003046:	781b      	ldrb	r3, [r3, #0]
{
 8003048:	b085      	sub	sp, #20
  src_max = u8g2->tile_buf_height;
 800304a:	9302      	str	r3, [sp, #8]
  dest_row = u8g2->tile_curr_row;
 800304c:	0003      	movs	r3, r0
{
 800304e:	0004      	movs	r4, r0
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003050:	2600      	movs	r6, #0
  dest_row = u8g2->tile_curr_row;
 8003052:	3339      	adds	r3, #57	; 0x39
 8003054:	781f      	ldrb	r7, [r3, #0]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003056:	6803      	ldr	r3, [r0, #0]
 8003058:	7c5b      	ldrb	r3, [r3, #17]
 800305a:	9303      	str	r3, [sp, #12]
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800305c:	6823      	ldr	r3, [r4, #0]
  ptr += offset;
 800305e:	6b60      	ldr	r0, [r4, #52]	; 0x34
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003060:	7c1b      	ldrb	r3, [r3, #16]
 8003062:	b2f5      	uxtb	r5, r6
  offset *= 8;
 8003064:	0019      	movs	r1, r3
 8003066:	4371      	muls	r1, r6
 8003068:	00c9      	lsls	r1, r1, #3
  ptr += offset;
 800306a:	b289      	uxth	r1, r1
 800306c:	1841      	adds	r1, r0, r1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800306e:	197a      	adds	r2, r7, r5
 8003070:	9100      	str	r1, [sp, #0]
 8003072:	0020      	movs	r0, r4
 8003074:	2100      	movs	r1, #0
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	f000 fe2a 	bl	8003cd0 <u8x8_DrawTile>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 800307c:	3501      	adds	r5, #1
 800307e:	9b02      	ldr	r3, [sp, #8]
 8003080:	b2ed      	uxtb	r5, r5
 8003082:	42ab      	cmp	r3, r5
 8003084:	d905      	bls.n	8003092 <u8g2_send_buffer+0x52>
 8003086:	3601      	adds	r6, #1
 8003088:	19bb      	adds	r3, r7, r6
 800308a:	9a03      	ldr	r2, [sp, #12]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	429a      	cmp	r2, r3
 8003090:	d8e4      	bhi.n	800305c <u8g2_send_buffer+0x1c>
}
 8003092:	b005      	add	sp, #20
 8003094:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003096 <u8g2_ClearBuffer>:
  cnt *= u8g2->tile_buf_height;
 8003096:	0002      	movs	r2, r0
{
 8003098:	b510      	push	{r4, lr}
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800309a:	6803      	ldr	r3, [r0, #0]
  cnt *= u8g2->tile_buf_height;
 800309c:	3238      	adds	r2, #56	; 0x38
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800309e:	7c1b      	ldrb	r3, [r3, #16]
  cnt *= u8g2->tile_buf_height;
 80030a0:	7812      	ldrb	r2, [r2, #0]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80030a2:	2100      	movs	r1, #0
}
 80030a4:	435a      	muls	r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80030a6:	6b40      	ldr	r0, [r0, #52]	; 0x34
  cnt *= 8;
 80030a8:	00d2      	lsls	r2, r2, #3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80030aa:	f003 fdd6 	bl	8006c5a <memset>
}
 80030ae:	bd10      	pop	{r4, pc}

080030b0 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80030b0:	b510      	push	{r4, lr}
 80030b2:	0004      	movs	r4, r0
  u8g2_send_buffer(u8g2);
 80030b4:	f7ff ffc4 	bl	8003040 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80030b8:	0020      	movs	r0, r4
 80030ba:	f000 fe2b 	bl	8003d14 <u8x8_RefreshDisplay>
}
 80030be:	bd10      	pop	{r4, pc}

080030c0 <u8g2_m_16_8_1>:
#ifdef U8G2_USE_DYNAMIC_ALLOC
*page_cnt = 8;
return 0;
#else
static uint8_t buf[1024];
*page_cnt = 8;
 80030c0:	2308      	movs	r3, #8
 80030c2:	7003      	strb	r3, [r0, #0]
return buf;
#endif
}
 80030c4:	4800      	ldr	r0, [pc, #0]	; (80030c8 <u8g2_m_16_8_1+0x8>)
 80030c6:	4770      	bx	lr
 80030c8:	200002cc 	.word	0x200002cc

080030cc <u8g2_Setup_ssd1306_i2c_128x64_noname_1>:
//  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
//  buf = u8g2_m_16_4_f(&tile_buf_height);
//  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
//}
void u8g2_Setup_ssd1306_i2c_128x64_noname_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80030cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_1(&tile_buf_height);
 80030ce:	260f      	movs	r6, #15
{
 80030d0:	000d      	movs	r5, r1
  buf = u8g2_m_16_8_1(&tile_buf_height);
 80030d2:	446e      	add	r6, sp
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80030d4:	4908      	ldr	r1, [pc, #32]	; (80030f8 <u8g2_Setup_ssd1306_i2c_128x64_noname_1+0x2c>)
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	0013      	movs	r3, r2
 80030da:	4a08      	ldr	r2, [pc, #32]	; (80030fc <u8g2_Setup_ssd1306_i2c_128x64_noname_1+0x30>)
{
 80030dc:	0004      	movs	r4, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80030de:	f000 fe3b 	bl	8003d58 <u8x8_Setup>
  buf = u8g2_m_16_8_1(&tile_buf_height);
 80030e2:	0030      	movs	r0, r6
 80030e4:	f7ff ffec 	bl	80030c0 <u8g2_m_16_8_1>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80030e8:	7832      	ldrb	r2, [r6, #0]
  buf = u8g2_m_16_8_1(&tile_buf_height);
 80030ea:	0001      	movs	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80030ec:	9500      	str	r5, [sp, #0]
 80030ee:	0020      	movs	r0, r4
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <u8g2_Setup_ssd1306_i2c_128x64_noname_1+0x34>)
 80030f2:	f000 fc1b 	bl	800392c <u8g2_SetupBuffer>
}
 80030f6:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80030f8:	08003c2d 	.word	0x08003c2d
 80030fc:	08003a95 	.word	0x08003a95
 8003100:	08003787 	.word	0x08003787

08003104 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8003104:	1843      	adds	r3, r0, r1
    pos = u8x8_pgm_read( font );
 8003106:	5c40      	ldrb	r0, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 8003108:	785b      	ldrb	r3, [r3, #1]
    pos <<= 8;
 800310a:	0200      	lsls	r0, r0, #8
    pos += u8x8_pgm_read( font);
 800310c:	18c0      	adds	r0, r0, r3
    return pos;
 800310e:	b280      	uxth	r0, r0
}
 8003110:	4770      	bx	lr

08003112 <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 8003112:	2000      	movs	r0, #0
 8003114:	4770      	bx	lr

08003116 <u8g2_read_font_info>:
{
 8003116:	b570      	push	{r4, r5, r6, lr}
  return u8x8_pgm_read( font );  
 8003118:	780b      	ldrb	r3, [r1, #0]
{
 800311a:	000d      	movs	r5, r1
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800311c:	7003      	strb	r3, [r0, #0]
  return u8x8_pgm_read( font );  
 800311e:	784b      	ldrb	r3, [r1, #1]
{
 8003120:	0004      	movs	r4, r0
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8003122:	7043      	strb	r3, [r0, #1]
  return u8x8_pgm_read( font );  
 8003124:	788b      	ldrb	r3, [r1, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8003126:	7083      	strb	r3, [r0, #2]
  return u8x8_pgm_read( font );  
 8003128:	78cb      	ldrb	r3, [r1, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800312a:	70c3      	strb	r3, [r0, #3]
  return u8x8_pgm_read( font );  
 800312c:	790b      	ldrb	r3, [r1, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800312e:	7103      	strb	r3, [r0, #4]
  return u8x8_pgm_read( font );  
 8003130:	794b      	ldrb	r3, [r1, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8003132:	7143      	strb	r3, [r0, #5]
  return u8x8_pgm_read( font );  
 8003134:	798b      	ldrb	r3, [r1, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8003136:	7183      	strb	r3, [r0, #6]
  return u8x8_pgm_read( font );  
 8003138:	79cb      	ldrb	r3, [r1, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800313a:	71c3      	strb	r3, [r0, #7]
  return u8x8_pgm_read( font );  
 800313c:	7a0b      	ldrb	r3, [r1, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800313e:	7203      	strb	r3, [r0, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8003140:	7a4b      	ldrb	r3, [r1, #9]
 8003142:	7243      	strb	r3, [r0, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8003144:	7a8b      	ldrb	r3, [r1, #10]
 8003146:	7283      	strb	r3, [r0, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8003148:	7acb      	ldrb	r3, [r1, #11]
 800314a:	72c3      	strb	r3, [r0, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800314c:	7b0b      	ldrb	r3, [r1, #12]
 800314e:	7303      	strb	r3, [r0, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8003150:	7b4b      	ldrb	r3, [r1, #13]
 8003152:	7343      	strb	r3, [r0, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8003154:	7b8b      	ldrb	r3, [r1, #14]
 8003156:	7383      	strb	r3, [r0, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8003158:	7bcb      	ldrb	r3, [r1, #15]
 800315a:	73c3      	strb	r3, [r0, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800315c:	7c0b      	ldrb	r3, [r1, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800315e:	2111      	movs	r1, #17
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8003160:	7403      	strb	r3, [r0, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8003162:	0028      	movs	r0, r5
 8003164:	f7ff ffce 	bl	8003104 <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8003168:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800316a:	8260      	strh	r0, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800316c:	0028      	movs	r0, r5
 800316e:	f7ff ffc9 	bl	8003104 <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8003172:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8003174:	82a0      	strh	r0, [r4, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8003176:	0028      	movs	r0, r5
 8003178:	f7ff ffc4 	bl	8003104 <u8g2_font_get_word>
 800317c:	82e0      	strh	r0, [r4, #22]
}
 800317e:	bd70      	pop	{r4, r5, r6, pc}

08003180 <u8g2_font_decode_get_unsigned_bits>:
{
 8003180:	b570      	push	{r4, r5, r6, lr}
  val = u8x8_pgm_read( f->decode_ptr );  
 8003182:	6804      	ldr	r4, [r0, #0]
  uint8_t bit_pos = f->decode_bit_pos;
 8003184:	7b06      	ldrb	r6, [r0, #12]
  val >>= bit_pos;
 8003186:	7825      	ldrb	r5, [r4, #0]
  bit_pos_plus_cnt += cnt;
 8003188:	1873      	adds	r3, r6, r1
  val >>= bit_pos;
 800318a:	4135      	asrs	r5, r6
  bit_pos_plus_cnt += cnt;
 800318c:	b2db      	uxtb	r3, r3
{
 800318e:	0002      	movs	r2, r0
  val >>= bit_pos;
 8003190:	b2e8      	uxtb	r0, r5
  if ( bit_pos_plus_cnt >= 8 )
 8003192:	2b07      	cmp	r3, #7
 8003194:	d90a      	bls.n	80031ac <u8g2_font_decode_get_unsigned_bits+0x2c>
    f->decode_ptr++;
 8003196:	1c60      	adds	r0, r4, #1
 8003198:	6010      	str	r0, [r2, #0]
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800319a:	7860      	ldrb	r0, [r4, #1]
    s -= bit_pos;
 800319c:	2408      	movs	r4, #8
 800319e:	1ba4      	subs	r4, r4, r6
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80031a0:	b2e4      	uxtb	r4, r4
 80031a2:	40a0      	lsls	r0, r4
    bit_pos_plus_cnt -= 8;
 80031a4:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80031a6:	4328      	orrs	r0, r5
 80031a8:	b2c0      	uxtb	r0, r0
    bit_pos_plus_cnt -= 8;
 80031aa:	b2db      	uxtb	r3, r3
  f->decode_bit_pos = bit_pos_plus_cnt;
 80031ac:	7313      	strb	r3, [r2, #12]
  val &= (1U<<cnt)-1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	425b      	negs	r3, r3
 80031b2:	408b      	lsls	r3, r1
  return val;
 80031b4:	4398      	bics	r0, r3
}
 80031b6:	bd70      	pop	{r4, r5, r6, pc}

080031b8 <u8g2_font_setup_decode>:
{
 80031b8:	b570      	push	{r4, r5, r6, lr}
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80031ba:	0005      	movs	r5, r0
  decode->decode_bit_pos = 0;
 80031bc:	2300      	movs	r3, #0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80031be:	3560      	adds	r5, #96	; 0x60
  decode->decode_ptr = glyph_data;
 80031c0:	6601      	str	r1, [r0, #96]	; 0x60
  decode->decode_bit_pos = 0;
 80031c2:	732b      	strb	r3, [r5, #12]
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80031c4:	0003      	movs	r3, r0
{
 80031c6:	0004      	movs	r4, r0
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80031c8:	3378      	adds	r3, #120	; 0x78
 80031ca:	0028      	movs	r0, r5
 80031cc:	7819      	ldrb	r1, [r3, #0]
 80031ce:	f7ff ffd7 	bl	8003180 <u8g2_font_decode_get_unsigned_bits>
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80031d2:	0023      	movs	r3, r4
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80031d4:	72a8      	strb	r0, [r5, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80031d6:	3379      	adds	r3, #121	; 0x79
 80031d8:	0028      	movs	r0, r5
 80031da:	7819      	ldrb	r1, [r3, #0]
 80031dc:	f7ff ffd0 	bl	8003180 <u8g2_font_decode_get_unsigned_bits>
  decode->fg_color = u8g2->draw_color;
 80031e0:	3492      	adds	r4, #146	; 0x92
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80031e2:	72e8      	strb	r0, [r5, #11]
  decode->fg_color = u8g2->draw_color;
 80031e4:	7823      	ldrb	r3, [r4, #0]
 80031e6:	73ab      	strb	r3, [r5, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80031e8:	425a      	negs	r2, r3
 80031ea:	4153      	adcs	r3, r2
 80031ec:	73eb      	strb	r3, [r5, #15]
}
 80031ee:	bd70      	pop	{r4, r5, r6, pc}

080031f0 <u8g2_font_decode_get_signed_bits>:
{
 80031f0:	b510      	push	{r4, lr}
 80031f2:	000c      	movs	r4, r1
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80031f4:	f7ff ffc4 	bl	8003180 <u8g2_font_decode_get_unsigned_bits>
  d <<= cnt;
 80031f8:	2301      	movs	r3, #1
  cnt--;
 80031fa:	3c01      	subs	r4, #1
  d <<= cnt;
 80031fc:	b2e4      	uxtb	r4, r4
 80031fe:	40a3      	lsls	r3, r4
  v -= d;
 8003200:	1ac0      	subs	r0, r0, r3
  return v;
 8003202:	b240      	sxtb	r0, r0
}
 8003204:	bd10      	pop	{r4, pc}

08003206 <u8g2_add_vector_y>:
  switch(dir)
 8003206:	2b01      	cmp	r3, #1
 8003208:	d006      	beq.n	8003218 <u8g2_add_vector_y+0x12>
 800320a:	2b02      	cmp	r3, #2
 800320c:	d006      	beq.n	800321c <u8g2_add_vector_y+0x16>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <u8g2_add_vector_y+0x1a>
      dy += y;
 8003212:	1880      	adds	r0, r0, r2
      dy -= x;
 8003214:	b280      	uxth	r0, r0
}
 8003216:	4770      	bx	lr
      dy += x;
 8003218:	1840      	adds	r0, r0, r1
 800321a:	e7fb      	b.n	8003214 <u8g2_add_vector_y+0xe>
      dy -= y;
 800321c:	1a80      	subs	r0, r0, r2
 800321e:	e7f9      	b.n	8003214 <u8g2_add_vector_y+0xe>
      dy -= x;
 8003220:	1a40      	subs	r0, r0, r1
 8003222:	e7f7      	b.n	8003214 <u8g2_add_vector_y+0xe>

08003224 <u8g2_add_vector_x>:
  switch(dir)
 8003224:	2b01      	cmp	r3, #1
 8003226:	d006      	beq.n	8003236 <u8g2_add_vector_x+0x12>
 8003228:	2b02      	cmp	r3, #2
 800322a:	d006      	beq.n	800323a <u8g2_add_vector_x+0x16>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <u8g2_add_vector_x+0x1a>
      dx += x;
 8003230:	1840      	adds	r0, r0, r1
      dx += y;
 8003232:	b280      	uxth	r0, r0
}
 8003234:	4770      	bx	lr
      dx -= y;
 8003236:	1a80      	subs	r0, r0, r2
 8003238:	e7fb      	b.n	8003232 <u8g2_add_vector_x+0xe>
      dx -= x;
 800323a:	1a40      	subs	r0, r0, r1
 800323c:	e7f9      	b.n	8003232 <u8g2_add_vector_x+0xe>
      dx += y;
 800323e:	1880      	adds	r0, r0, r2
 8003240:	e7f7      	b.n	8003232 <u8g2_add_vector_x+0xe>

08003242 <u8g2_font_decode_len>:
  lx = decode->x;
 8003242:	0003      	movs	r3, r0
{
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	0005      	movs	r5, r0
 8003248:	b08d      	sub	sp, #52	; 0x34
 800324a:	9102      	str	r1, [sp, #8]
 800324c:	920b      	str	r2, [sp, #44]	; 0x2c
  lx = decode->x;
 800324e:	3360      	adds	r3, #96	; 0x60
 8003250:	7a1a      	ldrb	r2, [r3, #8]
 8003252:	9203      	str	r2, [sp, #12]
  ly = decode->y;
 8003254:	7a5b      	ldrb	r3, [r3, #9]
 8003256:	9305      	str	r3, [sp, #20]
    rem = decode->glyph_width;
 8003258:	002c      	movs	r4, r5
 800325a:	3460      	adds	r4, #96	; 0x60
 800325c:	7aa3      	ldrb	r3, [r4, #10]
    rem -= lx;
 800325e:	9a03      	ldr	r2, [sp, #12]
    rem = decode->glyph_width;
 8003260:	9308      	str	r3, [sp, #32]
    rem -= lx;
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	b2db      	uxtb	r3, r3
 8003266:	9306      	str	r3, [sp, #24]
    if ( cnt < rem )
 8003268:	466b      	mov	r3, sp
 800326a:	9a02      	ldr	r2, [sp, #8]
 800326c:	9906      	ldr	r1, [sp, #24]
 800326e:	7a1b      	ldrb	r3, [r3, #8]
 8003270:	428a      	cmp	r2, r1
 8003272:	d901      	bls.n	8003278 <u8g2_font_decode_len+0x36>
 8003274:	466b      	mov	r3, sp
 8003276:	7e1b      	ldrb	r3, [r3, #24]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	9307      	str	r3, [sp, #28]
    y = decode->target_y;
 800327c:	88e3      	ldrh	r3, [r4, #6]
    x = decode->target_x;
 800327e:	88a0      	ldrh	r0, [r4, #4]
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8003280:	260c      	movs	r6, #12
    y = decode->target_y;
 8003282:	930a      	str	r3, [sp, #40]	; 0x28
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8003284:	466b      	mov	r3, sp
 8003286:	579e      	ldrsb	r6, [r3, r6]
 8003288:	7d1b      	ldrb	r3, [r3, #20]
 800328a:	0031      	movs	r1, r6
 800328c:	b25b      	sxtb	r3, r3
 800328e:	9304      	str	r3, [sp, #16]
 8003290:	7c27      	ldrb	r7, [r4, #16]
 8003292:	9a04      	ldr	r2, [sp, #16]
 8003294:	003b      	movs	r3, r7
 8003296:	f7ff ffc5 	bl	8003224 <u8g2_add_vector_x>
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800329a:	003b      	movs	r3, r7
 800329c:	9a04      	ldr	r2, [sp, #16]
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800329e:	9009      	str	r0, [sp, #36]	; 0x24
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80032a0:	0031      	movs	r1, r6
 80032a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80032a4:	f7ff ffaf 	bl	8003206 <u8g2_add_vector_y>
    if ( is_foreground )
 80032a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80032aa:	0002      	movs	r2, r0
    if ( is_foreground )
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01d      	beq.n	80032ec <u8g2_font_decode_len+0xaa>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80032b0:	7ba1      	ldrb	r1, [r4, #14]
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80032b2:	002b      	movs	r3, r5
 80032b4:	3392      	adds	r3, #146	; 0x92
 80032b6:	7019      	strb	r1, [r3, #0]
      u8g2_DrawHVLine(u8g2, 
 80032b8:	466b      	mov	r3, sp
 80032ba:	0028      	movs	r0, r5
 80032bc:	8b9b      	ldrh	r3, [r3, #28]
 80032be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80032c0:	9700      	str	r7, [sp, #0]
 80032c2:	f000 f9be 	bl	8003642 <u8g2_DrawHVLine>
    if ( cnt < rem )
 80032c6:	9b02      	ldr	r3, [sp, #8]
 80032c8:	9903      	ldr	r1, [sp, #12]
 80032ca:	469c      	mov	ip, r3
 80032cc:	9a06      	ldr	r2, [sp, #24]
 80032ce:	4461      	add	r1, ip
 80032d0:	b2c9      	uxtb	r1, r1
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d30f      	bcc.n	80032f6 <u8g2_font_decode_len+0xb4>
    cnt -= rem;
 80032d6:	9b08      	ldr	r3, [sp, #32]
 80032d8:	1ac9      	subs	r1, r1, r3
 80032da:	b2cb      	uxtb	r3, r1
 80032dc:	9302      	str	r3, [sp, #8]
    ly++;
 80032de:	9b05      	ldr	r3, [sp, #20]
 80032e0:	3301      	adds	r3, #1
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	9305      	str	r3, [sp, #20]
    lx = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	9303      	str	r3, [sp, #12]
    rem = decode->glyph_width;
 80032ea:	e7b5      	b.n	8003258 <u8g2_font_decode_len+0x16>
    else if ( decode->is_transparent == 0 )    
 80032ec:	7b63      	ldrb	r3, [r4, #13]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1e9      	bne.n	80032c6 <u8g2_font_decode_len+0x84>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80032f2:	7be1      	ldrb	r1, [r4, #15]
 80032f4:	e7dd      	b.n	80032b2 <u8g2_font_decode_len+0x70>
  decode->x = lx;
 80032f6:	0028      	movs	r0, r5
  decode->y = ly;  
 80032f8:	9b04      	ldr	r3, [sp, #16]
  decode->x = lx;
 80032fa:	3060      	adds	r0, #96	; 0x60
 80032fc:	7201      	strb	r1, [r0, #8]
  decode->y = ly;  
 80032fe:	7243      	strb	r3, [r0, #9]
}
 8003300:	b00d      	add	sp, #52	; 0x34
 8003302:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003304 <u8g2_font_decode_glyph>:
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	0004      	movs	r4, r0
 8003308:	b089      	sub	sp, #36	; 0x24
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800330a:	0007      	movs	r7, r0
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800330c:	f7ff ff54 	bl	80031b8 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003310:	0023      	movs	r3, r4
 8003312:	336b      	adds	r3, #107	; 0x6b
 8003314:	781b      	ldrb	r3, [r3, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003316:	3760      	adds	r7, #96	; 0x60
  h = u8g2->font_decode.glyph_height;
 8003318:	b25b      	sxtb	r3, r3
 800331a:	9302      	str	r3, [sp, #8]
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800331c:	0023      	movs	r3, r4
 800331e:	337a      	adds	r3, #122	; 0x7a
 8003320:	7819      	ldrb	r1, [r3, #0]
 8003322:	0038      	movs	r0, r7
 8003324:	f7ff ff64 	bl	80031f0 <u8g2_font_decode_get_signed_bits>
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003328:	0023      	movs	r3, r4
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800332a:	9006      	str	r0, [sp, #24]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800332c:	337b      	adds	r3, #123	; 0x7b
 800332e:	7819      	ldrb	r1, [r3, #0]
 8003330:	0038      	movs	r0, r7
 8003332:	f7ff ff5d 	bl	80031f0 <u8g2_font_decode_get_signed_bits>
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003336:	0023      	movs	r3, r4
 8003338:	337c      	adds	r3, #124	; 0x7c
 800333a:	7819      	ldrb	r1, [r3, #0]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800333c:	0005      	movs	r5, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800333e:	0038      	movs	r0, r7
 8003340:	f7ff ff56 	bl	80031f0 <u8g2_font_decode_get_signed_bits>
  if ( decode->glyph_width > 0 )
 8003344:	230a      	movs	r3, #10
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003346:	9007      	str	r0, [sp, #28]
  if ( decode->glyph_width > 0 )
 8003348:	56fb      	ldrsb	r3, [r7, r3]
 800334a:	9303      	str	r3, [sp, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	dd59      	ble.n	8003404 <u8g2_font_decode_glyph+0x100>
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8003350:	9b02      	ldr	r3, [sp, #8]
 8003352:	9906      	ldr	r1, [sp, #24]
 8003354:	195b      	adds	r3, r3, r5
 8003356:	425b      	negs	r3, r3
 8003358:	b25b      	sxtb	r3, r3
 800335a:	9305      	str	r3, [sp, #20]
 800335c:	7c3e      	ldrb	r6, [r7, #16]
 800335e:	88b8      	ldrh	r0, [r7, #4]
 8003360:	0033      	movs	r3, r6
 8003362:	9a05      	ldr	r2, [sp, #20]
 8003364:	f7ff ff5e 	bl	8003224 <u8g2_add_vector_x>
 8003368:	9004      	str	r0, [sp, #16]
 800336a:	0005      	movs	r5, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800336c:	0033      	movs	r3, r6
 800336e:	9a05      	ldr	r2, [sp, #20]
 8003370:	9906      	ldr	r1, [sp, #24]
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8003372:	80b8      	strh	r0, [r7, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8003374:	88f8      	ldrh	r0, [r7, #6]
 8003376:	f7ff ff46 	bl	8003206 <u8g2_add_vector_y>
      switch(decode->dir)
 800337a:	002b      	movs	r3, r5
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800337c:	0001      	movs	r1, r0
 800337e:	0002      	movs	r2, r0
 8003380:	80f8      	strh	r0, [r7, #6]
      switch(decode->dir)
 8003382:	2e03      	cmp	r6, #3
 8003384:	d80a      	bhi.n	800339c <u8g2_font_decode_glyph+0x98>
 8003386:	0030      	movs	r0, r6
 8003388:	f7fc fec2 	bl	8000110 <__gnu_thumb1_case_uqi>
 800338c:	574a3f02 	.word	0x574a3f02
	    x1 += decode->glyph_width;
 8003390:	9b03      	ldr	r3, [sp, #12]
	    y1 += h;
 8003392:	9802      	ldr	r0, [sp, #8]
	    x1 += decode->glyph_width;
 8003394:	18ed      	adds	r5, r5, r3
	    y1 += h;
 8003396:	1809      	adds	r1, r1, r0
	    x1 += decode->glyph_width;
 8003398:	b2ab      	uxth	r3, r5
	    y1 += h;
 800339a:	b288      	uxth	r0, r1
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800339c:	9000      	str	r0, [sp, #0]
 800339e:	9904      	ldr	r1, [sp, #16]
 80033a0:	0020      	movs	r0, r4
 80033a2:	f000 f9d7 	bl	8003754 <u8g2_IsIntersection>
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d02c      	beq.n	8003404 <u8g2_font_decode_glyph+0x100>
    decode->x = 0;
 80033aa:	0023      	movs	r3, r4
 80033ac:	2200      	movs	r2, #0
	u8g2_font_decode_len(u8g2, b, 1);
 80033ae:	2501      	movs	r5, #1
    decode->x = 0;
 80033b0:	3368      	adds	r3, #104	; 0x68
 80033b2:	801a      	strh	r2, [r3, #0]
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80033b4:	0023      	movs	r3, r4
 80033b6:	3376      	adds	r3, #118	; 0x76
 80033b8:	7819      	ldrb	r1, [r3, #0]
 80033ba:	0038      	movs	r0, r7
 80033bc:	f7ff fee0 	bl	8003180 <u8g2_font_decode_get_unsigned_bits>
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80033c0:	0023      	movs	r3, r4
 80033c2:	3377      	adds	r3, #119	; 0x77
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80033c4:	0006      	movs	r6, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80033c6:	7819      	ldrb	r1, [r3, #0]
 80033c8:	0038      	movs	r0, r7
 80033ca:	f7ff fed9 	bl	8003180 <u8g2_font_decode_get_unsigned_bits>
 80033ce:	9003      	str	r0, [sp, #12]
	u8g2_font_decode_len(u8g2, a, 0);
 80033d0:	2200      	movs	r2, #0
 80033d2:	0031      	movs	r1, r6
 80033d4:	0020      	movs	r0, r4
 80033d6:	f7ff ff34 	bl	8003242 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80033da:	0020      	movs	r0, r4
 80033dc:	9903      	ldr	r1, [sp, #12]
 80033de:	002a      	movs	r2, r5
 80033e0:	f7ff ff2f 	bl	8003242 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80033e4:	0029      	movs	r1, r5
 80033e6:	0038      	movs	r0, r7
 80033e8:	f7ff feca 	bl	8003180 <u8g2_font_decode_get_unsigned_bits>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d1ef      	bne.n	80033d0 <u8g2_font_decode_glyph+0xcc>
      if ( decode->y >= h )
 80033f0:	0023      	movs	r3, r4
 80033f2:	2209      	movs	r2, #9
 80033f4:	3360      	adds	r3, #96	; 0x60
 80033f6:	569a      	ldrsb	r2, [r3, r2]
 80033f8:	9902      	ldr	r1, [sp, #8]
 80033fa:	428a      	cmp	r2, r1
 80033fc:	dbda      	blt.n	80033b4 <u8g2_font_decode_glyph+0xb0>
    u8g2->draw_color = decode->fg_color;
 80033fe:	7b9b      	ldrb	r3, [r3, #14]
 8003400:	3492      	adds	r4, #146	; 0x92
 8003402:	7023      	strb	r3, [r4, #0]
}
 8003404:	9807      	ldr	r0, [sp, #28]
 8003406:	b009      	add	sp, #36	; 0x24
 8003408:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800340a:	9b02      	ldr	r3, [sp, #8]
	    y1 += decode->glyph_width;
 800340c:	9803      	ldr	r0, [sp, #12]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800340e:	1aee      	subs	r6, r5, r3
	    y1 += decode->glyph_width;
 8003410:	1809      	adds	r1, r1, r0
	    x1++;
 8003412:	3501      	adds	r5, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003414:	3601      	adds	r6, #1
	    x1++;
 8003416:	b2ab      	uxth	r3, r5
	    y1 += decode->glyph_width;
 8003418:	b288      	uxth	r0, r1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800341a:	b2b1      	uxth	r1, r6
 800341c:	9104      	str	r1, [sp, #16]
	    break;	  
 800341e:	e7bd      	b.n	800339c <u8g2_font_decode_glyph+0x98>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003420:	2201      	movs	r2, #1
 8003422:	9b03      	ldr	r3, [sp, #12]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003424:	9802      	ldr	r0, [sp, #8]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003426:	1ad6      	subs	r6, r2, r3
 8003428:	19ae      	adds	r6, r5, r6
	    x1++;
 800342a:	18ad      	adds	r5, r5, r2
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800342c:	1a12      	subs	r2, r2, r0
 800342e:	188a      	adds	r2, r1, r2
	    y1++;
 8003430:	3101      	adds	r1, #1
	    x1++;
 8003432:	b2ab      	uxth	r3, r5
	    y1++;
 8003434:	b288      	uxth	r0, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003436:	b292      	uxth	r2, r2
 8003438:	e7ef      	b.n	800341a <u8g2_font_decode_glyph+0x116>
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800343a:	9a03      	ldr	r2, [sp, #12]
	    x1 += h;
 800343c:	9b02      	ldr	r3, [sp, #8]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800343e:	1a8a      	subs	r2, r1, r2
	    x1 += h;
 8003440:	18ed      	adds	r5, r5, r3
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003442:	3201      	adds	r2, #1
	    y1++;
 8003444:	3101      	adds	r1, #1
	    x1 += h;
 8003446:	b2ab      	uxth	r3, r5
	    y1++;
 8003448:	b288      	uxth	r0, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800344a:	b292      	uxth	r2, r2
	    break;	  
 800344c:	e7a6      	b.n	800339c <u8g2_font_decode_glyph+0x98>

0800344e <u8g2_font_get_glyph_data>:
{
 800344e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003450:	6d84      	ldr	r4, [r0, #88]	; 0x58
{
 8003452:	000d      	movs	r5, r1
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003454:	3417      	adds	r4, #23
  if ( encoding <= 255 )
 8003456:	29ff      	cmp	r1, #255	; 0xff
 8003458:	d812      	bhi.n	8003480 <u8g2_font_get_glyph_data+0x32>
    if ( encoding >= 'a' )
 800345a:	2960      	cmp	r1, #96	; 0x60
 800345c:	d90a      	bls.n	8003474 <u8g2_font_get_glyph_data+0x26>
      font += u8g2->font_info.start_pos_lower_a;
 800345e:	3088      	adds	r0, #136	; 0x88
      font += u8g2->font_info.start_pos_upper_A;
 8003460:	8803      	ldrh	r3, [r0, #0]
 8003462:	18e4      	adds	r4, r4, r3
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003464:	7860      	ldrb	r0, [r4, #1]
 8003466:	2800      	cmp	r0, #0
 8003468:	d003      	beq.n	8003472 <u8g2_font_get_glyph_data+0x24>
      if ( u8x8_pgm_read( font ) == encoding )
 800346a:	7823      	ldrb	r3, [r4, #0]
 800346c:	42ab      	cmp	r3, r5
 800346e:	d105      	bne.n	800347c <u8g2_font_get_glyph_data+0x2e>
	return font+2;	/* skip encoding and glyph size */
 8003470:	1ca0      	adds	r0, r4, #2
}
 8003472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( encoding >= 'A' )
 8003474:	2940      	cmp	r1, #64	; 0x40
 8003476:	d9f5      	bls.n	8003464 <u8g2_font_get_glyph_data+0x16>
      font += u8g2->font_info.start_pos_upper_A;
 8003478:	3086      	adds	r0, #134	; 0x86
 800347a:	e7f1      	b.n	8003460 <u8g2_font_get_glyph_data+0x12>
      font += u8x8_pgm_read( font + 1 );
 800347c:	1824      	adds	r4, r4, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800347e:	e7f1      	b.n	8003464 <u8g2_font_get_glyph_data+0x16>
    font += u8g2->font_info.start_pos_unicode;
 8003480:	308a      	adds	r0, #138	; 0x8a
 8003482:	8800      	ldrh	r0, [r0, #0]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8003484:	2702      	movs	r7, #2
    font += u8g2->font_info.start_pos_unicode;
 8003486:	1824      	adds	r4, r4, r0
    unicode_lookup_table = font; 
 8003488:	0026      	movs	r6, r4
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800348a:	2100      	movs	r1, #0
 800348c:	0030      	movs	r0, r6
 800348e:	f7ff fe39 	bl	8003104 <u8g2_font_get_word>
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8003492:	0039      	movs	r1, r7
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003494:	1824      	adds	r4, r4, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8003496:	0030      	movs	r0, r6
 8003498:	f7ff fe34 	bl	8003104 <u8g2_font_get_word>
      unicode_lookup_table+=4;
 800349c:	3604      	adds	r6, #4
    } while( e < encoding );
 800349e:	4285      	cmp	r5, r0
 80034a0:	d8f3      	bhi.n	800348a <u8g2_font_get_glyph_data+0x3c>
      e |= u8x8_pgm_read( font + 1 );
 80034a2:	7860      	ldrb	r0, [r4, #1]
 80034a4:	7822      	ldrb	r2, [r4, #0]
 80034a6:	0200      	lsls	r0, r0, #8
 80034a8:	4310      	orrs	r0, r2
 80034aa:	ba40      	rev16	r0, r0
 80034ac:	b280      	uxth	r0, r0
      if ( e == 0 )
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d0df      	beq.n	8003472 <u8g2_font_get_glyph_data+0x24>
      if ( e == encoding )
 80034b2:	4285      	cmp	r5, r0
 80034b4:	d101      	bne.n	80034ba <u8g2_font_get_glyph_data+0x6c>
	return font+3;	/* skip encoding and glyph size */
 80034b6:	1ce0      	adds	r0, r4, #3
 80034b8:	e7db      	b.n	8003472 <u8g2_font_get_glyph_data+0x24>
      font += u8x8_pgm_read( font + 2 );
 80034ba:	78a3      	ldrb	r3, [r4, #2]
 80034bc:	18e4      	adds	r4, r4, r3
      e = u8x8_pgm_read( font );
 80034be:	e7f0      	b.n	80034a2 <u8g2_font_get_glyph_data+0x54>

080034c0 <u8g2_DrawGlyph>:
{
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	001f      	movs	r7, r3
  switch(u8g2->font_decode.dir)
 80034c4:	0003      	movs	r3, r0
 80034c6:	3370      	adds	r3, #112	; 0x70
{
 80034c8:	0004      	movs	r4, r0
  switch(u8g2->font_decode.dir)
 80034ca:	7818      	ldrb	r0, [r3, #0]
{
 80034cc:	000e      	movs	r6, r1
 80034ce:	0015      	movs	r5, r2
  switch(u8g2->font_decode.dir)
 80034d0:	2803      	cmp	r0, #3
 80034d2:	d808      	bhi.n	80034e6 <u8g2_DrawGlyph+0x26>
 80034d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80034d6:	f7fc fe1b 	bl	8000110 <__gnu_thumb1_case_uqi>
 80034da:	1702      	.short	0x1702
 80034dc:	201c      	.short	0x201c
      y += u8g2->font_calc_vref(u8g2);
 80034de:	0020      	movs	r0, r4
 80034e0:	4798      	blx	r3
 80034e2:	182d      	adds	r5, r5, r0
      y -= u8g2->font_calc_vref(u8g2);
 80034e4:	b2ad      	uxth	r5, r5
  u8g2->font_decode.target_x = x;
 80034e6:	0023      	movs	r3, r4
 80034e8:	3364      	adds	r3, #100	; 0x64
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80034ea:	0039      	movs	r1, r7
 80034ec:	0020      	movs	r0, r4
  u8g2->font_decode.target_x = x;
 80034ee:	801e      	strh	r6, [r3, #0]
  u8g2->font_decode.target_y = y;
 80034f0:	805d      	strh	r5, [r3, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80034f2:	f7ff ffac 	bl	800344e <u8g2_font_get_glyph_data>
 80034f6:	0001      	movs	r1, r0
  u8g2_uint_t dx = 0;
 80034f8:	2000      	movs	r0, #0
  if ( glyph_data != NULL )
 80034fa:	4281      	cmp	r1, r0
 80034fc:	d003      	beq.n	8003506 <u8g2_DrawGlyph+0x46>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80034fe:	0020      	movs	r0, r4
 8003500:	f7ff ff00 	bl	8003304 <u8g2_font_decode_glyph>
 8003504:	b280      	uxth	r0, r0
}
 8003506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      x -= u8g2->font_calc_vref(u8g2);
 8003508:	0020      	movs	r0, r4
 800350a:	4798      	blx	r3
 800350c:	1a36      	subs	r6, r6, r0
      x += u8g2->font_calc_vref(u8g2);
 800350e:	b2b6      	uxth	r6, r6
      break;
 8003510:	e7e9      	b.n	80034e6 <u8g2_DrawGlyph+0x26>
      y -= u8g2->font_calc_vref(u8g2);
 8003512:	0020      	movs	r0, r4
 8003514:	4798      	blx	r3
 8003516:	1a2d      	subs	r5, r5, r0
 8003518:	e7e4      	b.n	80034e4 <u8g2_DrawGlyph+0x24>
      x += u8g2->font_calc_vref(u8g2);
 800351a:	0020      	movs	r0, r4
 800351c:	4798      	blx	r3
 800351e:	1836      	adds	r6, r6, r0
 8003520:	e7f5      	b.n	800350e <u8g2_DrawGlyph+0x4e>
	...

08003524 <u8g2_draw_string>:
{
 8003524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003526:	0006      	movs	r6, r0
 8003528:	000c      	movs	r4, r1
 800352a:	0015      	movs	r5, r2
 800352c:	9301      	str	r3, [sp, #4]
  sum = 0;
 800352e:	2700      	movs	r7, #0
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003530:	f000 fa28 	bl	8003984 <u8x8_utf8_init>
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003534:	9b01      	ldr	r3, [sp, #4]
 8003536:	0030      	movs	r0, r6
 8003538:	7819      	ldrb	r1, [r3, #0]
 800353a:	6873      	ldr	r3, [r6, #4]
 800353c:	4798      	blx	r3
    if ( e == 0x0ffff )
 800353e:	4a13      	ldr	r2, [pc, #76]	; (800358c <u8g2_draw_string+0x68>)
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003540:	0003      	movs	r3, r0
    if ( e == 0x0ffff )
 8003542:	4290      	cmp	r0, r2
 8003544:	d020      	beq.n	8003588 <u8g2_draw_string+0x64>
    str++;
 8003546:	9a01      	ldr	r2, [sp, #4]
 8003548:	3201      	adds	r2, #1
 800354a:	9201      	str	r2, [sp, #4]
    if ( e != 0x0fffe )
 800354c:	4a10      	ldr	r2, [pc, #64]	; (8003590 <u8g2_draw_string+0x6c>)
 800354e:	4290      	cmp	r0, r2
 8003550:	d0f0      	beq.n	8003534 <u8g2_draw_string+0x10>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8003552:	002a      	movs	r2, r5
 8003554:	0021      	movs	r1, r4
 8003556:	0030      	movs	r0, r6
 8003558:	f7ff ffb2 	bl	80034c0 <u8g2_DrawGlyph>
      switch(u8g2->font_decode.dir)
 800355c:	0032      	movs	r2, r6
 800355e:	3270      	adds	r2, #112	; 0x70
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8003560:	0003      	movs	r3, r0
      switch(u8g2->font_decode.dir)
 8003562:	7810      	ldrb	r0, [r2, #0]
 8003564:	2803      	cmp	r0, #3
 8003566:	d805      	bhi.n	8003574 <u8g2_draw_string+0x50>
 8003568:	f7fc fdd2 	bl	8000110 <__gnu_thumb1_case_uqi>
 800356c:	0c0a0702 	.word	0x0c0a0702
	  x += delta;
 8003570:	18e4      	adds	r4, r4, r3
	  x -= delta;
 8003572:	b2a4      	uxth	r4, r4
      sum += delta;    
 8003574:	18ff      	adds	r7, r7, r3
 8003576:	b2bf      	uxth	r7, r7
 8003578:	e7dc      	b.n	8003534 <u8g2_draw_string+0x10>
	  y += delta;
 800357a:	18ed      	adds	r5, r5, r3
	  y -= delta;
 800357c:	b2ad      	uxth	r5, r5
	  break;
 800357e:	e7f9      	b.n	8003574 <u8g2_draw_string+0x50>
	  x -= delta;
 8003580:	1ae4      	subs	r4, r4, r3
 8003582:	e7f6      	b.n	8003572 <u8g2_draw_string+0x4e>
	  y -= delta;
 8003584:	1aed      	subs	r5, r5, r3
 8003586:	e7f9      	b.n	800357c <u8g2_draw_string+0x58>
}
 8003588:	0038      	movs	r0, r7
 800358a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800358c:	0000ffff 	.word	0x0000ffff
 8003590:	0000fffe 	.word	0x0000fffe

08003594 <u8g2_DrawStr>:
{
 8003594:	b510      	push	{r4, lr}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8003596:	4c02      	ldr	r4, [pc, #8]	; (80035a0 <u8g2_DrawStr+0xc>)
 8003598:	6044      	str	r4, [r0, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800359a:	f7ff ffc3 	bl	8003524 <u8g2_draw_string>
}
 800359e:	bd10      	pop	{r4, pc}
 80035a0:	08003971 	.word	0x08003971

080035a4 <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
 80035a4:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
 80035a6:	b570      	push	{r4, r5, r6, lr}
  if ( u8g2->font == NULL )
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01d      	beq.n	80035e8 <u8g2_UpdateRefHeight+0x44>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80035ac:	0003      	movs	r3, r0
 80035ae:	2600      	movs	r6, #0
 80035b0:	0005      	movs	r5, r0
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80035b2:	2401      	movs	r4, #1
 80035b4:	0002      	movs	r2, r0
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80035b6:	3381      	adds	r3, #129	; 0x81
 80035b8:	579e      	ldrsb	r6, [r3, r6]
 80035ba:	358e      	adds	r5, #142	; 0x8e
 80035bc:	702e      	strb	r6, [r5, #0]
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80035be:	571c      	ldrsb	r4, [r3, r4]
 80035c0:	328f      	adds	r2, #143	; 0x8f
 80035c2:	7014      	strb	r4, [r2, #0]
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80035c4:	330c      	adds	r3, #12
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00d      	beq.n	80035e8 <u8g2_UpdateRefHeight+0x44>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d10c      	bne.n	80035ea <u8g2_UpdateRefHeight+0x46>
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80035d0:	0003      	movs	r3, r0
 80035d2:	3383      	adds	r3, #131	; 0x83
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	429e      	cmp	r6, r3
 80035da:	da00      	bge.n	80035de <u8g2_UpdateRefHeight+0x3a>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80035dc:	702b      	strb	r3, [r5, #0]
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80035de:	2384      	movs	r3, #132	; 0x84
 80035e0:	56c3      	ldrsb	r3, [r0, r3]
 80035e2:	429c      	cmp	r4, r3
 80035e4:	dd00      	ble.n	80035e8 <u8g2_UpdateRefHeight+0x44>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80035e6:	7013      	strb	r3, [r2, #0]
}
 80035e8:	bd70      	pop	{r4, r5, r6, pc}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80035ea:	0003      	movs	r3, r0
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	337e      	adds	r3, #126	; 0x7e
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	5641      	ldrsb	r1, [r0, r1]
 80035f4:	b25b      	sxtb	r3, r3
 80035f6:	185b      	adds	r3, r3, r1
 80035f8:	429e      	cmp	r6, r3
 80035fa:	da00      	bge.n	80035fe <u8g2_UpdateRefHeight+0x5a>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80035fc:	702b      	strb	r3, [r5, #0]
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80035fe:	428c      	cmp	r4, r1
 8003600:	ddf2      	ble.n	80035e8 <u8g2_UpdateRefHeight+0x44>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003602:	7011      	strb	r1, [r2, #0]
 8003604:	e7f0      	b.n	80035e8 <u8g2_UpdateRefHeight+0x44>
	...

08003608 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003608:	4b01      	ldr	r3, [pc, #4]	; (8003610 <u8g2_SetFontPosBaseline+0x8>)
 800360a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 800360c:	4770      	bx	lr
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	08003113 	.word	0x08003113

08003614 <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
 8003614:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
 8003616:	b510      	push	{r4, lr}
 8003618:	0004      	movs	r4, r0
  if ( u8g2->font != font )
 800361a:	428b      	cmp	r3, r1
 800361c:	d006      	beq.n	800362c <u8g2_SetFont+0x18>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800361e:	6581      	str	r1, [r0, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8003620:	3074      	adds	r0, #116	; 0x74
 8003622:	f7ff fd78 	bl	8003116 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8003626:	0020      	movs	r0, r4
 8003628:	f7ff ffbc 	bl	80035a4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800362c:	bd10      	pop	{r4, pc}

0800362e <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800362e:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8003630:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
{
 8003632:	ac06      	add	r4, sp, #24
 8003634:	7824      	ldrb	r4, [r4, #0]
  y -= u8g2->pixel_curr_row;
 8003636:	1b52      	subs	r2, r2, r5
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003638:	9400      	str	r4, [sp, #0]
 800363a:	b292      	uxth	r2, r2
 800363c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800363e:	47a0      	blx	r4
}
 8003640:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08003642 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8003644:	0005      	movs	r5, r0
 8003646:	358c      	adds	r5, #140	; 0x8c
 8003648:	782d      	ldrb	r5, [r5, #0]
{
 800364a:	ac08      	add	r4, sp, #32
 800364c:	7824      	ldrb	r4, [r4, #0]
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800364e:	2d00      	cmp	r5, #0
 8003650:	d040      	beq.n	80036d4 <u8g2_DrawHVLine+0x92>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8003652:	2b00      	cmp	r3, #0
 8003654:	d03e      	beq.n	80036d4 <u8g2_DrawHVLine+0x92>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8003656:	2b01      	cmp	r3, #1
 8003658:	d004      	beq.n	8003664 <u8g2_DrawHVLine+0x22>
      {
	if ( dir == 2 )
 800365a:	2c02      	cmp	r4, #2
 800365c:	d131      	bne.n	80036c2 <u8g2_DrawHVLine+0x80>
	{
	  x -= len;
	  x++;
 800365e:	3101      	adds	r1, #1
 8003660:	1ac9      	subs	r1, r1, r3
 8003662:	b289      	uxth	r1, r1
	{
	  y -= len;
	  y++;
	}
      }
      dir &= 1;  
 8003664:	2501      	movs	r5, #1
 8003666:	0026      	movs	r6, r4
 8003668:	402e      	ands	r6, r5
      
      /* clip against the user window */
      if ( dir == 0 )
 800366a:	422c      	tst	r4, r5
 800366c:	d133      	bne.n	80036d6 <u8g2_DrawHVLine+0x94>
      {
	if ( y < u8g2->user_y0 )
 800366e:	0004      	movs	r4, r0
 8003670:	344c      	adds	r4, #76	; 0x4c
 8003672:	8824      	ldrh	r4, [r4, #0]
 8003674:	4294      	cmp	r4, r2
 8003676:	d82d      	bhi.n	80036d4 <u8g2_DrawHVLine+0x92>
	  return;
	if ( y >= u8g2->user_y1 )
 8003678:	0004      	movs	r4, r0
 800367a:	344e      	adds	r4, #78	; 0x4e
 800367c:	8824      	ldrh	r4, [r4, #0]
 800367e:	4294      	cmp	r4, r2
 8003680:	d928      	bls.n	80036d4 <u8g2_DrawHVLine+0x92>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8003682:	0004      	movs	r4, r0
 8003684:	0005      	movs	r5, r0
  b += *len;
 8003686:	18cb      	adds	r3, r1, r3
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8003688:	3448      	adds	r4, #72	; 0x48
 800368a:	354a      	adds	r5, #74	; 0x4a
  b += *len;
 800368c:	b29b      	uxth	r3, r3
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800368e:	8824      	ldrh	r4, [r4, #0]
 8003690:	882d      	ldrh	r5, [r5, #0]
  if ( a > b )
 8003692:	428b      	cmp	r3, r1
 8003694:	d21c      	bcs.n	80036d0 <u8g2_DrawHVLine+0x8e>
    if ( a < d )
 8003696:	428d      	cmp	r5, r1
 8003698:	d919      	bls.n	80036ce <u8g2_DrawHVLine+0x8c>
      b--;
 800369a:	1e6b      	subs	r3, r5, #1
 800369c:	b29b      	uxth	r3, r3
  if ( b <= c )
 800369e:	429c      	cmp	r4, r3
 80036a0:	d218      	bcs.n	80036d4 <u8g2_DrawHVLine+0x92>
  if ( a < c )		
 80036a2:	1c27      	adds	r7, r4, #0
 80036a4:	428c      	cmp	r4, r1
 80036a6:	d200      	bcs.n	80036aa <u8g2_DrawHVLine+0x68>
 80036a8:	1c0f      	adds	r7, r1, #0
 80036aa:	b2b9      	uxth	r1, r7
  if ( b > d )
 80036ac:	1c2c      	adds	r4, r5, #0
 80036ae:	429d      	cmp	r5, r3
 80036b0:	d900      	bls.n	80036b4 <u8g2_DrawHVLine+0x72>
 80036b2:	1c1c      	adds	r4, r3, #0
  b -= a;
 80036b4:	1a63      	subs	r3, r4, r1
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80036b6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80036b8:	9600      	str	r6, [sp, #0]
 80036ba:	68a4      	ldr	r4, [r4, #8]
  b -= a;
 80036bc:	b29b      	uxth	r3, r3
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80036be:	47a0      	blx	r4
 80036c0:	e008      	b.n	80036d4 <u8g2_DrawHVLine+0x92>
	else if ( dir == 3 )
 80036c2:	2c03      	cmp	r4, #3
 80036c4:	d1ce      	bne.n	8003664 <u8g2_DrawHVLine+0x22>
	  y++;
 80036c6:	3201      	adds	r2, #1
 80036c8:	1ad2      	subs	r2, r2, r3
 80036ca:	b292      	uxth	r2, r2
 80036cc:	e7ca      	b.n	8003664 <u8g2_DrawHVLine+0x22>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80036ce:	0021      	movs	r1, r4
  if ( a >= d )
 80036d0:	428d      	cmp	r5, r1
 80036d2:	d8e4      	bhi.n	800369e <u8g2_DrawHVLine+0x5c>
    }
}
 80036d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	if ( x < u8g2->user_x0 )
 80036d6:	0004      	movs	r4, r0
 80036d8:	3448      	adds	r4, #72	; 0x48
 80036da:	8824      	ldrh	r4, [r4, #0]
 80036dc:	428c      	cmp	r4, r1
 80036de:	d8f9      	bhi.n	80036d4 <u8g2_DrawHVLine+0x92>
	if ( x >= u8g2->user_x1 )
 80036e0:	0004      	movs	r4, r0
 80036e2:	344a      	adds	r4, #74	; 0x4a
 80036e4:	8824      	ldrh	r4, [r4, #0]
 80036e6:	428c      	cmp	r4, r1
 80036e8:	d9f4      	bls.n	80036d4 <u8g2_DrawHVLine+0x92>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80036ea:	0004      	movs	r4, r0
  b += *len;
 80036ec:	18d3      	adds	r3, r2, r3
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80036ee:	344c      	adds	r4, #76	; 0x4c
 80036f0:	8825      	ldrh	r5, [r4, #0]
  b += *len;
 80036f2:	b29b      	uxth	r3, r3
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80036f4:	3402      	adds	r4, #2
 80036f6:	8824      	ldrh	r4, [r4, #0]
  if ( a > b )
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d211      	bcs.n	8003720 <u8g2_DrawHVLine+0xde>
    if ( a < d )
 80036fc:	4294      	cmp	r4, r2
 80036fe:	d90e      	bls.n	800371e <u8g2_DrawHVLine+0xdc>
      b--;
 8003700:	1e63      	subs	r3, r4, #1
 8003702:	b29b      	uxth	r3, r3
  if ( b <= c )
 8003704:	429d      	cmp	r5, r3
 8003706:	d2e5      	bcs.n	80036d4 <u8g2_DrawHVLine+0x92>
  if ( a < c )		
 8003708:	1c2f      	adds	r7, r5, #0
 800370a:	4295      	cmp	r5, r2
 800370c:	d200      	bcs.n	8003710 <u8g2_DrawHVLine+0xce>
 800370e:	1c17      	adds	r7, r2, #0
 8003710:	b2ba      	uxth	r2, r7
  if ( b > d )
 8003712:	1c25      	adds	r5, r4, #0
 8003714:	429c      	cmp	r4, r3
 8003716:	d900      	bls.n	800371a <u8g2_DrawHVLine+0xd8>
 8003718:	1c1d      	adds	r5, r3, #0
  b -= a;
 800371a:	1aab      	subs	r3, r5, r2
 800371c:	e7cb      	b.n	80036b6 <u8g2_DrawHVLine+0x74>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800371e:	002a      	movs	r2, r5
  if ( a >= d )
 8003720:	4294      	cmp	r4, r2
 8003722:	d8ef      	bhi.n	8003704 <u8g2_DrawHVLine+0xc2>
 8003724:	e7d6      	b.n	80036d4 <u8g2_DrawHVLine+0x92>

08003726 <u8g2_SetDrawColor>:
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
 8003726:	3092      	adds	r0, #146	; 0x92
 8003728:	2902      	cmp	r1, #2
 800372a:	d801      	bhi.n	8003730 <u8g2_SetDrawColor+0xa>
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800372c:	7001      	strb	r1, [r0, #0]
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
}
 800372e:	4770      	bx	lr
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8003730:	2301      	movs	r3, #1
 8003732:	7003      	strb	r3, [r0, #0]
}
 8003734:	e7fb      	b.n	800372e <u8g2_SetDrawColor+0x8>

08003736 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8003736:	b510      	push	{r4, lr}
 8003738:	0004      	movs	r4, r0
  if ( v0 < a1 )		// v0 <= a1
 800373a:	428a      	cmp	r2, r1
 800373c:	d206      	bcs.n	800374c <u8g2_is_intersection_decision_tree+0x16>
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
 800373e:	2001      	movs	r0, #1
    if ( v1 > a0 )	// v1 >= a0
 8003740:	42a3      	cmp	r3, r4
 8003742:	d802      	bhi.n	800374a <u8g2_is_intersection_decision_tree+0x14>
      return 1;
 8003744:	4293      	cmp	r3, r2
 8003746:	419b      	sbcs	r3, r3
 8003748:	4258      	negs	r0, r3
    else
    {
      return 0;
    }
  }
}
 800374a:	bd10      	pop	{r4, pc}
    if ( v1 > a0 )	// v1 >= a0
 800374c:	4283      	cmp	r3, r0
 800374e:	d8f9      	bhi.n	8003744 <u8g2_is_intersection_decision_tree+0xe>
      return 0;
 8003750:	2000      	movs	r0, #0
 8003752:	e7fa      	b.n	800374a <u8g2_is_intersection_decision_tree+0x14>

08003754 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	000d      	movs	r5, r1
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003758:	0001      	movs	r1, r0
{
 800375a:	0004      	movs	r4, r0
 800375c:	001e      	movs	r6, r3
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800375e:	314e      	adds	r1, #78	; 0x4e
{
 8003760:	ab04      	add	r3, sp, #16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003762:	304c      	adds	r0, #76	; 0x4c
{
 8003764:	881b      	ldrh	r3, [r3, #0]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003766:	8809      	ldrh	r1, [r1, #0]
 8003768:	8800      	ldrh	r0, [r0, #0]
 800376a:	f7ff ffe4 	bl	8003736 <u8g2_is_intersection_decision_tree>
 800376e:	2800      	cmp	r0, #0
 8003770:	d008      	beq.n	8003784 <u8g2_IsIntersection+0x30>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8003772:	0023      	movs	r3, r4
 8003774:	3448      	adds	r4, #72	; 0x48
 8003776:	334a      	adds	r3, #74	; 0x4a
 8003778:	8819      	ldrh	r1, [r3, #0]
 800377a:	002a      	movs	r2, r5
 800377c:	0033      	movs	r3, r6
 800377e:	8820      	ldrh	r0, [r4, #0]
 8003780:	f7ff ffd9 	bl	8003736 <u8g2_is_intersection_decision_tree>
}
 8003784:	bd70      	pop	{r4, r5, r6, pc}

08003786 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003786:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003788:	ac08      	add	r4, sp, #32
 800378a:	7824      	ldrb	r4, [r4, #0]
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800378c:	2607      	movs	r6, #7
{
 800378e:	46a4      	mov	ip, r4
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8003790:	0014      	movs	r4, r2
 8003792:	4034      	ands	r4, r6
 8003794:	9401      	str	r4, [sp, #4]
  mask = 1;
  mask <<= bit_pos;
 8003796:	2401      	movs	r4, #1
 8003798:	9d01      	ldr	r5, [sp, #4]
 800379a:	40ac      	lsls	r4, r5

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 800379c:	0005      	movs	r5, r0
 800379e:	3592      	adds	r5, #146	; 0x92
 80037a0:	782f      	ldrb	r7, [r5, #0]
  mask <<= bit_pos;
 80037a2:	b2e4      	uxtb	r4, r4
  or_mask = 0;
 80037a4:	2500      	movs	r5, #0
  if ( u8g2->draw_color <= 1 )
 80037a6:	2f01      	cmp	r7, #1
 80037a8:	d802      	bhi.n	80037b0 <u8g2_ll_hvline_vertical_top_lsb+0x2a>
    or_mask  = mask;
 80037aa:	0025      	movs	r5, r4
  if ( u8g2->draw_color != 1 )
 80037ac:	2f01      	cmp	r7, #1
 80037ae:	d029      	beq.n	8003804 <u8g2_ll_hvline_vertical_top_lsb+0x7e>
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 80037b0:	43b2      	bics	r2, r6
 80037b2:	0016      	movs	r6, r2
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80037b4:	6802      	ldr	r2, [r0, #0]
 80037b6:	7c12      	ldrb	r2, [r2, #16]
 80037b8:	4372      	muls	r2, r6
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
 80037ba:	b292      	uxth	r2, r2
  ptr += x;
 80037bc:	1851      	adds	r1, r2, r1
 80037be:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80037c0:	1851      	adds	r1, r2, r1
  
  if ( dir == 0 )
 80037c2:	4662      	mov	r2, ip
 80037c4:	2a00      	cmp	r2, #0
 80037c6:	d01f      	beq.n	8003808 <u8g2_ll_hvline_vertical_top_lsb+0x82>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
 80037c8:	2292      	movs	r2, #146	; 0x92
 80037ca:	4694      	mov	ip, r2
      bit_pos &= 7;
 80037cc:	2707      	movs	r7, #7
	if ( u8g2->draw_color <= 1 )
 80037ce:	4484      	add	ip, r0
      *ptr |= or_mask;
 80037d0:	780a      	ldrb	r2, [r1, #0]
      len--;
 80037d2:	3b01      	subs	r3, #1
      *ptr |= or_mask;
 80037d4:	432a      	orrs	r2, r5
      *ptr ^= xor_mask;
 80037d6:	4062      	eors	r2, r4
 80037d8:	700a      	strb	r2, [r1, #0]
      bit_pos++;
 80037da:	9a01      	ldr	r2, [sp, #4]
      len--;
 80037dc:	b29b      	uxth	r3, r3
      bit_pos++;
 80037de:	3201      	adds	r2, #1
      bit_pos &= 7;
 80037e0:	0016      	movs	r6, r2
 80037e2:	403e      	ands	r6, r7
 80037e4:	9601      	str	r6, [sp, #4]
      if ( bit_pos == 0 )
 80037e6:	423a      	tst	r2, r7
 80037e8:	d119      	bne.n	800381e <u8g2_ll_hvline_vertical_top_lsb+0x98>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80037ea:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 80037ec:	1889      	adds	r1, r1, r2
	if ( u8g2->draw_color <= 1 )
 80037ee:	4662      	mov	r2, ip
 80037f0:	7812      	ldrb	r2, [r2, #0]
 80037f2:	2a01      	cmp	r2, #1
 80037f4:	d818      	bhi.n	8003828 <u8g2_ll_hvline_vertical_top_lsb+0xa2>
	  or_mask  = 1;
 80037f6:	2501      	movs	r5, #1
	if ( u8g2->draw_color != 1 )
 80037f8:	42aa      	cmp	r2, r5
 80037fa:	d000      	beq.n	80037fe <u8g2_ll_hvline_vertical_top_lsb+0x78>
	  xor_mask = 1;
 80037fc:	002c      	movs	r4, r5
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e6      	bne.n	80037d0 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
 8003802:	e00b      	b.n	800381c <u8g2_ll_hvline_vertical_top_lsb+0x96>
  xor_mask = 0;
 8003804:	2400      	movs	r4, #0
 8003806:	e7d3      	b.n	80037b0 <u8g2_ll_hvline_vertical_top_lsb+0x2a>
      } while( len != 0 );
 8003808:	18cb      	adds	r3, r1, r3
 800380a:	b29b      	uxth	r3, r3
	*ptr |= or_mask;
 800380c:	780a      	ldrb	r2, [r1, #0]
 800380e:	432a      	orrs	r2, r5
	*ptr ^= xor_mask;
 8003810:	4062      	eors	r2, r4
 8003812:	700a      	strb	r2, [r1, #0]
	ptr++;
 8003814:	3101      	adds	r1, #1
      } while( len != 0 );
 8003816:	b28a      	uxth	r2, r1
 8003818:	429a      	cmp	r2, r3
 800381a:	d1f7      	bne.n	800380c <u8g2_ll_hvline_vertical_top_lsb+0x86>
  }
}
 800381c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	or_mask <<= 1;
 800381e:	006d      	lsls	r5, r5, #1
	xor_mask <<= 1;
 8003820:	0064      	lsls	r4, r4, #1
	or_mask <<= 1;
 8003822:	b2ed      	uxtb	r5, r5
	xor_mask <<= 1;
 8003824:	b2e4      	uxtb	r4, r4
 8003826:	e7ea      	b.n	80037fe <u8g2_ll_hvline_vertical_top_lsb+0x78>
	  xor_mask = 1;
 8003828:	2401      	movs	r4, #1
 800382a:	e7e8      	b.n	80037fe <u8g2_ll_hvline_vertical_top_lsb+0x78>

0800382c <u8g2_update_dimension_common>:
static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800382c:	0003      	movs	r3, r0
{
 800382e:	b5f0      	push	{r4, r5, r6, r7, lr}
  t = u8g2->tile_buf_height;
 8003830:	3338      	adds	r3, #56	; 0x38
 8003832:	781a      	ldrb	r2, [r3, #0]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8003834:	6801      	ldr	r1, [r0, #0]
  t *= 8;
 8003836:	00d3      	lsls	r3, r2, #3
  u8g2->pixel_buf_height = t;
 8003838:	8783      	strh	r3, [r0, #60]	; 0x3c
  
  t = display_info->tile_width;
 800383a:	7c0b      	ldrb	r3, [r1, #16]
  t = u8g2->tile_buf_height;
 800383c:	b294      	uxth	r4, r2
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800383e:	00db      	lsls	r3, r3, #3
  u8g2->pixel_buf_width = t;
 8003840:	8743      	strh	r3, [r0, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8003842:	0003      	movs	r3, r0
 8003844:	3339      	adds	r3, #57	; 0x39
 8003846:	781e      	ldrb	r6, [r3, #0]
  t *= 8;
 8003848:	00f3      	lsls	r3, r6, #3
  u8g2->pixel_curr_row = t;
 800384a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800384c:	7c4d      	ldrb	r5, [r1, #17]
 800384e:	1992      	adds	r2, r2, r6
  t = u8g2->tile_curr_row;
 8003850:	b2b7      	uxth	r7, r6
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8003852:	42aa      	cmp	r2, r5
 8003854:	dd01      	ble.n	800385a <u8g2_update_dimension_common+0x2e>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8003856:	1bec      	subs	r4, r5, r7
 8003858:	b2a4      	uxth	r4, r4
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800385a:	1c82      	adds	r2, r0, #2
  t *= 8;
 800385c:	00e4      	lsls	r4, r4, #3
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800385e:	87d3      	strh	r3, [r2, #62]	; 0x3e
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
 8003860:	191b      	adds	r3, r3, r4
 8003862:	1d02      	adds	r2, r0, #4
 8003864:	87d3      	strh	r3, [r2, #62]	; 0x3e

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003866:	8a8a      	ldrh	r2, [r1, #20]
 8003868:	1d83      	adds	r3, r0, #6
 800386a:	87da      	strh	r2, [r3, #62]	; 0x3e
  u8g2->height = display_info->pixel_height;
 800386c:	8acb      	ldrh	r3, [r1, #22]
 800386e:	3008      	adds	r0, #8
 8003870:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003872:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003874 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003874:	b510      	push	{r4, lr}
  u8g2_update_dimension_common(u8g2);  
 8003876:	f7ff ffd9 	bl	800382c <u8g2_update_dimension_common>
}
 800387a:	bd10      	pop	{r4, pc}

0800387c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800387c:	b513      	push	{r0, r1, r4, lr}
 800387e:	ac04      	add	r4, sp, #16
 8003880:	7824      	ldrb	r4, [r4, #0]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003882:	9400      	str	r4, [sp, #0]
 8003884:	f7ff fed3 	bl	800362e <u8g2_draw_hv_line_2dir>
}
 8003888:	bd13      	pop	{r0, r1, r4, pc}

0800388a <u8g2_apply_clip_window>:
{
 800388a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800388c:	0006      	movs	r6, r0
 800388e:	0005      	movs	r5, r0
 8003890:	0007      	movs	r7, r0
{
 8003892:	0004      	movs	r4, r0
 8003894:	b085      	sub	sp, #20
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003896:	3056      	adds	r0, #86	; 0x56
 8003898:	3652      	adds	r6, #82	; 0x52
 800389a:	3554      	adds	r5, #84	; 0x54
 800389c:	3750      	adds	r7, #80	; 0x50
 800389e:	8833      	ldrh	r3, [r6, #0]
 80038a0:	882a      	ldrh	r2, [r5, #0]
 80038a2:	8839      	ldrh	r1, [r7, #0]
 80038a4:	9003      	str	r0, [sp, #12]
 80038a6:	8800      	ldrh	r0, [r0, #0]
 80038a8:	9000      	str	r0, [sp, #0]
 80038aa:	0020      	movs	r0, r4
 80038ac:	f7ff ff52 	bl	8003754 <u8g2_IsIntersection>
 80038b0:	0023      	movs	r3, r4
 80038b2:	338c      	adds	r3, #140	; 0x8c
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d102      	bne.n	80038be <u8g2_apply_clip_window+0x34>
    u8g2->is_page_clip_window_intersection = 0;
 80038b8:	7018      	strb	r0, [r3, #0]
}
 80038ba:	b005      	add	sp, #20
 80038bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u8g2->is_page_clip_window_intersection = 1;
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80038c2:	0023      	movs	r3, r4
 80038c4:	3348      	adds	r3, #72	; 0x48
 80038c6:	883a      	ldrh	r2, [r7, #0]
 80038c8:	8819      	ldrh	r1, [r3, #0]
 80038ca:	4291      	cmp	r1, r2
 80038cc:	d200      	bcs.n	80038d0 <u8g2_apply_clip_window+0x46>
      u8g2->user_x0 = u8g2->clip_x0;
 80038ce:	801a      	strh	r2, [r3, #0]
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80038d0:	0023      	movs	r3, r4
 80038d2:	334a      	adds	r3, #74	; 0x4a
 80038d4:	8832      	ldrh	r2, [r6, #0]
 80038d6:	8819      	ldrh	r1, [r3, #0]
 80038d8:	4291      	cmp	r1, r2
 80038da:	d900      	bls.n	80038de <u8g2_apply_clip_window+0x54>
      u8g2->user_x1 = u8g2->clip_x1;
 80038dc:	801a      	strh	r2, [r3, #0]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80038de:	0023      	movs	r3, r4
 80038e0:	334c      	adds	r3, #76	; 0x4c
 80038e2:	882a      	ldrh	r2, [r5, #0]
 80038e4:	8819      	ldrh	r1, [r3, #0]
 80038e6:	4291      	cmp	r1, r2
 80038e8:	d200      	bcs.n	80038ec <u8g2_apply_clip_window+0x62>
      u8g2->user_y0 = u8g2->clip_y0;
 80038ea:	801a      	strh	r2, [r3, #0]
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80038ec:	9b03      	ldr	r3, [sp, #12]
 80038ee:	344e      	adds	r4, #78	; 0x4e
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	8822      	ldrh	r2, [r4, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d9e0      	bls.n	80038ba <u8g2_apply_clip_window+0x30>
      u8g2->user_y1 = u8g2->clip_y1;
 80038f8:	8023      	strh	r3, [r4, #0]
}
 80038fa:	e7de      	b.n	80038ba <u8g2_apply_clip_window+0x30>

080038fc <u8g2_update_page_win_r0>:
  u8g2->user_x0 = 0;
 80038fc:	0003      	movs	r3, r0
 80038fe:	2200      	movs	r2, #0
{
 8003900:	b510      	push	{r4, lr}
  u8g2->user_x0 = 0;
 8003902:	3348      	adds	r3, #72	; 0x48
 8003904:	801a      	strh	r2, [r3, #0]
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003906:	1d82      	adds	r2, r0, #6
 8003908:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 800390a:	805a      	strh	r2, [r3, #2]
  u8g2->user_y0 = u8g2->buf_y0;
 800390c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800390e:	64c3      	str	r3, [r0, #76]	; 0x4c
  u8g2_apply_clip_window(u8g2);
 8003910:	f7ff ffbb 	bl	800388a <u8g2_apply_clip_window>
}
 8003914:	bd10      	pop	{r4, pc}
	...

08003918 <u8g2_SetMaxClipWindow>:
  u8g2->clip_x0 = 0;
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <u8g2_SetMaxClipWindow+0x10>)
{
 800391a:	b510      	push	{r4, lr}
  u8g2->clip_x0 = 0;
 800391c:	6503      	str	r3, [r0, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800391e:	6543      	str	r3, [r0, #84]	; 0x54
  u8g2->cb->update_page_win(u8g2);
 8003920:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4798      	blx	r3
}
 8003926:	bd10      	pop	{r4, pc}
 8003928:	ffff0000 	.word	0xffff0000

0800392c <u8g2_SetupBuffer>:
{
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	0004      	movs	r4, r0
  u8g2->ll_hvline = ll_hvline_cb;
 8003930:	62e3      	str	r3, [r4, #44]	; 0x2c
  u8g2->tile_buf_height = tile_buf_height;
 8003932:	0023      	movs	r3, r4
  u8g2->font = NULL;
 8003934:	2500      	movs	r5, #0
  u8g2->tile_buf_height = tile_buf_height;
 8003936:	3338      	adds	r3, #56	; 0x38
  u8g2->tile_buf_ptr = buf;
 8003938:	6361      	str	r1, [r4, #52]	; 0x34
  u8g2->font = NULL;
 800393a:	65a5      	str	r5, [r4, #88]	; 0x58
  u8g2->tile_buf_height = tile_buf_height;
 800393c:	701a      	strb	r2, [r3, #0]
  u8g2->draw_color = 1;
 800393e:	2202      	movs	r2, #2
  u8g2->tile_curr_row = 0;
 8003940:	705d      	strb	r5, [r3, #1]
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003942:	3335      	adds	r3, #53	; 0x35
 8003944:	701d      	strb	r5, [r3, #0]
  u8g2->font_height_mode = 0; /* issue 2046 */
 8003946:	3320      	adds	r3, #32
 8003948:	701d      	strb	r5, [r3, #0]
  u8g2->bitmap_transparency = 0;
 800394a:	711d      	strb	r5, [r3, #4]
{
 800394c:	9804      	ldr	r0, [sp, #16]
  u8g2->draw_color = 1;
 800394e:	32ff      	adds	r2, #255	; 0xff
 8003950:	3305      	adds	r3, #5
 8003952:	801a      	strh	r2, [r3, #0]
  u8g2->cb->update_dimension(u8g2);
 8003954:	6803      	ldr	r3, [r0, #0]
  u8g2->cb = u8g2_cb;
 8003956:	6320      	str	r0, [r4, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8003958:	0020      	movs	r0, r4
 800395a:	4798      	blx	r3
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800395c:	0020      	movs	r0, r4
 800395e:	f7ff ffdb 	bl	8003918 <u8g2_SetMaxClipWindow>
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003962:	0020      	movs	r0, r4
  u8g2->font_decode.dir = 0;
 8003964:	3470      	adds	r4, #112	; 0x70
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003966:	f7ff fe4f 	bl	8003608 <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 800396a:	7025      	strb	r5, [r4, #0]
}
 800396c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003970 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003970:	2900      	cmp	r1, #0
 8003972:	d002      	beq.n	800397a <u8x8_ascii_next+0xa>
    return 0x0ffff;	/* end of string detected*/
  return b;
 8003974:	b288      	uxth	r0, r1
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003976:	290a      	cmp	r1, #10
 8003978:	d100      	bne.n	800397c <u8x8_ascii_next+0xc>
    return 0x0ffff;	/* end of string detected*/
 800397a:	4801      	ldr	r0, [pc, #4]	; (8003980 <u8x8_ascii_next+0x10>)
}
 800397c:	4770      	bx	lr
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	0000ffff 	.word	0x0000ffff

08003984 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003984:	2300      	movs	r3, #0
 8003986:	3007      	adds	r0, #7
 8003988:	77c3      	strb	r3, [r0, #31]
}
 800398a:	4770      	bx	lr

0800398c <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800398c:	b510      	push	{r4, lr}
 800398e:	0013      	movs	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003990:	000a      	movs	r2, r1
 8003992:	6904      	ldr	r4, [r0, #16]
 8003994:	2117      	movs	r1, #23
 8003996:	47a0      	blx	r4
}
 8003998:	bd10      	pop	{r4, pc}

0800399a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800399a:	b507      	push	{r0, r1, r2, lr}
 800399c:	466b      	mov	r3, sp
 800399e:	1dda      	adds	r2, r3, #7
 80039a0:	7011      	strb	r1, [r2, #0]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80039a2:	2101      	movs	r1, #1
 80039a4:	f7ff fff2 	bl	800398c <u8x8_byte_SendBytes>
}
 80039a8:	bd0e      	pop	{r1, r2, r3, pc}

080039aa <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80039aa:	2300      	movs	r3, #0
{
 80039ac:	b510      	push	{r4, lr}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80039ae:	001a      	movs	r2, r3
 80039b0:	2118      	movs	r1, #24
 80039b2:	6904      	ldr	r4, [r0, #16]
 80039b4:	47a0      	blx	r4
}
 80039b6:	bd10      	pop	{r4, pc}

080039b8 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80039b8:	2300      	movs	r3, #0
{
 80039ba:	b510      	push	{r4, lr}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80039bc:	001a      	movs	r2, r3
 80039be:	2119      	movs	r1, #25
 80039c0:	6904      	ldr	r4, [r0, #16]
 80039c2:	47a0      	blx	r4
}
 80039c4:	bd10      	pop	{r4, pc}

080039c6 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80039c6:	b570      	push	{r4, r5, r6, lr}
 80039c8:	0004      	movs	r4, r0
 80039ca:	0016      	movs	r6, r2
 80039cc:	000d      	movs	r5, r1
    u8x8_byte_StartTransfer(u8x8);    
 80039ce:	f7ff ffec 	bl	80039aa <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80039d2:	2140      	movs	r1, #64	; 0x40
 80039d4:	0020      	movs	r0, r4
 80039d6:	f7ff ffe0 	bl	800399a <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80039da:	0033      	movs	r3, r6
 80039dc:	002a      	movs	r2, r5
 80039de:	2117      	movs	r1, #23
 80039e0:	6925      	ldr	r5, [r4, #16]
 80039e2:	0020      	movs	r0, r4
 80039e4:	47a8      	blx	r5
    u8x8_byte_EndTransfer(u8x8);
 80039e6:	0020      	movs	r0, r4
 80039e8:	f7ff ffe6 	bl	80039b8 <u8x8_byte_EndTransfer>
}
 80039ec:	bd70      	pop	{r4, r5, r6, pc}

080039ee <u8x8_cad_SendCmd>:
{
 80039ee:	b510      	push	{r4, lr}
 80039f0:	000a      	movs	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80039f2:	2300      	movs	r3, #0
 80039f4:	2115      	movs	r1, #21
 80039f6:	68c4      	ldr	r4, [r0, #12]
 80039f8:	47a0      	blx	r4
}
 80039fa:	bd10      	pop	{r4, pc}

080039fc <u8x8_cad_SendArg>:
{
 80039fc:	b510      	push	{r4, lr}
 80039fe:	000a      	movs	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003a00:	2300      	movs	r3, #0
 8003a02:	2116      	movs	r1, #22
 8003a04:	68c4      	ldr	r4, [r0, #12]
 8003a06:	47a0      	blx	r4
}
 8003a08:	bd10      	pop	{r4, pc}

08003a0a <u8x8_cad_SendData>:
{
 8003a0a:	b510      	push	{r4, lr}
 8003a0c:	0013      	movs	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003a0e:	000a      	movs	r2, r1
 8003a10:	68c4      	ldr	r4, [r0, #12]
 8003a12:	2117      	movs	r1, #23
 8003a14:	47a0      	blx	r4
}
 8003a16:	bd10      	pop	{r4, pc}

08003a18 <u8x8_cad_StartTransfer>:
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003a18:	2300      	movs	r3, #0
{
 8003a1a:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	2118      	movs	r1, #24
 8003a20:	68c4      	ldr	r4, [r0, #12]
 8003a22:	47a0      	blx	r4
}
 8003a24:	bd10      	pop	{r4, pc}

08003a26 <u8x8_cad_EndTransfer>:
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003a26:	2300      	movs	r3, #0
{
 8003a28:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	2119      	movs	r1, #25
 8003a2e:	68c4      	ldr	r4, [r0, #12]
 8003a30:	47a0      	blx	r4
}
 8003a32:	bd10      	pop	{r4, pc}

08003a34 <u8x8_cad_SendSequence>:
{
 8003a34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a36:	0005      	movs	r5, r0
 8003a38:	000c      	movs	r4, r1
    cmd = *data;
 8003a3a:	7821      	ldrb	r1, [r4, #0]
    switch( cmd )
 8003a3c:	2919      	cmp	r1, #25
 8003a3e:	d80d      	bhi.n	8003a5c <u8x8_cad_SendSequence+0x28>
 8003a40:	2917      	cmp	r1, #23
 8003a42:	d817      	bhi.n	8003a74 <u8x8_cad_SendSequence+0x40>
 8003a44:	d00d      	beq.n	8003a62 <u8x8_cad_SendSequence+0x2e>
 8003a46:	2914      	cmp	r1, #20
 8003a48:	d90a      	bls.n	8003a60 <u8x8_cad_SendSequence+0x2c>
	  v = *data;
 8003a4a:	466b      	mov	r3, sp
 8003a4c:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003a4e:	0028      	movs	r0, r5
	  v = *data;
 8003a50:	71da      	strb	r2, [r3, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003a52:	68ee      	ldr	r6, [r5, #12]
 8003a54:	2300      	movs	r3, #0
 8003a56:	47b0      	blx	r6
	  data++;
 8003a58:	3402      	adds	r4, #2
	  break;
 8003a5a:	e7ee      	b.n	8003a3a <u8x8_cad_SendSequence+0x6>
    switch( cmd )
 8003a5c:	29fe      	cmp	r1, #254	; 0xfe
 8003a5e:	d010      	beq.n	8003a82 <u8x8_cad_SendSequence+0x4e>
}
 8003a60:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	  v = *data;
 8003a62:	466b      	mov	r3, sp
 8003a64:	1dda      	adds	r2, r3, #7
 8003a66:	7863      	ldrb	r3, [r4, #1]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003a68:	2101      	movs	r1, #1
 8003a6a:	0028      	movs	r0, r5
	  v = *data;
 8003a6c:	7013      	strb	r3, [r2, #0]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003a6e:	f7ff ffcc 	bl	8003a0a <u8x8_cad_SendData>
	  data++;
 8003a72:	e7f1      	b.n	8003a58 <u8x8_cad_SendSequence+0x24>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003a74:	2300      	movs	r3, #0
 8003a76:	0028      	movs	r0, r5
 8003a78:	001a      	movs	r2, r3
 8003a7a:	68ee      	ldr	r6, [r5, #12]
    data++;
 8003a7c:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003a7e:	47b0      	blx	r6
	  break;
 8003a80:	e7db      	b.n	8003a3a <u8x8_cad_SendSequence+0x6>
	  v = *data;
 8003a82:	466b      	mov	r3, sp
 8003a84:	7862      	ldrb	r2, [r4, #1]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003a86:	2129      	movs	r1, #41	; 0x29
 8003a88:	0028      	movs	r0, r5
	  v = *data;
 8003a8a:	71da      	strb	r2, [r3, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003a8c:	f000 f949 	bl	8003d22 <u8x8_gpio_call>
 8003a90:	e7e2      	b.n	8003a58 <u8x8_cad_SendSequence+0x24>
	...

08003a94 <u8x8_cad_ssd13xx_fast_i2c>:
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8003a94:	3914      	subs	r1, #20
{
 8003a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a98:	0004      	movs	r4, r0
 8003a9a:	0015      	movs	r5, r2
 8003a9c:	001e      	movs	r6, r3
  switch(msg)
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	2905      	cmp	r1, #5
 8003aa2:	d819      	bhi.n	8003ad8 <u8x8_cad_ssd13xx_fast_i2c+0x44>
 8003aa4:	0008      	movs	r0, r1
 8003aa6:	f7fc fb33 	bl	8000110 <__gnu_thumb1_case_uqi>
 8003aaa:	0337      	.short	0x0337
 8003aac:	48441e18 	.word	0x48441e18
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8003ab0:	4e27      	ldr	r6, [pc, #156]	; (8003b50 <u8x8_cad_ssd13xx_fast_i2c+0xbc>)
 8003ab2:	7833      	ldrb	r3, [r6, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <u8x8_cad_ssd13xx_fast_i2c+0x2a>
	 u8x8_byte_EndTransfer(u8x8); 
 8003ab8:	0020      	movs	r0, r4
 8003aba:	f7ff ff7d 	bl	80039b8 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8003abe:	0020      	movs	r0, r4
 8003ac0:	f7ff ff73 	bl	80039aa <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	0020      	movs	r0, r4
 8003ac8:	f7ff ff67 	bl	800399a <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003acc:	0029      	movs	r1, r5
 8003ace:	0020      	movs	r0, r4
 8003ad0:	f7ff ff63 	bl	800399a <u8x8_byte_SendByte>
      in_transfer = 1;
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	7030      	strb	r0, [r6, #0]
      break;
    default:
      return 0;
  }
  return 1;
}
 8003ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8_byte_SendByte(u8x8, arg_int);
 8003ada:	0011      	movs	r1, r2
 8003adc:	0020      	movs	r0, r4
 8003ade:	f7ff ff5c 	bl	800399a <u8x8_byte_SendByte>
  return 1;
 8003ae2:	2001      	movs	r0, #1
      break;
 8003ae4:	e7f8      	b.n	8003ad8 <u8x8_cad_ssd13xx_fast_i2c+0x44>
      if ( in_transfer != 0 )
 8003ae6:	4f1a      	ldr	r7, [pc, #104]	; (8003b50 <u8x8_cad_ssd13xx_fast_i2c+0xbc>)
 8003ae8:	783b      	ldrb	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <u8x8_cad_ssd13xx_fast_i2c+0x60>
	u8x8_byte_EndTransfer(u8x8); 
 8003aee:	0020      	movs	r0, r4
 8003af0:	f7ff ff62 	bl	80039b8 <u8x8_byte_EndTransfer>
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8003af4:	0032      	movs	r2, r6
       while( arg_int > 24 )
 8003af6:	2d18      	cmp	r5, #24
 8003af8:	d806      	bhi.n	8003b08 <u8x8_cad_ssd13xx_fast_i2c+0x74>
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8003afa:	0029      	movs	r1, r5
 8003afc:	0020      	movs	r0, r4
 8003afe:	f7ff ff62 	bl	80039c6 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	703b      	strb	r3, [r7, #0]
      break;
 8003b06:	e7ec      	b.n	8003ae2 <u8x8_cad_ssd13xx_fast_i2c+0x4e>
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8003b08:	2118      	movs	r1, #24
 8003b0a:	0020      	movs	r0, r4
	arg_int-=24;
 8003b0c:	3d18      	subs	r5, #24
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8003b0e:	f7ff ff5a 	bl	80039c6 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8003b12:	b2ed      	uxtb	r5, r5
	p+=24;
 8003b14:	3618      	adds	r6, #24
 8003b16:	e7ed      	b.n	8003af4 <u8x8_cad_ssd13xx_fast_i2c+0x60>
      if ( u8x8->i2c_address == 255 )
 8003b18:	1d63      	adds	r3, r4, #5
 8003b1a:	7fda      	ldrb	r2, [r3, #31]
 8003b1c:	2aff      	cmp	r2, #255	; 0xff
 8003b1e:	d101      	bne.n	8003b24 <u8x8_cad_ssd13xx_fast_i2c+0x90>
	u8x8->i2c_address = 0x078;
 8003b20:	3a87      	subs	r2, #135	; 0x87
 8003b22:	77da      	strb	r2, [r3, #31]
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003b24:	0033      	movs	r3, r6
 8003b26:	002a      	movs	r2, r5
 8003b28:	2114      	movs	r1, #20
 8003b2a:	0020      	movs	r0, r4
 8003b2c:	6927      	ldr	r7, [r4, #16]
 8003b2e:	47b8      	blx	r7
 8003b30:	e7d2      	b.n	8003ad8 <u8x8_cad_ssd13xx_fast_i2c+0x44>
      in_transfer = 0;
 8003b32:	2200      	movs	r2, #0
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <u8x8_cad_ssd13xx_fast_i2c+0xbc>)
 8003b36:	701a      	strb	r2, [r3, #0]
      break;
 8003b38:	e7d3      	b.n	8003ae2 <u8x8_cad_ssd13xx_fast_i2c+0x4e>
      if ( in_transfer != 0 )
 8003b3a:	4d05      	ldr	r5, [pc, #20]	; (8003b50 <u8x8_cad_ssd13xx_fast_i2c+0xbc>)
 8003b3c:	782b      	ldrb	r3, [r5, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <u8x8_cad_ssd13xx_fast_i2c+0xb4>
	u8x8_byte_EndTransfer(u8x8); 
 8003b42:	0020      	movs	r0, r4
 8003b44:	f7ff ff38 	bl	80039b8 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	702b      	strb	r3, [r5, #0]
 8003b4c:	e7c9      	b.n	8003ae2 <u8x8_cad_ssd13xx_fast_i2c+0x4e>
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	200006cc 	.word	0x200006cc

08003b54 <u8x8_d_ssd1306_sh1106_generic>:

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8003b54:	390b      	subs	r1, #11
{
 8003b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b58:	0004      	movs	r4, r0
 8003b5a:	0015      	movs	r5, r2
 8003b5c:	001f      	movs	r7, r3
  switch(msg)
 8003b5e:	0008      	movs	r0, r1
 8003b60:	2904      	cmp	r1, #4
 8003b62:	d858      	bhi.n	8003c16 <u8x8_d_ssd1306_sh1106_generic+0xc2>
 8003b64:	f7fc fad4 	bl	8000110 <__gnu_thumb1_case_uqi>
 8003b68:	1e0c5703 	.word	0x1e0c5703
 8003b6c:	2d          	.byte	0x2d
 8003b6d:	00          	.byte	0x00
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8003b6e:	492b      	ldr	r1, [pc, #172]	; (8003c1c <u8x8_d_ssd1306_sh1106_generic+0xc8>)
      if ( arg_int == 0 )
 8003b70:	2a00      	cmp	r2, #0
 8003b72:	d000      	beq.n	8003b76 <u8x8_d_ssd1306_sh1106_generic+0x22>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8003b74:	492a      	ldr	r1, [pc, #168]	; (8003c20 <u8x8_d_ssd1306_sh1106_generic+0xcc>)
 8003b76:	0020      	movs	r0, r4
 8003b78:	f7ff ff5c 	bl	8003a34 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8003b7c:	2001      	movs	r0, #1
}
 8003b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( arg_int == 0 )
 8003b80:	1ce6      	adds	r6, r4, #3
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	d107      	bne.n	8003b96 <u8x8_d_ssd1306_sh1106_generic+0x42>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8003b86:	0020      	movs	r0, r4
 8003b88:	4926      	ldr	r1, [pc, #152]	; (8003c24 <u8x8_d_ssd1306_sh1106_generic+0xd0>)
 8003b8a:	f7ff ff53 	bl	8003a34 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	7c9b      	ldrb	r3, [r3, #18]
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003b92:	77f3      	strb	r3, [r6, #31]
 8003b94:	e7f2      	b.n	8003b7c <u8x8_d_ssd1306_sh1106_generic+0x28>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8003b96:	0020      	movs	r0, r4
 8003b98:	4923      	ldr	r1, [pc, #140]	; (8003c28 <u8x8_d_ssd1306_sh1106_generic+0xd4>)
 8003b9a:	f7ff ff4b 	bl	8003a34 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	7cdb      	ldrb	r3, [r3, #19]
 8003ba2:	e7f6      	b.n	8003b92 <u8x8_d_ssd1306_sh1106_generic+0x3e>
      u8x8_cad_StartTransfer(u8x8);
 8003ba4:	0020      	movs	r0, r4
 8003ba6:	f7ff ff37 	bl	8003a18 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003baa:	2181      	movs	r1, #129	; 0x81
 8003bac:	0020      	movs	r0, r4
 8003bae:	f7ff ff1e 	bl	80039ee <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8003bb2:	0029      	movs	r1, r5
 8003bb4:	0020      	movs	r0, r4
 8003bb6:	f7ff ff21 	bl	80039fc <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003bba:	0020      	movs	r0, r4
 8003bbc:	f7ff ff33 	bl	8003a26 <u8x8_cad_EndTransfer>
 8003bc0:	e7dc      	b.n	8003b7c <u8x8_d_ssd1306_sh1106_generic+0x28>
      u8x8_cad_StartTransfer(u8x8);
 8003bc2:	0020      	movs	r0, r4
 8003bc4:	f7ff ff28 	bl	8003a18 <u8x8_cad_StartTransfer>
      x += u8x8->x_offset;
 8003bc8:	1ce3      	adds	r3, r4, #3
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8003bca:	797e      	ldrb	r6, [r7, #5]
      x += u8x8->x_offset;
 8003bcc:	7fd9      	ldrb	r1, [r3, #31]
      x *= 8;
 8003bce:	00f6      	lsls	r6, r6, #3
      x += u8x8->x_offset;
 8003bd0:	1876      	adds	r6, r6, r1
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8003bd2:	0020      	movs	r0, r4
 8003bd4:	2140      	movs	r1, #64	; 0x40
 8003bd6:	f7ff ff0a 	bl	80039ee <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003bda:	2110      	movs	r1, #16
      x += u8x8->x_offset;
 8003bdc:	b2f6      	uxtb	r6, r6
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003bde:	0933      	lsrs	r3, r6, #4
 8003be0:	4319      	orrs	r1, r3
 8003be2:	0020      	movs	r0, r4
 8003be4:	f7ff ff03 	bl	80039ee <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8003be8:	210f      	movs	r1, #15
 8003bea:	0020      	movs	r0, r4
 8003bec:	4031      	ands	r1, r6
 8003bee:	f7ff ff05 	bl	80039fc <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8003bf2:	23b0      	movs	r3, #176	; 0xb0
 8003bf4:	79b9      	ldrb	r1, [r7, #6]
 8003bf6:	0020      	movs	r0, r4
 8003bf8:	4319      	orrs	r1, r3
 8003bfa:	f7ff feff 	bl	80039fc <u8x8_cad_SendArg>
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8003bfe:	7939      	ldrb	r1, [r7, #4]
	arg_int--;
 8003c00:	3d01      	subs	r5, #1
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8003c02:	00c9      	lsls	r1, r1, #3
 8003c04:	0020      	movs	r0, r4
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	b2c9      	uxtb	r1, r1
	arg_int--;
 8003c0a:	b2ed      	uxtb	r5, r5
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8003c0c:	f7ff fefd 	bl	8003a0a <u8x8_cad_SendData>
      } while( arg_int > 0 );
 8003c10:	2d00      	cmp	r5, #0
 8003c12:	d1f4      	bne.n	8003bfe <u8x8_d_ssd1306_sh1106_generic+0xaa>
 8003c14:	e7d1      	b.n	8003bba <u8x8_d_ssd1306_sh1106_generic+0x66>
  switch(msg)
 8003c16:	2000      	movs	r0, #0
 8003c18:	e7b1      	b.n	8003b7e <u8x8_d_ssd1306_sh1106_generic+0x2a>
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	0800ef97 	.word	0x0800ef97
 8003c20:	0800ef9c 	.word	0x0800ef9c
 8003c24:	0800ef54 	.word	0x0800ef54
 8003c28:	0800ef5b 	.word	0x0800ef5b

08003c2c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	0004      	movs	r4, r0
 8003c30:	000d      	movs	r5, r1
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8003c32:	f7ff ff8f 	bl	8003b54 <u8x8_d_ssd1306_sh1106_generic>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d10a      	bne.n	8003c50 <u8x8_d_ssd1306_128x64_noname+0x24>
    return 1;
  
  switch(msg)
 8003c3a:	2d09      	cmp	r5, #9
 8003c3c:	d00a      	beq.n	8003c54 <u8x8_d_ssd1306_128x64_noname+0x28>
 8003c3e:	2d0a      	cmp	r5, #10
 8003c40:	d107      	bne.n	8003c52 <u8x8_d_ssd1306_128x64_noname+0x26>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8003c42:	0020      	movs	r0, r4
 8003c44:	f000 f815 	bl	8003c72 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8003c48:	0020      	movs	r0, r4
 8003c4a:	4905      	ldr	r1, [pc, #20]	; (8003c60 <u8x8_d_ssd1306_128x64_noname+0x34>)
 8003c4c:	f7ff fef2 	bl	8003a34 <u8x8_cad_SendSequence>
    return 1;
 8003c50:	2001      	movs	r0, #1
      break;
    default:
      return 0;
  }
  return 1;
}
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8003c54:	0020      	movs	r0, r4
 8003c56:	4903      	ldr	r1, [pc, #12]	; (8003c64 <u8x8_d_ssd1306_128x64_noname+0x38>)
 8003c58:	f000 f806 	bl	8003c68 <u8x8_d_helper_display_setup_memory>
      break;
 8003c5c:	e7f8      	b.n	8003c50 <u8x8_d_ssd1306_128x64_noname+0x24>
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	0800ef62 	.word	0x0800ef62
 8003c64:	0800efa4 	.word	0x0800efa4

08003c68 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8003c68:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003c6a:	7c8b      	ldrb	r3, [r1, #18]
 8003c6c:	3003      	adds	r0, #3
 8003c6e:	77c3      	strb	r3, [r0, #31]
}
 8003c70:	4770      	bx	lr

08003c72 <u8x8_d_helper_display_init>:
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003c72:	2300      	movs	r3, #0
{
 8003c74:	b570      	push	{r4, r5, r6, lr}
      u8x8_gpio_Init(u8x8);
 8003c76:	001a      	movs	r2, r3
 8003c78:	2128      	movs	r1, #40	; 0x28
 8003c7a:	6945      	ldr	r5, [r0, #20]
{
 8003c7c:	0004      	movs	r4, r0
      u8x8_gpio_Init(u8x8);
 8003c7e:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003c80:	2300      	movs	r3, #0
 8003c82:	68e5      	ldr	r5, [r4, #12]
 8003c84:	001a      	movs	r2, r3
 8003c86:	2114      	movs	r1, #20
 8003c88:	0020      	movs	r0, r4
 8003c8a:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003c8c:	0020      	movs	r0, r4
 8003c8e:	2201      	movs	r2, #1
 8003c90:	214b      	movs	r1, #75	; 0x4b
 8003c92:	f000 f846 	bl	8003d22 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	0020      	movs	r0, r4
 8003c9a:	791a      	ldrb	r2, [r3, #4]
 8003c9c:	2129      	movs	r1, #41	; 0x29
 8003c9e:	f000 f840 	bl	8003d22 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003ca2:	0020      	movs	r0, r4
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	214b      	movs	r1, #75	; 0x4b
 8003ca8:	f000 f83b 	bl	8003d22 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	0020      	movs	r0, r4
 8003cb0:	791a      	ldrb	r2, [r3, #4]
 8003cb2:	2129      	movs	r1, #41	; 0x29
 8003cb4:	f000 f835 	bl	8003d22 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003cb8:	0020      	movs	r0, r4
 8003cba:	2201      	movs	r2, #1
 8003cbc:	214b      	movs	r1, #75	; 0x4b
 8003cbe:	f000 f830 	bl	8003d22 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	2129      	movs	r1, #41	; 0x29
 8003cc6:	0020      	movs	r0, r4
 8003cc8:	795a      	ldrb	r2, [r3, #5]
 8003cca:	f000 f82a 	bl	8003d22 <u8x8_gpio_call>
}    
 8003cce:	bd70      	pop	{r4, r5, r6, pc}

08003cd0 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003cd0:	b513      	push	{r0, r1, r4, lr}
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003cd2:	466c      	mov	r4, sp
  tile.y_pos = y;
  tile.cnt = cnt;
 8003cd4:	7123      	strb	r3, [r4, #4]
  tile.tile_ptr = tile_ptr;
 8003cd6:	9b04      	ldr	r3, [sp, #16]
  tile.x_pos = x;
 8003cd8:	7161      	strb	r1, [r4, #5]
  tile.y_pos = y;
 8003cda:	71a2      	strb	r2, [r4, #6]
  tile.tile_ptr = tile_ptr;
 8003cdc:	9300      	str	r3, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003cde:	2201      	movs	r2, #1
 8003ce0:	466b      	mov	r3, sp
 8003ce2:	210f      	movs	r1, #15
 8003ce4:	6884      	ldr	r4, [r0, #8]
 8003ce6:	47a0      	blx	r4
}
 8003ce8:	bd16      	pop	{r1, r2, r4, pc}

08003cea <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003cea:	2300      	movs	r3, #0
{
 8003cec:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003cee:	001a      	movs	r2, r3
 8003cf0:	2109      	movs	r1, #9
 8003cf2:	6884      	ldr	r4, [r0, #8]
 8003cf4:	47a0      	blx	r4
}
 8003cf6:	bd10      	pop	{r4, pc}

08003cf8 <u8x8_InitDisplay>:
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003cf8:	2300      	movs	r3, #0
{
 8003cfa:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003cfc:	001a      	movs	r2, r3
 8003cfe:	210a      	movs	r1, #10
 8003d00:	6884      	ldr	r4, [r0, #8]
 8003d02:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8003d04:	bd10      	pop	{r4, pc}

08003d06 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003d06:	b510      	push	{r4, lr}
 8003d08:	000a      	movs	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	210b      	movs	r1, #11
 8003d0e:	6884      	ldr	r4, [r0, #8]
 8003d10:	47a0      	blx	r4
}
 8003d12:	bd10      	pop	{r4, pc}

08003d14 <u8x8_RefreshDisplay>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003d14:	2300      	movs	r3, #0
{
 8003d16:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003d18:	001a      	movs	r2, r3
 8003d1a:	2110      	movs	r1, #16
 8003d1c:	6884      	ldr	r4, [r0, #8]
 8003d1e:	47a0      	blx	r4
}
 8003d20:	bd10      	pop	{r4, pc}

08003d22 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003d22:	b510      	push	{r4, lr}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003d24:	2300      	movs	r3, #0
 8003d26:	6944      	ldr	r4, [r0, #20]
 8003d28:	47a0      	blx	r4
}
 8003d2a:	bd10      	pop	{r4, pc}

08003d2c <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	4770      	bx	lr

08003d30 <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8003d30:	2300      	movs	r3, #0
    u8x8->display_cb = u8x8_dummy_cb;
 8003d32:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <u8x8_SetupDefaults+0x24>)
    u8x8->display_info = NULL;
 8003d34:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003d36:	6082      	str	r2, [r0, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003d38:	60c2      	str	r2, [r0, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003d3a:	6102      	str	r2, [r0, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003d3c:	6142      	str	r2, [r0, #20]
    u8x8->is_font_inverse_mode = 0;
 8003d3e:	1d02      	adds	r2, r0, #4
 8003d40:	77d3      	strb	r3, [r2, #31]
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003d42:	1dc2      	adds	r2, r0, #7
 8003d44:	77d3      	strb	r3, [r2, #31]
    u8x8->bus_clock = 0;		/* issue 769 */
 8003d46:	6183      	str	r3, [r0, #24]
    u8x8->i2c_address = 255;
 8003d48:	1d42      	adds	r2, r0, #5
 8003d4a:	33ff      	adds	r3, #255	; 0xff
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003d4c:	3028      	adds	r0, #40	; 0x28
    u8x8->i2c_address = 255;
 8003d4e:	77d3      	strb	r3, [r2, #31]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003d50:	7003      	strb	r3, [r0, #0]
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003d52:	4770      	bx	lr
 8003d54:	08003d2d 	.word	0x08003d2d

08003d58 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	0004      	movs	r4, r0
 8003d5c:	000f      	movs	r7, r1
 8003d5e:	0016      	movs	r6, r2
 8003d60:	001d      	movs	r5, r3
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003d62:	f7ff ffe5 	bl	8003d30 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003d66:	9b06      	ldr	r3, [sp, #24]
  u8x8->display_cb = display_cb;
 8003d68:	60a7      	str	r7, [r4, #8]
  u8x8->cad_cb = cad_cb;
 8003d6a:	60e6      	str	r6, [r4, #12]
  u8x8->byte_cb = byte_cb;
 8003d6c:	6125      	str	r5, [r4, #16]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003d6e:	0020      	movs	r0, r4
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003d70:	6163      	str	r3, [r4, #20]
  u8x8_SetupMemory(u8x8);
 8003d72:	f7ff ffba 	bl	8003cea <u8x8_SetupMemory>
}
 8003d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d78 <EEPROM_Read>:
int Select = 0;
uint8_t SelectValue[4] ={255,5,6,60};


u8g2_t u8g2;
void EEPROM_Read(){
 8003d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t eeprom[6];
	ee_read(63,6,eeprom);
 8003d7a:	2106      	movs	r1, #6
 8003d7c:	466a      	mov	r2, sp
 8003d7e:	203f      	movs	r0, #63	; 0x3f
 8003d80:	f000 fe3a 	bl	80049f8 <ee_read>
	SS = eeprom[0];
 8003d84:	466b      	mov	r3, sp
 8003d86:	4d15      	ldr	r5, [pc, #84]	; (8003ddc <EEPROM_Read+0x64>)
 8003d88:	781e      	ldrb	r6, [r3, #0]
	NN = eeprom[1];
 8003d8a:	4f15      	ldr	r7, [pc, #84]	; (8003de0 <EEPROM_Read+0x68>)
	SS = eeprom[0];
 8003d8c:	702e      	strb	r6, [r5, #0]
	NN = eeprom[1];
 8003d8e:	785b      	ldrb	r3, [r3, #1]
	Mode = eeprom[2];
//	SelectValue[0] = eeprom[3];
	SelectValue[1] = eeprom[3];
	SelectValue[2] = eeprom[4];
 8003d90:	466a      	mov	r2, sp
	NN = eeprom[1];
 8003d92:	703b      	strb	r3, [r7, #0]
 8003d94:	469c      	mov	ip, r3
	Mode = eeprom[2];
 8003d96:	466b      	mov	r3, sp
 8003d98:	789c      	ldrb	r4, [r3, #2]
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <EEPROM_Read+0x6c>)
	SelectValue[3] = eeprom[5];

	if(NN>37 || NN<0){
 8003d9c:	4660      	mov	r0, ip
	Mode = eeprom[2];
 8003d9e:	701c      	strb	r4, [r3, #0]
	SelectValue[1] = eeprom[3];
 8003da0:	466b      	mov	r3, sp
 8003da2:	78d9      	ldrb	r1, [r3, #3]
 8003da4:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <EEPROM_Read+0x70>)
 8003da6:	7059      	strb	r1, [r3, #1]
	SelectValue[2] = eeprom[4];
 8003da8:	7912      	ldrb	r2, [r2, #4]
 8003daa:	709a      	strb	r2, [r3, #2]
	if(NN>37 || NN<0){
 8003dac:	2825      	cmp	r0, #37	; 0x25
 8003dae:	d901      	bls.n	8003db4 <EEPROM_Read+0x3c>
		NN=1;
 8003db0:	2001      	movs	r0, #1
 8003db2:	7038      	strb	r0, [r7, #0]
	}
	if(SS>13 || SS<0){
 8003db4:	2e0d      	cmp	r6, #13
 8003db6:	d901      	bls.n	8003dbc <EEPROM_Read+0x44>
		SS=1;
 8003db8:	2601      	movs	r6, #1
 8003dba:	702e      	strb	r6, [r5, #0]
	}
	if(Mode<0 || Mode>1){
 8003dbc:	2c01      	cmp	r4, #1
 8003dbe:	d902      	bls.n	8003dc6 <EEPROM_Read+0x4e>
		Mode=0;
 8003dc0:	2400      	movs	r4, #0
 8003dc2:	4808      	ldr	r0, [pc, #32]	; (8003de4 <EEPROM_Read+0x6c>)
 8003dc4:	7004      	strb	r4, [r0, #0]
	}
	if(SelectValue[1]<0 || SelectValue[1]>16){
 8003dc6:	2910      	cmp	r1, #16
 8003dc8:	d901      	bls.n	8003dce <EEPROM_Read+0x56>
		SelectValue[1] = 5;
 8003dca:	2105      	movs	r1, #5
 8003dcc:	7059      	strb	r1, [r3, #1]
	}
	if(SelectValue[2]<0 || SelectValue[2]>12){
 8003dce:	2a0c      	cmp	r2, #12
 8003dd0:	d901      	bls.n	8003dd6 <EEPROM_Read+0x5e>
		SelectValue[2] = 6;
 8003dd2:	2206      	movs	r2, #6
 8003dd4:	709a      	strb	r2, [r3, #2]
	}
//	if(SelectValue[3]<0 || SelectValue[3]>180){
		SelectValue[3] = 30;
 8003dd6:	221e      	movs	r2, #30
 8003dd8:	70da      	strb	r2, [r3, #3]
//	}
}
 8003dda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003ddc:	20000035 	.word	0x20000035
 8003de0:	20000034 	.word	0x20000034
 8003de4:	200006e0 	.word	0x200006e0
 8003de8:	20000036 	.word	0x20000036

08003dec <EEPROM_Write>:
void EEPROM_Write(){
 8003dec:	b507      	push	{r0, r1, r2, lr}
	uint8_t eeprom[6];
	eeprom[0]=SS;
 8003dee:	466a      	mov	r2, sp
	eeprom[1]=NN;
	eeprom[2]=Mode;
	eeprom[3]=SelectValue[1];
 8003df0:	4669      	mov	r1, sp
	eeprom[0]=SS;
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <EEPROM_Write+0x38>)
	eeprom[4]=SelectValue[2];
	eeprom[5]=SelectValue[3];
	ee_writeToRam(63,6,eeprom);
 8003df4:	203f      	movs	r0, #63	; 0x3f
	eeprom[0]=SS;
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	7013      	strb	r3, [r2, #0]
	eeprom[1]=NN;
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <EEPROM_Write+0x3c>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	7053      	strb	r3, [r2, #1]
	eeprom[2]=Mode;
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <EEPROM_Write+0x40>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	7093      	strb	r3, [r2, #2]
	eeprom[3]=SelectValue[1];
 8003e06:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <EEPROM_Write+0x44>)
 8003e08:	785a      	ldrb	r2, [r3, #1]
 8003e0a:	70ca      	strb	r2, [r1, #3]
	eeprom[4]=SelectValue[2];
 8003e0c:	789a      	ldrb	r2, [r3, #2]
 8003e0e:	710a      	strb	r2, [r1, #4]
	eeprom[5]=SelectValue[3];
 8003e10:	78db      	ldrb	r3, [r3, #3]
 8003e12:	466a      	mov	r2, sp
 8003e14:	714b      	strb	r3, [r1, #5]
	ee_writeToRam(63,6,eeprom);
 8003e16:	2106      	movs	r1, #6
 8003e18:	f000 fe18 	bl	8004a4c <ee_writeToRam>
	ee_commit();
 8003e1c:	f000 fe2c 	bl	8004a78 <ee_commit>
}
 8003e20:	bd07      	pop	{r0, r1, r2, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	20000035 	.word	0x20000035
 8003e28:	20000034 	.word	0x20000034
 8003e2c:	200006e0 	.word	0x200006e0
 8003e30:	20000036 	.word	0x20000036

08003e34 <LM_Init>:

void LM_Init(){
 8003e34:	b510      	push	{r4, lr}
	u8g2_Init(&u8g2);
 8003e36:	4805      	ldr	r0, [pc, #20]	; (8003e4c <LM_Init+0x18>)
 8003e38:	f001 f84c 	bl	8004ed4 <u8g2_Init>
	veml7700_init();
 8003e3c:	f001 f8be 	bl	8004fbc <veml7700_init>
	ee_init();
 8003e40:	f000 fdfc 	bl	8004a3c <ee_init>
	EEPROM_Read();
 8003e44:	f7ff ff98 	bl	8003d78 <EEPROM_Read>
}
 8003e48:	bd10      	pop	{r4, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	200006f8 	.word	0x200006f8

08003e50 <OLED_Off>:

void OLED_Off(){
 8003e50:	b570      	push	{r4, r5, r6, lr}

	if(HAL_GetTick()-Sleep>SelectValue[3]*1000){
 8003e52:	f001 f953 	bl	80050fc <HAL_GetTick>
 8003e56:	4c12      	ldr	r4, [pc, #72]	; (8003ea0 <OLED_Off+0x50>)
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	1ac0      	subs	r0, r0, r3
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <OLED_Off+0x54>)
 8003e5e:	78da      	ldrb	r2, [r3, #3]
 8003e60:	23fa      	movs	r3, #250	; 0xfa
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4353      	muls	r3, r2
 8003e66:	4298      	cmp	r0, r3
 8003e68:	d918      	bls.n	8003e9c <OLED_Off+0x4c>
		EEPROM_Write();
 8003e6a:	f7ff ffbf 	bl	8003dec <EEPROM_Write>
		u8g2_SetPowerSave(&u8g2,1);
 8003e6e:	4d0e      	ldr	r5, [pc, #56]	; (8003ea8 <OLED_Off+0x58>)
 8003e70:	2101      	movs	r1, #1
 8003e72:	0028      	movs	r0, r5
 8003e74:	f7ff ff47 	bl	8003d06 <u8x8_SetPowerSave>
		HAL_SuspendTick();
 8003e78:	f001 f958 	bl	800512c <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f001 ffae 	bl	8005de0 <HAL_PWR_EnterSLEEPMode>
		HAL_ResumeTick();
 8003e84:	f001 f95a 	bl	800513c <HAL_ResumeTick>
		u8g2_SetPowerSave(&u8g2,0);
 8003e88:	2100      	movs	r1, #0
 8003e8a:	0028      	movs	r0, r5
 8003e8c:	f7ff ff3b 	bl	8003d06 <u8x8_SetPowerSave>
		Sleep = HAL_GetTick();
 8003e90:	f001 f934 	bl	80050fc <HAL_GetTick>
 8003e94:	6020      	str	r0, [r4, #0]
		HAL_Delay(100);
 8003e96:	2064      	movs	r0, #100	; 0x64
 8003e98:	f001 f936 	bl	8005108 <HAL_Delay>
	}
}
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	200006e8 	.word	0x200006e8
 8003ea4:	20000036 	.word	0x20000036
 8003ea8:	200006f8 	.word	0x200006f8

08003eac <T>:
uint8_t T(){
 8003eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t n = 0;
	float distant = 100.0f;
	float TMode_N = sqrt(pow(2,EV)*shutters[SS]);
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <T+0x68>)
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	05c9      	lsls	r1, r1, #23
 8003eba:	f005 fe9f 	bl	8009bfc <pow>
 8003ebe:	0004      	movs	r4, r0
 8003ec0:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <T+0x6c>)
 8003ec2:	000d      	movs	r5, r1
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	4a15      	ldr	r2, [pc, #84]	; (8003f1c <T+0x70>)
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	5898      	ldr	r0, [r3, r2]
 8003ecc:	f7fe ffa6 	bl	8002e1c <__aeabi_f2d>
 8003ed0:	0022      	movs	r2, r4
	for(int i = 0;i<38;i++){
 8003ed2:	2400      	movs	r4, #0
	float TMode_N = sqrt(pow(2,EV)*shutters[SS]);
 8003ed4:	002b      	movs	r3, r5
 8003ed6:	f7fe f8f9 	bl	80020cc <__aeabi_dmul>
 8003eda:	f005 fefd 	bl	8009cd8 <sqrt>
 8003ede:	f7fe ffe5 	bl	8002eac <__aeabi_d2f>
	uint8_t n = 0;
 8003ee2:	0026      	movs	r6, r4
	float distant = 100.0f;
 8003ee4:	4f0e      	ldr	r7, [pc, #56]	; (8003f20 <T+0x74>)
	float TMode_N = sqrt(pow(2,EV)*shutters[SS]);
 8003ee6:	9001      	str	r0, [sp, #4]
		float temp_distant = fabs(TMode_N-N[i]);
 8003ee8:	4a0e      	ldr	r2, [pc, #56]	; (8003f24 <T+0x78>)
 8003eea:	00a3      	lsls	r3, r4, #2
 8003eec:	58d1      	ldr	r1, [r2, r3]
 8003eee:	9801      	ldr	r0, [sp, #4]
 8003ef0:	f7fc ff9c 	bl	8000e2c <__aeabi_fsub>
 8003ef4:	0045      	lsls	r5, r0, #1
 8003ef6:	086d      	lsrs	r5, r5, #1
		if(temp_distant<distant){
 8003ef8:	1c39      	adds	r1, r7, #0
 8003efa:	1c28      	adds	r0, r5, #0
 8003efc:	f7fc fae2 	bl	80004c4 <__aeabi_fcmplt>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d001      	beq.n	8003f08 <T+0x5c>
			distant = temp_distant;
			n = i;
 8003f04:	b2e6      	uxtb	r6, r4
			distant = temp_distant;
 8003f06:	1c2f      	adds	r7, r5, #0
	for(int i = 0;i<38;i++){
 8003f08:	3401      	adds	r4, #1
 8003f0a:	2c26      	cmp	r4, #38	; 0x26
 8003f0c:	d1ec      	bne.n	8003ee8 <T+0x3c>
		}
	}
	return n;
}
 8003f0e:	0030      	movs	r0, r6
 8003f10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	200006d0 	.word	0x200006d0
 8003f18:	20000035 	.word	0x20000035
 8003f1c:	0800f124 	.word	0x0800f124
 8003f20:	42c80000 	.word	0x42c80000
 8003f24:	0800f068 	.word	0x0800f068

08003f28 <A>:

uint8_t A(){
 8003f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t s = 0;
	float distant = 100.00000f;
	float AMode_S = (N[NN]*N[NN])/pow(2,EV);
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <A+0x6c>)
 8003f2e:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <A+0x70>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2000      	movs	r0, #0
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	589e      	ldr	r6, [r3, r2]
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <A+0x74>)
 8003f3a:	05c9      	lsls	r1, r1, #23
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f005 fe5c 	bl	8009bfc <pow>
 8003f44:	0004      	movs	r4, r0
 8003f46:	000d      	movs	r5, r1
 8003f48:	1c30      	adds	r0, r6, #0
 8003f4a:	1c31      	adds	r1, r6, #0
 8003f4c:	f7fc fe48 	bl	8000be0 <__aeabi_fmul>
 8003f50:	f7fe ff64 	bl	8002e1c <__aeabi_f2d>
 8003f54:	0022      	movs	r2, r4
	for(int i = 0;i<14;i++){
 8003f56:	2400      	movs	r4, #0
	float AMode_S = (N[NN]*N[NN])/pow(2,EV);
 8003f58:	002b      	movs	r3, r5
 8003f5a:	f7fd fcb5 	bl	80018c8 <__aeabi_ddiv>
 8003f5e:	f7fe ffa5 	bl	8002eac <__aeabi_d2f>
	uint8_t s = 0;
 8003f62:	0026      	movs	r6, r4
	float distant = 100.00000f;
 8003f64:	4f0e      	ldr	r7, [pc, #56]	; (8003fa0 <A+0x78>)
	float AMode_S = (N[NN]*N[NN])/pow(2,EV);
 8003f66:	9001      	str	r0, [sp, #4]
		float temp_distant = fabs(AMode_S-shutters[i]);
 8003f68:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <A+0x7c>)
 8003f6a:	00a3      	lsls	r3, r4, #2
 8003f6c:	5899      	ldr	r1, [r3, r2]
 8003f6e:	9801      	ldr	r0, [sp, #4]
 8003f70:	f7fc ff5c 	bl	8000e2c <__aeabi_fsub>
 8003f74:	0045      	lsls	r5, r0, #1
 8003f76:	086d      	lsrs	r5, r5, #1
		if(temp_distant<distant){
 8003f78:	1c39      	adds	r1, r7, #0
 8003f7a:	1c28      	adds	r0, r5, #0
 8003f7c:	f7fc faa2 	bl	80004c4 <__aeabi_fcmplt>
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d001      	beq.n	8003f88 <A+0x60>
			distant = temp_distant;
			s = i;
 8003f84:	b2e6      	uxtb	r6, r4
			distant = temp_distant;
 8003f86:	1c2f      	adds	r7, r5, #0
	for(int i = 0;i<14;i++){
 8003f88:	3401      	adds	r4, #1
 8003f8a:	2c0e      	cmp	r4, #14
 8003f8c:	d1ec      	bne.n	8003f68 <A+0x40>
		}
	}
	return s;
}
 8003f8e:	0030      	movs	r0, r6
 8003f90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	20000034 	.word	0x20000034
 8003f98:	0800f068 	.word	0x0800f068
 8003f9c:	200006d0 	.word	0x200006d0
 8003fa0:	42c80000 	.word	0x42c80000
 8003fa4:	0800f124 	.word	0x0800f124

08003fa8 <Aim>:
void Aim()
{
 8003fa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(Mode ==1){
 8003faa:	4d1b      	ldr	r5, [pc, #108]	; (8004018 <Aim+0x70>)
 8003fac:	782b      	ldrb	r3, [r5, #0]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d116      	bne.n	8003fe0 <Aim+0x38>
	    if(x!=69){
 8003fb2:	4c1a      	ldr	r4, [pc, #104]	; (800401c <Aim+0x74>)
 8003fb4:	7823      	ldrb	r3, [r4, #0]
 8003fb6:	2b45      	cmp	r3, #69	; 0x45
 8003fb8:	d001      	beq.n	8003fbe <Aim+0x16>
	      x=x+2;
 8003fba:	3302      	adds	r3, #2
 8003fbc:	7023      	strb	r3, [r4, #0]
	    }
	    u8g2_SetDrawColor(&u8g2,2);
 8003fbe:	4e18      	ldr	r6, [pc, #96]	; (8004020 <Aim+0x78>)
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	0030      	movs	r0, r6
 8003fc4:	f7ff fbaf 	bl	8003726 <u8g2_SetDrawColor>
	    u8g2_DrawBox(&u8g2,x,12,6,8);
 8003fc8:	2308      	movs	r3, #8
 8003fca:	7821      	ldrb	r1, [r4, #0]
 8003fcc:	0030      	movs	r0, r6
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	220c      	movs	r2, #12
 8003fd2:	3b02      	subs	r3, #2
 8003fd4:	f7ff f810 	bl	8002ff8 <u8g2_DrawBox>
	    u8g2_SetDrawColor(&u8g2,1);
 8003fd8:	2101      	movs	r1, #1
 8003fda:	0030      	movs	r0, r6
 8003fdc:	f7ff fba3 	bl	8003726 <u8g2_SetDrawColor>
	  }
	  if(Mode ==0){
 8003fe0:	782b      	ldrb	r3, [r5, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d116      	bne.n	8004014 <Aim+0x6c>
	    if(x!=59){
 8003fe6:	4d0d      	ldr	r5, [pc, #52]	; (800401c <Aim+0x74>)
 8003fe8:	782b      	ldrb	r3, [r5, #0]
 8003fea:	2b3b      	cmp	r3, #59	; 0x3b
 8003fec:	d001      	beq.n	8003ff2 <Aim+0x4a>
	      x=x-2;
 8003fee:	3b02      	subs	r3, #2
 8003ff0:	702b      	strb	r3, [r5, #0]
	    }
	    u8g2_SetDrawColor(&u8g2,2);
 8003ff2:	4c0b      	ldr	r4, [pc, #44]	; (8004020 <Aim+0x78>)
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	0020      	movs	r0, r4
 8003ff8:	f7ff fb95 	bl	8003726 <u8g2_SetDrawColor>
	    u8g2_DrawBox(&u8g2,x,12,7,8);
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	7829      	ldrb	r1, [r5, #0]
 8004000:	0020      	movs	r0, r4
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	220c      	movs	r2, #12
 8004006:	3b01      	subs	r3, #1
 8004008:	f7fe fff6 	bl	8002ff8 <u8g2_DrawBox>
	    u8g2_SetDrawColor(&u8g2,1);
 800400c:	2101      	movs	r1, #1
 800400e:	0020      	movs	r0, r4
 8004010:	f7ff fb89 	bl	8003726 <u8g2_SetDrawColor>
	  }
}
 8004014:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	200006e0 	.word	0x200006e0
 800401c:	20000098 	.word	0x20000098
 8004020:	200006f8 	.word	0x200006f8

08004024 <KeyScan>:
uint8_t KeyScan(uint8_t Key_Value,uint8_t Length)
{
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	000f      	movs	r7, r1
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && isKey1 ==0){
 8004028:	2180      	movs	r1, #128	; 0x80
{
 800402a:	0004      	movs	r4, r0
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && isKey1 ==0){
 800402c:	0209      	lsls	r1, r1, #8
 800402e:	4847      	ldr	r0, [pc, #284]	; (800414c <KeyScan+0x128>)
 8004030:	f001 fa74 	bl	800551c <HAL_GPIO_ReadPin>
 8004034:	4d46      	ldr	r5, [pc, #280]	; (8004150 <KeyScan+0x12c>)
 8004036:	782b      	ldrb	r3, [r5, #0]
 8004038:	4318      	orrs	r0, r3
 800403a:	b2c0      	uxtb	r0, r0
 800403c:	2800      	cmp	r0, #0
 800403e:	d10b      	bne.n	8004058 <KeyScan+0x34>
		Key_Value++;
 8004040:	1c66      	adds	r6, r4, #1
 8004042:	b2f6      	uxtb	r6, r6
		if(Key_Value>Length){
 8004044:	42be      	cmp	r6, r7
 8004046:	d900      	bls.n	800404a <KeyScan+0x26>
			Key_Value--;
 8004048:	0026      	movs	r6, r4
		}
		isKey1 = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	702b      	strb	r3, [r5, #0]
		time = HAL_GetTick();
 800404e:	f001 f855 	bl	80050fc <HAL_GetTick>
 8004052:	0034      	movs	r4, r6
 8004054:	4b3f      	ldr	r3, [pc, #252]	; (8004154 <KeyScan+0x130>)
 8004056:	6018      	str	r0, [r3, #0]
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) && isKey1 ==0){
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	483c      	ldr	r0, [pc, #240]	; (800414c <KeyScan+0x128>)
 800405c:	01c9      	lsls	r1, r1, #7
 800405e:	f001 fa5d 	bl	800551c <HAL_GPIO_ReadPin>
 8004062:	782b      	ldrb	r3, [r5, #0]
 8004064:	4318      	orrs	r0, r3
 8004066:	b2c0      	uxtb	r0, r0
 8004068:	2800      	cmp	r0, #0
 800406a:	d109      	bne.n	8004080 <KeyScan+0x5c>
		if(Key_Value-1<0){
 800406c:	2c00      	cmp	r4, #0
 800406e:	d001      	beq.n	8004074 <KeyScan+0x50>
			Key_Value=0;
		}
		else{
			Key_Value--;
 8004070:	3c01      	subs	r4, #1
 8004072:	b2e4      	uxtb	r4, r4
		}
		isKey1 = 1;
 8004074:	2301      	movs	r3, #1
 8004076:	702b      	strb	r3, [r5, #0]
		time = HAL_GetTick();
 8004078:	f001 f840 	bl	80050fc <HAL_GetTick>
 800407c:	4b35      	ldr	r3, [pc, #212]	; (8004154 <KeyScan+0x130>)
 800407e:	6018      	str	r0, [r3, #0]
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) && isKey == 0){
 8004080:	2180      	movs	r1, #128	; 0x80
 8004082:	4832      	ldr	r0, [pc, #200]	; (800414c <KeyScan+0x128>)
 8004084:	0189      	lsls	r1, r1, #6
 8004086:	f001 fa49 	bl	800551c <HAL_GPIO_ReadPin>
 800408a:	4e33      	ldr	r6, [pc, #204]	; (8004158 <KeyScan+0x134>)
 800408c:	7833      	ldrb	r3, [r6, #0]
 800408e:	4318      	orrs	r0, r3
 8004090:	b2c0      	uxtb	r0, r0
 8004092:	2800      	cmp	r0, #0
 8004094:	d105      	bne.n	80040a2 <KeyScan+0x7e>
		isKey = 1;
 8004096:	2301      	movs	r3, #1
 8004098:	7033      	strb	r3, [r6, #0]
		time = HAL_GetTick();
 800409a:	f001 f82f 	bl	80050fc <HAL_GetTick>
 800409e:	4b2d      	ldr	r3, [pc, #180]	; (8004154 <KeyScan+0x130>)
 80040a0:	6018      	str	r0, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) && isKey== 1){
 80040a2:	2180      	movs	r1, #128	; 0x80
 80040a4:	4829      	ldr	r0, [pc, #164]	; (800414c <KeyScan+0x128>)
 80040a6:	0189      	lsls	r1, r1, #6
 80040a8:	f001 fa38 	bl	800551c <HAL_GPIO_ReadPin>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d016      	beq.n	80040de <KeyScan+0xba>
 80040b0:	7837      	ldrb	r7, [r6, #0]
 80040b2:	2f01      	cmp	r7, #1
 80040b4:	d113      	bne.n	80040de <KeyScan+0xba>
		if(HAL_GetTick()-time<1000){
 80040b6:	f001 f821 	bl	80050fc <HAL_GetTick>
 80040ba:	4b26      	ldr	r3, [pc, #152]	; (8004154 <KeyScan+0x130>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	1ac0      	subs	r0, r0, r3
 80040c0:	23fa      	movs	r3, #250	; 0xfa
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4298      	cmp	r0, r3
 80040c6:	d21e      	bcs.n	8004106 <KeyScan+0xe2>
			Mode = !Mode;
 80040c8:	4a24      	ldr	r2, [pc, #144]	; (800415c <KeyScan+0x138>)
 80040ca:	7813      	ldrb	r3, [r2, #0]
 80040cc:	4259      	negs	r1, r3
 80040ce:	414b      	adcs	r3, r1
 80040d0:	7013      	strb	r3, [r2, #0]
		}
		else{
			Mueu = 1;
		}
		isKey = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	7033      	strb	r3, [r6, #0]
		Sleep = HAL_GetTick();
 80040d6:	f001 f811 	bl	80050fc <HAL_GetTick>
 80040da:	4b21      	ldr	r3, [pc, #132]	; (8004160 <KeyScan+0x13c>)
 80040dc:	6018      	str	r0, [r3, #0]
	}
	if((!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) || !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) && isKey1 == 1){
 80040de:	2180      	movs	r1, #128	; 0x80
 80040e0:	481a      	ldr	r0, [pc, #104]	; (800414c <KeyScan+0x128>)
 80040e2:	01c9      	lsls	r1, r1, #7
 80040e4:	f001 fa1a 	bl	800551c <HAL_GPIO_ReadPin>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d10f      	bne.n	800410c <KeyScan+0xe8>
 80040ec:	782b      	ldrb	r3, [r5, #0]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d113      	bne.n	800411a <KeyScan+0xf6>
		if(HAL_GetTick()-time>150){
 80040f2:	f001 f803 	bl	80050fc <HAL_GetTick>
 80040f6:	4b17      	ldr	r3, [pc, #92]	; (8004154 <KeyScan+0x130>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	1ac0      	subs	r0, r0, r3
 80040fc:	2896      	cmp	r0, #150	; 0x96
 80040fe:	d90c      	bls.n	800411a <KeyScan+0xf6>
			isKey1 = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	702b      	strb	r3, [r5, #0]
 8004104:	e009      	b.n	800411a <KeyScan+0xf6>
			Mueu = 1;
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <KeyScan+0x140>)
 8004108:	701f      	strb	r7, [r3, #0]
 800410a:	e7e2      	b.n	80040d2 <KeyScan+0xae>
	if((!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) || !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) && isKey1 == 1){
 800410c:	2180      	movs	r1, #128	; 0x80
 800410e:	480f      	ldr	r0, [pc, #60]	; (800414c <KeyScan+0x128>)
 8004110:	0209      	lsls	r1, r1, #8
 8004112:	f001 fa03 	bl	800551c <HAL_GPIO_ReadPin>
 8004116:	2800      	cmp	r0, #0
 8004118:	d0e8      	beq.n	80040ec <KeyScan+0xc8>
		}
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && isKey1 == 1){
 800411a:	2180      	movs	r1, #128	; 0x80
 800411c:	480b      	ldr	r0, [pc, #44]	; (800414c <KeyScan+0x128>)
 800411e:	01c9      	lsls	r1, r1, #7
 8004120:	f001 f9fc 	bl	800551c <HAL_GPIO_ReadPin>
 8004124:	2800      	cmp	r0, #0
 8004126:	d00f      	beq.n	8004148 <KeyScan+0x124>
 8004128:	2180      	movs	r1, #128	; 0x80
 800412a:	4808      	ldr	r0, [pc, #32]	; (800414c <KeyScan+0x128>)
 800412c:	0209      	lsls	r1, r1, #8
 800412e:	f001 f9f5 	bl	800551c <HAL_GPIO_ReadPin>
 8004132:	2800      	cmp	r0, #0
 8004134:	d008      	beq.n	8004148 <KeyScan+0x124>
 8004136:	782b      	ldrb	r3, [r5, #0]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <KeyScan+0x124>
		isKey1 =0;
 800413c:	2300      	movs	r3, #0
 800413e:	702b      	strb	r3, [r5, #0]
		Sleep = HAL_GetTick();
 8004140:	f000 ffdc 	bl	80050fc <HAL_GetTick>
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <KeyScan+0x13c>)
 8004146:	6018      	str	r0, [r3, #0]
	}
	return Key_Value;
}
 8004148:	0020      	movs	r0, r4
 800414a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800414c:	50000400 	.word	0x50000400
 8004150:	200006ed 	.word	0x200006ed
 8004154:	200006f0 	.word	0x200006f0
 8004158:	200006ec 	.word	0x200006ec
 800415c:	200006e0 	.word	0x200006e0
 8004160:	200006e8 	.word	0x200006e8
 8004164:	200006e1 	.word	0x200006e1

08004168 <KeyScan1>:
void KeyScan1(){
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)&& isKey1 ==0){
 8004168:	2180      	movs	r1, #128	; 0x80
void KeyScan1(){
 800416a:	b570      	push	{r4, r5, r6, lr}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)&& isKey1 ==0){
 800416c:	4849      	ldr	r0, [pc, #292]	; (8004294 <KeyScan1+0x12c>)
 800416e:	0209      	lsls	r1, r1, #8
 8004170:	f001 f9d4 	bl	800551c <HAL_GPIO_ReadPin>
 8004174:	4c48      	ldr	r4, [pc, #288]	; (8004298 <KeyScan1+0x130>)
 8004176:	7823      	ldrb	r3, [r4, #0]
 8004178:	4318      	orrs	r0, r3
 800417a:	b2c0      	uxtb	r0, r0
 800417c:	2800      	cmp	r0, #0
 800417e:	d10b      	bne.n	8004198 <KeyScan1+0x30>
		Select++;
 8004180:	4b46      	ldr	r3, [pc, #280]	; (800429c <KeyScan1+0x134>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	1c51      	adds	r1, r2, #1
		if(Select==3){
 8004186:	2a02      	cmp	r2, #2
 8004188:	d000      	beq.n	800418c <KeyScan1+0x24>
		Select++;
 800418a:	6019      	str	r1, [r3, #0]
			Select =2;
		}
		isKey1 =1;
 800418c:	2301      	movs	r3, #1
 800418e:	7023      	strb	r3, [r4, #0]
		time = HAL_GetTick();
 8004190:	f000 ffb4 	bl	80050fc <HAL_GetTick>
 8004194:	4b42      	ldr	r3, [pc, #264]	; (80042a0 <KeyScan1+0x138>)
 8004196:	6018      	str	r0, [r3, #0]
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)&& isKey1 ==0){
 8004198:	2180      	movs	r1, #128	; 0x80
 800419a:	483e      	ldr	r0, [pc, #248]	; (8004294 <KeyScan1+0x12c>)
 800419c:	01c9      	lsls	r1, r1, #7
 800419e:	f001 f9bd 	bl	800551c <HAL_GPIO_ReadPin>
 80041a2:	7823      	ldrb	r3, [r4, #0]
 80041a4:	4318      	orrs	r0, r3
 80041a6:	b2c0      	uxtb	r0, r0
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d10a      	bne.n	80041c2 <KeyScan1+0x5a>
		Select--;
 80041ac:	4a3b      	ldr	r2, [pc, #236]	; (800429c <KeyScan1+0x134>)
		if(Select<0){
 80041ae:	6813      	ldr	r3, [r2, #0]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	d431      	bmi.n	8004218 <KeyScan1+0xb0>
		Select--;
 80041b4:	6013      	str	r3, [r2, #0]
			Select = 0;
		}
		isKey1 =1;
 80041b6:	2301      	movs	r3, #1
 80041b8:	7023      	strb	r3, [r4, #0]
		time = HAL_GetTick();
 80041ba:	f000 ff9f 	bl	80050fc <HAL_GetTick>
 80041be:	4b38      	ldr	r3, [pc, #224]	; (80042a0 <KeyScan1+0x138>)
 80041c0:	6018      	str	r0, [r3, #0]
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) && isKey == 0){
 80041c2:	2180      	movs	r1, #128	; 0x80
 80041c4:	4833      	ldr	r0, [pc, #204]	; (8004294 <KeyScan1+0x12c>)
 80041c6:	0189      	lsls	r1, r1, #6
 80041c8:	f001 f9a8 	bl	800551c <HAL_GPIO_ReadPin>
 80041cc:	4d35      	ldr	r5, [pc, #212]	; (80042a4 <KeyScan1+0x13c>)
 80041ce:	782b      	ldrb	r3, [r5, #0]
 80041d0:	4318      	orrs	r0, r3
 80041d2:	b2c0      	uxtb	r0, r0
 80041d4:	2800      	cmp	r0, #0
 80041d6:	d105      	bne.n	80041e4 <KeyScan1+0x7c>
		isKey = 1;
 80041d8:	2301      	movs	r3, #1
 80041da:	702b      	strb	r3, [r5, #0]
		time = HAL_GetTick();
 80041dc:	f000 ff8e 	bl	80050fc <HAL_GetTick>
 80041e0:	4b2f      	ldr	r3, [pc, #188]	; (80042a0 <KeyScan1+0x138>)
 80041e2:	6018      	str	r0, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) && isKey== 1){
 80041e4:	2180      	movs	r1, #128	; 0x80
 80041e6:	482b      	ldr	r0, [pc, #172]	; (8004294 <KeyScan1+0x12c>)
 80041e8:	0189      	lsls	r1, r1, #6
 80041ea:	f001 f997 	bl	800551c <HAL_GPIO_ReadPin>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d01b      	beq.n	800422a <KeyScan1+0xc2>
 80041f2:	782e      	ldrb	r6, [r5, #0]
 80041f4:	2e01      	cmp	r6, #1
 80041f6:	d118      	bne.n	800422a <KeyScan1+0xc2>
		if(HAL_GetTick()-time<1000){
 80041f8:	f000 ff80 	bl	80050fc <HAL_GetTick>
 80041fc:	22fa      	movs	r2, #250	; 0xfa
 80041fe:	4b28      	ldr	r3, [pc, #160]	; (80042a0 <KeyScan1+0x138>)
 8004200:	0092      	lsls	r2, r2, #2
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	1ac0      	subs	r0, r0, r3
 8004206:	4b28      	ldr	r3, [pc, #160]	; (80042a8 <KeyScan1+0x140>)
 8004208:	4290      	cmp	r0, r2
 800420a:	d222      	bcs.n	8004252 <KeyScan1+0xea>
			if(Mueu ==1){
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	2a01      	cmp	r2, #1
 8004210:	d104      	bne.n	800421c <KeyScan1+0xb4>
				Mueu =2;
 8004212:	3201      	adds	r2, #1
			else{
				Mueu =1;
			}
		}
		else{
			Mueu = 0;
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	e002      	b.n	800421e <KeyScan1+0xb6>
			Select = 0;
 8004218:	6010      	str	r0, [r2, #0]
 800421a:	e7cc      	b.n	80041b6 <KeyScan1+0x4e>
				Mueu =1;
 800421c:	701e      	strb	r6, [r3, #0]
		}
		isKey = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	702b      	strb	r3, [r5, #0]
		Sleep = HAL_GetTick();
 8004222:	f000 ff6b 	bl	80050fc <HAL_GetTick>
 8004226:	4b21      	ldr	r3, [pc, #132]	; (80042ac <KeyScan1+0x144>)
 8004228:	6018      	str	r0, [r3, #0]
	}
	if((!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) || !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) && isKey1 == 1){
 800422a:	2180      	movs	r1, #128	; 0x80
 800422c:	4819      	ldr	r0, [pc, #100]	; (8004294 <KeyScan1+0x12c>)
 800422e:	01c9      	lsls	r1, r1, #7
 8004230:	f001 f974 	bl	800551c <HAL_GPIO_ReadPin>
 8004234:	2800      	cmp	r0, #0
 8004236:	d10e      	bne.n	8004256 <KeyScan1+0xee>
 8004238:	7823      	ldrb	r3, [r4, #0]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d112      	bne.n	8004264 <KeyScan1+0xfc>
		if(HAL_GetTick()-time>150){
 800423e:	f000 ff5d 	bl	80050fc <HAL_GetTick>
 8004242:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <KeyScan1+0x138>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	1ac0      	subs	r0, r0, r3
 8004248:	2896      	cmp	r0, #150	; 0x96
 800424a:	d90b      	bls.n	8004264 <KeyScan1+0xfc>
			isKey1 = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	7023      	strb	r3, [r4, #0]
 8004250:	e008      	b.n	8004264 <KeyScan1+0xfc>
			Mueu = 0;
 8004252:	2200      	movs	r2, #0
 8004254:	e7de      	b.n	8004214 <KeyScan1+0xac>
	if((!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) || !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) && isKey1 == 1){
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	480e      	ldr	r0, [pc, #56]	; (8004294 <KeyScan1+0x12c>)
 800425a:	0209      	lsls	r1, r1, #8
 800425c:	f001 f95e 	bl	800551c <HAL_GPIO_ReadPin>
 8004260:	2800      	cmp	r0, #0
 8004262:	d0e9      	beq.n	8004238 <KeyScan1+0xd0>
		}
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && isKey1 == 1){
 8004264:	2180      	movs	r1, #128	; 0x80
 8004266:	480b      	ldr	r0, [pc, #44]	; (8004294 <KeyScan1+0x12c>)
 8004268:	01c9      	lsls	r1, r1, #7
 800426a:	f001 f957 	bl	800551c <HAL_GPIO_ReadPin>
 800426e:	2800      	cmp	r0, #0
 8004270:	d00f      	beq.n	8004292 <KeyScan1+0x12a>
 8004272:	2180      	movs	r1, #128	; 0x80
 8004274:	4807      	ldr	r0, [pc, #28]	; (8004294 <KeyScan1+0x12c>)
 8004276:	0209      	lsls	r1, r1, #8
 8004278:	f001 f950 	bl	800551c <HAL_GPIO_ReadPin>
 800427c:	2800      	cmp	r0, #0
 800427e:	d008      	beq.n	8004292 <KeyScan1+0x12a>
 8004280:	7823      	ldrb	r3, [r4, #0]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d105      	bne.n	8004292 <KeyScan1+0x12a>
		isKey1 =0;
 8004286:	2300      	movs	r3, #0
 8004288:	7023      	strb	r3, [r4, #0]
		Sleep = HAL_GetTick();
 800428a:	f000 ff37 	bl	80050fc <HAL_GetTick>
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <KeyScan1+0x144>)
 8004290:	6018      	str	r0, [r3, #0]
	}
}
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	50000400 	.word	0x50000400
 8004298:	200006ed 	.word	0x200006ed
 800429c:	200006e4 	.word	0x200006e4
 80042a0:	200006f0 	.word	0x200006f0
 80042a4:	200006ec 	.word	0x200006ec
 80042a8:	200006e1 	.word	0x200006e1
 80042ac:	200006e8 	.word	0x200006e8

080042b0 <KeyScan2>:
void KeyScan2(){
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && isKey1 ==0){
 80042b0:	2180      	movs	r1, #128	; 0x80
void KeyScan2(){
 80042b2:	b570      	push	{r4, r5, r6, lr}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && isKey1 ==0){
 80042b4:	484e      	ldr	r0, [pc, #312]	; (80043f0 <KeyScan2+0x140>)
 80042b6:	0209      	lsls	r1, r1, #8
 80042b8:	f001 f930 	bl	800551c <HAL_GPIO_ReadPin>
 80042bc:	4c4d      	ldr	r4, [pc, #308]	; (80043f4 <KeyScan2+0x144>)
 80042be:	4d4e      	ldr	r5, [pc, #312]	; (80043f8 <KeyScan2+0x148>)
 80042c0:	7823      	ldrb	r3, [r4, #0]
 80042c2:	4318      	orrs	r0, r3
 80042c4:	b2c0      	uxtb	r0, r0
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d10b      	bne.n	80042e2 <KeyScan2+0x32>
		SelectValue[Select+1]++;
 80042ca:	682b      	ldr	r3, [r5, #0]
 80042cc:	494b      	ldr	r1, [pc, #300]	; (80043fc <KeyScan2+0x14c>)
 80042ce:	3301      	adds	r3, #1
 80042d0:	5cca      	ldrb	r2, [r1, r3]
 80042d2:	3201      	adds	r2, #1
 80042d4:	54ca      	strb	r2, [r1, r3]
		isKey1 =1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	7023      	strb	r3, [r4, #0]
		time = HAL_GetTick();
 80042da:	f000 ff0f 	bl	80050fc <HAL_GetTick>
 80042de:	4b48      	ldr	r3, [pc, #288]	; (8004400 <KeyScan2+0x150>)
 80042e0:	6018      	str	r0, [r3, #0]
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) && isKey1 ==0){
 80042e2:	2180      	movs	r1, #128	; 0x80
 80042e4:	4842      	ldr	r0, [pc, #264]	; (80043f0 <KeyScan2+0x140>)
 80042e6:	01c9      	lsls	r1, r1, #7
 80042e8:	f001 f918 	bl	800551c <HAL_GPIO_ReadPin>
 80042ec:	7823      	ldrb	r3, [r4, #0]
 80042ee:	4318      	orrs	r0, r3
 80042f0:	b2c0      	uxtb	r0, r0
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d10b      	bne.n	800430e <KeyScan2+0x5e>
		SelectValue[Select+1]--;
 80042f6:	682b      	ldr	r3, [r5, #0]
 80042f8:	4940      	ldr	r1, [pc, #256]	; (80043fc <KeyScan2+0x14c>)
 80042fa:	3301      	adds	r3, #1
 80042fc:	5cca      	ldrb	r2, [r1, r3]
 80042fe:	3a01      	subs	r2, #1
 8004300:	54ca      	strb	r2, [r1, r3]
		isKey1 =1;
 8004302:	2301      	movs	r3, #1
 8004304:	7023      	strb	r3, [r4, #0]
		time = HAL_GetTick();
 8004306:	f000 fef9 	bl	80050fc <HAL_GetTick>
 800430a:	4b3d      	ldr	r3, [pc, #244]	; (8004400 <KeyScan2+0x150>)
 800430c:	6018      	str	r0, [r3, #0]
	}
	if(Select == 0){
 800430e:	682b      	ldr	r3, [r5, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d138      	bne.n	8004386 <KeyScan2+0xd6>
		if(SelectValue[1]<0)SelectValue[1]=0;
		if(SelectValue[1]>16)SelectValue[1]=16;
 8004314:	4b39      	ldr	r3, [pc, #228]	; (80043fc <KeyScan2+0x14c>)
 8004316:	785a      	ldrb	r2, [r3, #1]
 8004318:	2a10      	cmp	r2, #16
 800431a:	d901      	bls.n	8004320 <KeyScan2+0x70>
 800431c:	2210      	movs	r2, #16
 800431e:	705a      	strb	r2, [r3, #1]
	}
	if(Select == 2){
		if(SelectValue[3]<30)SelectValue[3]=30;
		if(SelectValue[3]>180)SelectValue[3]=180;
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) && isKey == 0){
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	4833      	ldr	r0, [pc, #204]	; (80043f0 <KeyScan2+0x140>)
 8004324:	0189      	lsls	r1, r1, #6
 8004326:	f001 f8f9 	bl	800551c <HAL_GPIO_ReadPin>
 800432a:	4d36      	ldr	r5, [pc, #216]	; (8004404 <KeyScan2+0x154>)
 800432c:	782b      	ldrb	r3, [r5, #0]
 800432e:	4318      	orrs	r0, r3
 8004330:	b2c0      	uxtb	r0, r0
 8004332:	2800      	cmp	r0, #0
 8004334:	d101      	bne.n	800433a <KeyScan2+0x8a>
		isKey = 1;
 8004336:	2301      	movs	r3, #1
 8004338:	702b      	strb	r3, [r5, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) && isKey== 1){
 800433a:	2180      	movs	r1, #128	; 0x80
 800433c:	482c      	ldr	r0, [pc, #176]	; (80043f0 <KeyScan2+0x140>)
 800433e:	0189      	lsls	r1, r1, #6
 8004340:	f001 f8ec 	bl	800551c <HAL_GPIO_ReadPin>
 8004344:	2800      	cmp	r0, #0
 8004346:	d00a      	beq.n	800435e <KeyScan2+0xae>
 8004348:	782b      	ldrb	r3, [r5, #0]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <KeyScan2+0xae>
		Mueu =1;
 800434e:	4a2e      	ldr	r2, [pc, #184]	; (8004408 <KeyScan2+0x158>)
 8004350:	7013      	strb	r3, [r2, #0]
		isKey = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	702b      	strb	r3, [r5, #0]
		Sleep = HAL_GetTick();
 8004356:	f000 fed1 	bl	80050fc <HAL_GetTick>
 800435a:	4b2c      	ldr	r3, [pc, #176]	; (800440c <KeyScan2+0x15c>)
 800435c:	6018      	str	r0, [r3, #0]
	}
	if((!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) || !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) && isKey1 == 1){
 800435e:	2180      	movs	r1, #128	; 0x80
 8004360:	4823      	ldr	r0, [pc, #140]	; (80043f0 <KeyScan2+0x140>)
 8004362:	01c9      	lsls	r1, r1, #7
 8004364:	f001 f8da 	bl	800551c <HAL_GPIO_ReadPin>
 8004368:	2800      	cmp	r0, #0
 800436a:	d122      	bne.n	80043b2 <KeyScan2+0x102>
 800436c:	7823      	ldrb	r3, [r4, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d126      	bne.n	80043c0 <KeyScan2+0x110>
		if(HAL_GetTick()-time>150){
 8004372:	f000 fec3 	bl	80050fc <HAL_GetTick>
 8004376:	4b22      	ldr	r3, [pc, #136]	; (8004400 <KeyScan2+0x150>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1ac0      	subs	r0, r0, r3
 800437c:	2896      	cmp	r0, #150	; 0x96
 800437e:	d91f      	bls.n	80043c0 <KeyScan2+0x110>
			isKey1 = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	7023      	strb	r3, [r4, #0]
 8004384:	e01c      	b.n	80043c0 <KeyScan2+0x110>
	if(Select == 1){
 8004386:	2b01      	cmp	r3, #1
 8004388:	d008      	beq.n	800439c <KeyScan2+0xec>
	if(Select == 2){
 800438a:	2b02      	cmp	r3, #2
 800438c:	d1c8      	bne.n	8004320 <KeyScan2+0x70>
		if(SelectValue[3]<30)SelectValue[3]=30;
 800438e:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <KeyScan2+0x14c>)
 8004390:	78da      	ldrb	r2, [r3, #3]
 8004392:	2a1d      	cmp	r2, #29
 8004394:	d809      	bhi.n	80043aa <KeyScan2+0xfa>
 8004396:	221e      	movs	r2, #30
		if(SelectValue[3]>180)SelectValue[3]=180;
 8004398:	70da      	strb	r2, [r3, #3]
 800439a:	e7c1      	b.n	8004320 <KeyScan2+0x70>
		if(SelectValue[2]>12)SelectValue[2]=12;
 800439c:	4b17      	ldr	r3, [pc, #92]	; (80043fc <KeyScan2+0x14c>)
 800439e:	789a      	ldrb	r2, [r3, #2]
 80043a0:	2a0c      	cmp	r2, #12
 80043a2:	d9bd      	bls.n	8004320 <KeyScan2+0x70>
 80043a4:	220c      	movs	r2, #12
 80043a6:	709a      	strb	r2, [r3, #2]
 80043a8:	e7ba      	b.n	8004320 <KeyScan2+0x70>
		if(SelectValue[3]>180)SelectValue[3]=180;
 80043aa:	2ab4      	cmp	r2, #180	; 0xb4
 80043ac:	d9b8      	bls.n	8004320 <KeyScan2+0x70>
 80043ae:	22b4      	movs	r2, #180	; 0xb4
 80043b0:	e7f2      	b.n	8004398 <KeyScan2+0xe8>
	if((!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) || !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) && isKey1 == 1){
 80043b2:	2180      	movs	r1, #128	; 0x80
 80043b4:	480e      	ldr	r0, [pc, #56]	; (80043f0 <KeyScan2+0x140>)
 80043b6:	0209      	lsls	r1, r1, #8
 80043b8:	f001 f8b0 	bl	800551c <HAL_GPIO_ReadPin>
 80043bc:	2800      	cmp	r0, #0
 80043be:	d0d5      	beq.n	800436c <KeyScan2+0xbc>
		}
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && isKey1 == 1){
 80043c0:	2180      	movs	r1, #128	; 0x80
 80043c2:	480b      	ldr	r0, [pc, #44]	; (80043f0 <KeyScan2+0x140>)
 80043c4:	01c9      	lsls	r1, r1, #7
 80043c6:	f001 f8a9 	bl	800551c <HAL_GPIO_ReadPin>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d00f      	beq.n	80043ee <KeyScan2+0x13e>
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	4807      	ldr	r0, [pc, #28]	; (80043f0 <KeyScan2+0x140>)
 80043d2:	0209      	lsls	r1, r1, #8
 80043d4:	f001 f8a2 	bl	800551c <HAL_GPIO_ReadPin>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d008      	beq.n	80043ee <KeyScan2+0x13e>
 80043dc:	7823      	ldrb	r3, [r4, #0]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d105      	bne.n	80043ee <KeyScan2+0x13e>
		isKey1 =0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	7023      	strb	r3, [r4, #0]
		Sleep = HAL_GetTick();
 80043e6:	f000 fe89 	bl	80050fc <HAL_GetTick>
 80043ea:	4b08      	ldr	r3, [pc, #32]	; (800440c <KeyScan2+0x15c>)
 80043ec:	6018      	str	r0, [r3, #0]
	}
}
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	50000400 	.word	0x50000400
 80043f4:	200006ed 	.word	0x200006ed
 80043f8:	200006e4 	.word	0x200006e4
 80043fc:	20000036 	.word	0x20000036
 8004400:	200006f0 	.word	0x200006f0
 8004404:	200006ec 	.word	0x200006ec
 8004408:	200006e1 	.word	0x200006e1
 800440c:	200006e8 	.word	0x200006e8

08004410 <frame>:

void frame(){
  if(Select<3 && Select>=0){
 8004410:	4b14      	ldr	r3, [pc, #80]	; (8004464 <frame+0x54>)
void frame(){
 8004412:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(Select<3 && Select>=0){
 8004414:	6819      	ldr	r1, [r3, #0]
 8004416:	4a14      	ldr	r2, [pc, #80]	; (8004468 <frame+0x58>)
 8004418:	2902      	cmp	r1, #2
 800441a:	d803      	bhi.n	8004424 <frame+0x14>
	toy = 2+Select*15;
 800441c:	230f      	movs	r3, #15
 800441e:	434b      	muls	r3, r1
 8004420:	3302      	adds	r3, #2
 8004422:	6013      	str	r3, [r2, #0]
  }
  if(toy>y){
 8004424:	4d11      	ldr	r5, [pc, #68]	; (800446c <frame+0x5c>)
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	dd01      	ble.n	8004432 <frame+0x22>
	  y=y+3;
 800442e:	3303      	adds	r3, #3
 8004430:	602b      	str	r3, [r5, #0]
  }
  if(toy<y){
 8004432:	682b      	ldr	r3, [r5, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	da01      	bge.n	800443c <frame+0x2c>
	  y=y-3;
 8004438:	3b03      	subs	r3, #3
 800443a:	602b      	str	r3, [r5, #0]
  }
	u8g2_SetDrawColor(&u8g2,2);
 800443c:	4c0c      	ldr	r4, [pc, #48]	; (8004470 <frame+0x60>)
 800443e:	2102      	movs	r1, #2
 8004440:	0020      	movs	r0, r4
 8004442:	f7ff f970 	bl	8003726 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,0,3+y,129,14);
 8004446:	230e      	movs	r3, #14
 8004448:	682a      	ldr	r2, [r5, #0]
 800444a:	0020      	movs	r0, r4
 800444c:	3203      	adds	r2, #3
 800444e:	b292      	uxth	r2, r2
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	2100      	movs	r1, #0
 8004454:	3373      	adds	r3, #115	; 0x73
 8004456:	f7fe fdcf 	bl	8002ff8 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,1);
 800445a:	2101      	movs	r1, #1
 800445c:	0020      	movs	r0, r4
 800445e:	f7ff f962 	bl	8003726 <u8g2_SetDrawColor>
}
 8004462:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8004464:	200006e4 	.word	0x200006e4
 8004468:	200006f4 	.word	0x200006f4
 800446c:	2000078c 	.word	0x2000078c
 8004470:	200006f8 	.word	0x200006f8

08004474 <Loop>:

void Loop(){
 8004474:	b5f0      	push	{r4, r5, r6, r7, lr}
u8g2_ClearBuffer(&u8g2);
 8004476:	4ce1      	ldr	r4, [pc, #900]	; (80047fc <Loop+0x388>)
void Loop(){
 8004478:	b08b      	sub	sp, #44	; 0x2c
u8g2_ClearBuffer(&u8g2);
 800447a:	0020      	movs	r0, r4
 800447c:	f7fe fe0b 	bl	8003096 <u8g2_ClearBuffer>
OLED_Off();
 8004480:	f7ff fce6 	bl	8003e50 <OLED_Off>
if(Mueu == 0){
 8004484:	4dde      	ldr	r5, [pc, #888]	; (8004800 <Loop+0x38c>)
 8004486:	782b      	ldrb	r3, [r5, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d000      	beq.n	800448e <Loop+0x1a>
 800448c:	e200      	b.n	8004890 <Loop+0x41c>
Lux = get_lux_data();
 800448e:	f000 fd7f 	bl	8004f90 <get_lux_data>
 8004492:	0006      	movs	r6, r0
 8004494:	000f      	movs	r7, r1
 8004496:	4bdb      	ldr	r3, [pc, #876]	; (8004804 <Loop+0x390>)
if(Lux>1000){
 8004498:	2200      	movs	r2, #0
Lux = get_lux_data();
 800449a:	601e      	str	r6, [r3, #0]
 800449c:	605f      	str	r7, [r3, #4]
if(Lux>1000){
 800449e:	4bda      	ldr	r3, [pc, #872]	; (8004808 <Loop+0x394>)
 80044a0:	f7fb ffea 	bl	8000478 <__aeabi_dcmpgt>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d048      	beq.n	800453a <Loop+0xc6>
	Lux = a * pow(Lux, 4) + b * pow(Lux, 3) + c * pow(Lux, 2) + d * Lux;
 80044a8:	2200      	movs	r2, #0
 80044aa:	0030      	movs	r0, r6
 80044ac:	0039      	movs	r1, r7
 80044ae:	4bd7      	ldr	r3, [pc, #860]	; (800480c <Loop+0x398>)
 80044b0:	f005 fba4 	bl	8009bfc <pow>
 80044b4:	4bd6      	ldr	r3, [pc, #856]	; (8004810 <Loop+0x39c>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f7fd fe07 	bl	80020cc <__aeabi_dmul>
 80044be:	0006      	movs	r6, r0
 80044c0:	000f      	movs	r7, r1
 80044c2:	4bd0      	ldr	r3, [pc, #832]	; (8004804 <Loop+0x390>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	685c      	ldr	r4, [r3, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	9401      	str	r4, [sp, #4]
 80044ce:	9800      	ldr	r0, [sp, #0]
 80044d0:	9901      	ldr	r1, [sp, #4]
 80044d2:	4bd0      	ldr	r3, [pc, #832]	; (8004814 <Loop+0x3a0>)
 80044d4:	f005 fb92 	bl	8009bfc <pow>
 80044d8:	4bca      	ldr	r3, [pc, #808]	; (8004804 <Loop+0x390>)
 80044da:	681c      	ldr	r4, [r3, #0]
 80044dc:	685d      	ldr	r5, [r3, #4]
 80044de:	4bce      	ldr	r3, [pc, #824]	; (8004818 <Loop+0x3a4>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f7fd fdf2 	bl	80020cc <__aeabi_dmul>
 80044e8:	0032      	movs	r2, r6
 80044ea:	003b      	movs	r3, r7
 80044ec:	f7fc feb0 	bl	8001250 <__aeabi_dadd>
 80044f0:	0022      	movs	r2, r4
 80044f2:	0006      	movs	r6, r0
 80044f4:	000f      	movs	r7, r1
 80044f6:	002b      	movs	r3, r5
 80044f8:	0020      	movs	r0, r4
 80044fa:	0029      	movs	r1, r5
 80044fc:	f7fd fde6 	bl	80020cc <__aeabi_dmul>
 8004500:	4bc6      	ldr	r3, [pc, #792]	; (800481c <Loop+0x3a8>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f7fd fde1 	bl	80020cc <__aeabi_dmul>
 800450a:	0002      	movs	r2, r0
 800450c:	000b      	movs	r3, r1
 800450e:	0030      	movs	r0, r6
 8004510:	0039      	movs	r1, r7
 8004512:	f7fc fe9d 	bl	8001250 <__aeabi_dadd>
 8004516:	4bc2      	ldr	r3, [pc, #776]	; (8004820 <Loop+0x3ac>)
 8004518:	0006      	movs	r6, r0
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	000f      	movs	r7, r1
 8004520:	0020      	movs	r0, r4
 8004522:	0029      	movs	r1, r5
 8004524:	f7fd fdd2 	bl	80020cc <__aeabi_dmul>
 8004528:	000b      	movs	r3, r1
 800452a:	0002      	movs	r2, r0
 800452c:	0039      	movs	r1, r7
 800452e:	0030      	movs	r0, r6
 8004530:	f7fc fe8e 	bl	8001250 <__aeabi_dadd>
 8004534:	4bb3      	ldr	r3, [pc, #716]	; (8004804 <Loop+0x390>)
 8004536:	6018      	str	r0, [r3, #0]
 8004538:	6059      	str	r1, [r3, #4]
}
EV = log2((Lux/2.5f))+logf(isos[SelectValue[1]]/100.0f)/M_LN2+Ev[SelectValue[2]]-1.00f;
 800453a:	49b2      	ldr	r1, [pc, #712]	; (8004804 <Loop+0x390>)
 800453c:	2200      	movs	r2, #0
 800453e:	6808      	ldr	r0, [r1, #0]
 8004540:	6849      	ldr	r1, [r1, #4]
 8004542:	4bb8      	ldr	r3, [pc, #736]	; (8004824 <Loop+0x3b0>)
 8004544:	f7fd f9c0 	bl	80018c8 <__aeabi_ddiv>
 8004548:	f005 fb22 	bl	8009b90 <log>
 800454c:	4cb6      	ldr	r4, [pc, #728]	; (8004828 <Loop+0x3b4>)
 800454e:	4ab7      	ldr	r2, [pc, #732]	; (800482c <Loop+0x3b8>)
 8004550:	7863      	ldrb	r3, [r4, #1]
 8004552:	0006      	movs	r6, r0
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	5a98      	ldrh	r0, [r3, r2]
 8004558:	000f      	movs	r7, r1
 800455a:	f7fc fe2b 	bl	80011b4 <__aeabi_i2f>
 800455e:	49b4      	ldr	r1, [pc, #720]	; (8004830 <Loop+0x3bc>)
 8004560:	f7fc f976 	bl	8000850 <__aeabi_fdiv>
 8004564:	f005 fbde 	bl	8009d24 <logf>
 8004568:	4ab2      	ldr	r2, [pc, #712]	; (8004834 <Loop+0x3c0>)
 800456a:	4bb3      	ldr	r3, [pc, #716]	; (8004838 <Loop+0x3c4>)
 800456c:	0039      	movs	r1, r7
 800456e:	1c05      	adds	r5, r0, #0
 8004570:	0030      	movs	r0, r6
 8004572:	f7fd f9a9 	bl	80018c8 <__aeabi_ddiv>
 8004576:	0006      	movs	r6, r0
 8004578:	1c28      	adds	r0, r5, #0
 800457a:	000f      	movs	r7, r1
 800457c:	f7fe fc4e 	bl	8002e1c <__aeabi_f2d>
 8004580:	4aac      	ldr	r2, [pc, #688]	; (8004834 <Loop+0x3c0>)
 8004582:	4bad      	ldr	r3, [pc, #692]	; (8004838 <Loop+0x3c4>)
 8004584:	f7fd f9a0 	bl	80018c8 <__aeabi_ddiv>
 8004588:	0002      	movs	r2, r0
 800458a:	000b      	movs	r3, r1
 800458c:	0030      	movs	r0, r6
 800458e:	0039      	movs	r1, r7
 8004590:	f7fc fe5e 	bl	8001250 <__aeabi_dadd>
 8004594:	78a3      	ldrb	r3, [r4, #2]
 8004596:	4aa9      	ldr	r2, [pc, #676]	; (800483c <Loop+0x3c8>)
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	0006      	movs	r6, r0
 800459c:	5898      	ldr	r0, [r3, r2]
 800459e:	000f      	movs	r7, r1
 80045a0:	f7fe fc3c 	bl	8002e1c <__aeabi_f2d>
 80045a4:	0002      	movs	r2, r0
 80045a6:	000b      	movs	r3, r1
 80045a8:	0030      	movs	r0, r6
 80045aa:	0039      	movs	r1, r7
 80045ac:	f7fc fe50 	bl	8001250 <__aeabi_dadd>
 80045b0:	4ba3      	ldr	r3, [pc, #652]	; (8004840 <Loop+0x3cc>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	f7fd fff6 	bl	80025a4 <__aeabi_dsub>
 80045b8:	4ba2      	ldr	r3, [pc, #648]	; (8004844 <Loop+0x3d0>)
 80045ba:	6018      	str	r0, [r3, #0]
 80045bc:	6059      	str	r1, [r3, #4]

if(Mode == 1){
 80045be:	4ba2      	ldr	r3, [pc, #648]	; (8004848 <Loop+0x3d4>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d000      	beq.n	80045c8 <Loop+0x154>
 80045c6:	e086      	b.n	80046d6 <Loop+0x262>
	NN = KeyScan(NN,37);
 80045c8:	4ea0      	ldr	r6, [pc, #640]	; (800484c <Loop+0x3d8>)
 80045ca:	2125      	movs	r1, #37	; 0x25
 80045cc:	7830      	ldrb	r0, [r6, #0]
 80045ce:	f7ff fd29 	bl	8004024 <KeyScan>
	char buf[32];
	u8g2_SetFont(&u8g2,u8g2_font_spleen12x24_mf);
 80045d2:	4d8a      	ldr	r5, [pc, #552]	; (80047fc <Loop+0x388>)
	NN = KeyScan(NN,37);
 80045d4:	7030      	strb	r0, [r6, #0]
	u8g2_SetFont(&u8g2,u8g2_font_spleen12x24_mf);
 80045d6:	499e      	ldr	r1, [pc, #632]	; (8004850 <Loop+0x3dc>)
 80045d8:	0028      	movs	r0, r5
 80045da:	f7ff f81b 	bl	8003614 <u8g2_SetFont>
	sprintf(buf,"%.1f",N[NN]);
 80045de:	7833      	ldrb	r3, [r6, #0]
 80045e0:	4a9c      	ldr	r2, [pc, #624]	; (8004854 <Loop+0x3e0>)
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	5898      	ldr	r0, [r3, r2]
 80045e6:	f7fe fc19 	bl	8002e1c <__aeabi_f2d>
 80045ea:	0002      	movs	r2, r0
 80045ec:	000b      	movs	r3, r1
 80045ee:	a802      	add	r0, sp, #8
 80045f0:	4999      	ldr	r1, [pc, #612]	; (8004858 <Loop+0x3e4>)
 80045f2:	f002 ffa9 	bl	8007548 <siprintf>
	SS = A();
 80045f6:	f7ff fc97 	bl	8003f28 <A>
 80045fa:	4e98      	ldr	r6, [pc, #608]	; (800485c <Loop+0x3e8>)
	u8g2_DrawStr(&u8g2,8,20,shutters_str[SS]);
 80045fc:	4b98      	ldr	r3, [pc, #608]	; (8004860 <Loop+0x3ec>)
	SS = A();
 80045fe:	7030      	strb	r0, [r6, #0]
	u8g2_DrawStr(&u8g2,8,20,shutters_str[SS]);
 8004600:	0080      	lsls	r0, r0, #2
 8004602:	58c3      	ldr	r3, [r0, r3]
 8004604:	2214      	movs	r2, #20
 8004606:	2108      	movs	r1, #8
 8004608:	0028      	movs	r0, r5
 800460a:	f7fe ffc3 	bl	8003594 <u8g2_DrawStr>
	u8g2_SetFont(&u8g2,u8g2_font_spleen16x32_mf);
 800460e:	0028      	movs	r0, r5
 8004610:	4994      	ldr	r1, [pc, #592]	; (8004864 <Loop+0x3f0>)
 8004612:	f7fe ffff 	bl	8003614 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2,44,54,"F");
 8004616:	2236      	movs	r2, #54	; 0x36
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	4b93      	ldr	r3, [pc, #588]	; (8004868 <Loop+0x3f4>)
 800461c:	0028      	movs	r0, r5
 800461e:	f7fe ffb9 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,60,54,buf);
 8004622:	2236      	movs	r2, #54	; 0x36
 8004624:	ab02      	add	r3, sp, #8
 8004626:	213c      	movs	r1, #60	; 0x3c
 8004628:	0028      	movs	r0, r5
 800462a:	f7fe ffb3 	bl	8003594 <u8g2_DrawStr>
	u8g2_SetFont(&u8g2,u8g2_font_spleen5x8_mf);
 800462e:	0028      	movs	r0, r5
 8004630:	498e      	ldr	r1, [pc, #568]	; (800486c <Loop+0x3f8>)
 8004632:	f7fe ffef 	bl	8003614 <u8g2_SetFont>
	sprintf(buf,"%d",isos[SelectValue[1]]);
 8004636:	7863      	ldrb	r3, [r4, #1]
 8004638:	4a7c      	ldr	r2, [pc, #496]	; (800482c <Loop+0x3b8>)
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	5a9a      	ldrh	r2, [r3, r2]
 800463e:	498c      	ldr	r1, [pc, #560]	; (8004870 <Loop+0x3fc>)
 8004640:	a802      	add	r0, sp, #8
 8004642:	f002 ff81 	bl	8007548 <siprintf>
	u8g2_DrawStr(&u8g2,0,40,"ISO");
 8004646:	2228      	movs	r2, #40	; 0x28
 8004648:	2100      	movs	r1, #0
 800464a:	4b8a      	ldr	r3, [pc, #552]	; (8004874 <Loop+0x400>)
 800464c:	0028      	movs	r0, r5
 800464e:	f7fe ffa1 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,15,40,buf);
 8004652:	2228      	movs	r2, #40	; 0x28
 8004654:	210f      	movs	r1, #15
 8004656:	ab02      	add	r3, sp, #8
 8004658:	0028      	movs	r0, r5
 800465a:	f7fe ff9b 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,60,19,"T");
 800465e:	2213      	movs	r2, #19
 8004660:	213c      	movs	r1, #60	; 0x3c
 8004662:	4b85      	ldr	r3, [pc, #532]	; (8004878 <Loop+0x404>)
 8004664:	0028      	movs	r0, r5
 8004666:	f7fe ff95 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,70,19,"A");
 800466a:	4b84      	ldr	r3, [pc, #528]	; (800487c <Loop+0x408>)
 800466c:	2213      	movs	r2, #19
 800466e:	2146      	movs	r1, #70	; 0x46
 8004670:	0028      	movs	r0, r5
 8004672:	f7fe ff8f 	bl	8003594 <u8g2_DrawStr>
	if(SS<12){
 8004676:	7833      	ldrb	r3, [r6, #0]
 8004678:	2b0b      	cmp	r3, #11
 800467a:	d805      	bhi.n	8004688 <Loop+0x214>
		u8g2_DrawStr(&u8g2,3,10,"1");
 800467c:	220a      	movs	r2, #10
 800467e:	2103      	movs	r1, #3
 8004680:	0028      	movs	r0, r5
 8004682:	4b7f      	ldr	r3, [pc, #508]	; (8004880 <Loop+0x40c>)
 8004684:	f7fe ff86 	bl	8003594 <u8g2_DrawStr>
	}
	Aim();
 8004688:	f7ff fc8e 	bl	8003fa8 <Aim>
	u8g2_SetFont(&u8g2,u8g2_font_spleen6x12_mf);
 800468c:	0028      	movs	r0, r5
 800468e:	497d      	ldr	r1, [pc, #500]	; (8004884 <Loop+0x410>)
 8004690:	f7fe ffc0 	bl	8003614 <u8g2_SetFont>
	sprintf(buf,"%.3f",EV);
 8004694:	4c7c      	ldr	r4, [pc, #496]	; (8004888 <Loop+0x414>)
 8004696:	4b6b      	ldr	r3, [pc, #428]	; (8004844 <Loop+0x3d0>)
 8004698:	0021      	movs	r1, r4
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	a802      	add	r0, sp, #8
 80046a0:	f002 ff52 	bl	8007548 <siprintf>
	u8g2_DrawStr(&u8g2,80,20,"EV");
 80046a4:	2214      	movs	r2, #20
 80046a6:	2150      	movs	r1, #80	; 0x50
 80046a8:	4b78      	ldr	r3, [pc, #480]	; (800488c <Loop+0x418>)
 80046aa:	0028      	movs	r0, r5
 80046ac:	f7fe ff72 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,92,20,buf);
 80046b0:	2214      	movs	r2, #20
 80046b2:	215c      	movs	r1, #92	; 0x5c
 80046b4:	ab02      	add	r3, sp, #8
 80046b6:	0028      	movs	r0, r5
 80046b8:	f7fe ff6c 	bl	8003594 <u8g2_DrawStr>
	sprintf(buf,"%.3f",Lux);
 80046bc:	4b51      	ldr	r3, [pc, #324]	; (8004804 <Loop+0x390>)
 80046be:	0021      	movs	r1, r4
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	a802      	add	r0, sp, #8
 80046c6:	f002 ff3f 	bl	8007548 <siprintf>
	u8g2_DrawStr(&u8g2,1,53,buf);
 80046ca:	2235      	movs	r2, #53	; 0x35
 80046cc:	2101      	movs	r1, #1
 80046ce:	0028      	movs	r0, r5
 80046d0:	ab02      	add	r3, sp, #8
 80046d2:	f7fe ff5f 	bl	8003594 <u8g2_DrawStr>
}
if(Mode == 0){
 80046d6:	4b5c      	ldr	r3, [pc, #368]	; (8004848 <Loop+0x3d4>)
 80046d8:	4c48      	ldr	r4, [pc, #288]	; (80047fc <Loop+0x388>)
 80046da:	781e      	ldrb	r6, [r3, #0]
 80046dc:	2e00      	cmp	r6, #0
 80046de:	d000      	beq.n	80046e2 <Loop+0x26e>
 80046e0:	e086      	b.n	80047f0 <Loop+0x37c>
	SS = KeyScan(SS,13);
 80046e2:	4d5e      	ldr	r5, [pc, #376]	; (800485c <Loop+0x3e8>)
 80046e4:	210d      	movs	r1, #13
 80046e6:	7828      	ldrb	r0, [r5, #0]
 80046e8:	f7ff fc9c 	bl	8004024 <KeyScan>
	char buf[32];
	u8g2_SetFont(&u8g2,u8g2_font_spleen12x24_mf);
 80046ec:	4958      	ldr	r1, [pc, #352]	; (8004850 <Loop+0x3dc>)
	SS = KeyScan(SS,13);
 80046ee:	7028      	strb	r0, [r5, #0]
	u8g2_SetFont(&u8g2,u8g2_font_spleen12x24_mf);
 80046f0:	0020      	movs	r0, r4
 80046f2:	f7fe ff8f 	bl	8003614 <u8g2_SetFont>
	NN = T();
 80046f6:	f7ff fbd9 	bl	8003eac <T>
 80046fa:	4b54      	ldr	r3, [pc, #336]	; (800484c <Loop+0x3d8>)
 80046fc:	7018      	strb	r0, [r3, #0]
	sprintf(buf,"%.1f",N[NN]);
 80046fe:	4b55      	ldr	r3, [pc, #340]	; (8004854 <Loop+0x3e0>)
 8004700:	0080      	lsls	r0, r0, #2
 8004702:	58c0      	ldr	r0, [r0, r3]
 8004704:	f7fe fb8a 	bl	8002e1c <__aeabi_f2d>
 8004708:	0002      	movs	r2, r0
 800470a:	000b      	movs	r3, r1
 800470c:	a802      	add	r0, sp, #8
 800470e:	4952      	ldr	r1, [pc, #328]	; (8004858 <Loop+0x3e4>)
 8004710:	f002 ff1a 	bl	8007548 <siprintf>
	u8g2_DrawStr(&u8g2,8,20,shutters_str[SS]);
 8004714:	782b      	ldrb	r3, [r5, #0]
 8004716:	4a52      	ldr	r2, [pc, #328]	; (8004860 <Loop+0x3ec>)
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	589b      	ldr	r3, [r3, r2]
 800471c:	2108      	movs	r1, #8
 800471e:	2214      	movs	r2, #20
 8004720:	0020      	movs	r0, r4
 8004722:	f7fe ff37 	bl	8003594 <u8g2_DrawStr>
	u8g2_SetFont(&u8g2,u8g2_font_spleen16x32_mf);
 8004726:	0020      	movs	r0, r4
 8004728:	494e      	ldr	r1, [pc, #312]	; (8004864 <Loop+0x3f0>)
 800472a:	f7fe ff73 	bl	8003614 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2,44,54,"F");
 800472e:	2236      	movs	r2, #54	; 0x36
 8004730:	212c      	movs	r1, #44	; 0x2c
 8004732:	4b4d      	ldr	r3, [pc, #308]	; (8004868 <Loop+0x3f4>)
 8004734:	0020      	movs	r0, r4
 8004736:	f7fe ff2d 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,60,54,buf);
 800473a:	2236      	movs	r2, #54	; 0x36
 800473c:	ab02      	add	r3, sp, #8
 800473e:	213c      	movs	r1, #60	; 0x3c
 8004740:	0020      	movs	r0, r4
 8004742:	f7fe ff27 	bl	8003594 <u8g2_DrawStr>
	u8g2_SetFont(&u8g2,u8g2_font_spleen5x8_mf);
 8004746:	0020      	movs	r0, r4
 8004748:	4948      	ldr	r1, [pc, #288]	; (800486c <Loop+0x3f8>)
 800474a:	f7fe ff63 	bl	8003614 <u8g2_SetFont>
	sprintf(buf,"%d",isos[SelectValue[1]]);
 800474e:	4b36      	ldr	r3, [pc, #216]	; (8004828 <Loop+0x3b4>)
 8004750:	4a36      	ldr	r2, [pc, #216]	; (800482c <Loop+0x3b8>)
 8004752:	785b      	ldrb	r3, [r3, #1]
 8004754:	4946      	ldr	r1, [pc, #280]	; (8004870 <Loop+0x3fc>)
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	5a9a      	ldrh	r2, [r3, r2]
 800475a:	a802      	add	r0, sp, #8
 800475c:	f002 fef4 	bl	8007548 <siprintf>
	u8g2_DrawStr(&u8g2,0,40,"ISO");
 8004760:	2228      	movs	r2, #40	; 0x28
 8004762:	0031      	movs	r1, r6
 8004764:	4b43      	ldr	r3, [pc, #268]	; (8004874 <Loop+0x400>)
 8004766:	0020      	movs	r0, r4
 8004768:	f7fe ff14 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,15,40,buf);
 800476c:	2228      	movs	r2, #40	; 0x28
 800476e:	210f      	movs	r1, #15
 8004770:	ab02      	add	r3, sp, #8
 8004772:	0020      	movs	r0, r4
 8004774:	f7fe ff0e 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,60,19,"T");
 8004778:	2213      	movs	r2, #19
 800477a:	213c      	movs	r1, #60	; 0x3c
 800477c:	4b3e      	ldr	r3, [pc, #248]	; (8004878 <Loop+0x404>)
 800477e:	0020      	movs	r0, r4
 8004780:	f7fe ff08 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,70,19,"A");
 8004784:	4b3d      	ldr	r3, [pc, #244]	; (800487c <Loop+0x408>)
 8004786:	2213      	movs	r2, #19
 8004788:	2146      	movs	r1, #70	; 0x46
 800478a:	0020      	movs	r0, r4
 800478c:	f7fe ff02 	bl	8003594 <u8g2_DrawStr>
	if(SS<12){
 8004790:	782b      	ldrb	r3, [r5, #0]
 8004792:	2b0b      	cmp	r3, #11
 8004794:	d805      	bhi.n	80047a2 <Loop+0x32e>
		u8g2_DrawStr(&u8g2,3,10,"1");
 8004796:	220a      	movs	r2, #10
 8004798:	2103      	movs	r1, #3
 800479a:	0020      	movs	r0, r4
 800479c:	4b38      	ldr	r3, [pc, #224]	; (8004880 <Loop+0x40c>)
 800479e:	f7fe fef9 	bl	8003594 <u8g2_DrawStr>
	}
	Aim();
 80047a2:	f7ff fc01 	bl	8003fa8 <Aim>
	u8g2_SetFont(&u8g2,u8g2_font_spleen6x12_mf);
 80047a6:	0020      	movs	r0, r4
 80047a8:	4936      	ldr	r1, [pc, #216]	; (8004884 <Loop+0x410>)
 80047aa:	f7fe ff33 	bl	8003614 <u8g2_SetFont>
	sprintf(buf,"%.3f",EV);
 80047ae:	4d36      	ldr	r5, [pc, #216]	; (8004888 <Loop+0x414>)
 80047b0:	4b24      	ldr	r3, [pc, #144]	; (8004844 <Loop+0x3d0>)
 80047b2:	0029      	movs	r1, r5
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	a802      	add	r0, sp, #8
 80047ba:	f002 fec5 	bl	8007548 <siprintf>
	u8g2_DrawStr(&u8g2,80,20,"EV");
 80047be:	2214      	movs	r2, #20
 80047c0:	2150      	movs	r1, #80	; 0x50
 80047c2:	4b32      	ldr	r3, [pc, #200]	; (800488c <Loop+0x418>)
 80047c4:	0020      	movs	r0, r4
 80047c6:	f7fe fee5 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,92,20,buf);
 80047ca:	2214      	movs	r2, #20
 80047cc:	215c      	movs	r1, #92	; 0x5c
 80047ce:	ab02      	add	r3, sp, #8
 80047d0:	0020      	movs	r0, r4
 80047d2:	f7fe fedf 	bl	8003594 <u8g2_DrawStr>
	sprintf(buf,"%.3f",Lux);
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <Loop+0x390>)
 80047d8:	0029      	movs	r1, r5
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	a802      	add	r0, sp, #8
 80047e0:	f002 feb2 	bl	8007548 <siprintf>
	u8g2_DrawStr(&u8g2,1,53,buf);
 80047e4:	2235      	movs	r2, #53	; 0x35
 80047e6:	2101      	movs	r1, #1
 80047e8:	0020      	movs	r0, r4
 80047ea:	ab02      	add	r3, sp, #8
 80047ec:	f7fe fed2 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,100,29,Ev_[SelectValue[2]]);
	sprintf(buf,"%d",SelectValue[3]);
	u8g2_DrawStr(&u8g2,0,45,"Sleep Time");
	u8g2_DrawStr(&u8g2,100,45,buf);
	frame();
	u8g2_SendBuffer(&u8g2);
 80047f0:	0020      	movs	r0, r4
 80047f2:	f7fe fc5d 	bl	80030b0 <u8g2_SendBuffer>
	return;
	}
}
 80047f6:	b00b      	add	sp, #44	; 0x2c
 80047f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	200006f8 	.word	0x200006f8
 8004800:	200006e1 	.word	0x200006e1
 8004804:	200006d8 	.word	0x200006d8
 8004808:	408f4000 	.word	0x408f4000
 800480c:	40100000 	.word	0x40100000
 8004810:	20000040 	.word	0x20000040
 8004814:	40080000 	.word	0x40080000
 8004818:	20000048 	.word	0x20000048
 800481c:	20000050 	.word	0x20000050
 8004820:	20000058 	.word	0x20000058
 8004824:	40040000 	.word	0x40040000
 8004828:	20000036 	.word	0x20000036
 800482c:	0800f100 	.word	0x0800f100
 8004830:	42c80000 	.word	0x42c80000
 8004834:	fefa39ef 	.word	0xfefa39ef
 8004838:	3fe62e42 	.word	0x3fe62e42
 800483c:	0800f034 	.word	0x0800f034
 8004840:	3ff00000 	.word	0x3ff00000
 8004844:	200006d0 	.word	0x200006d0
 8004848:	200006e0 	.word	0x200006e0
 800484c:	20000034 	.word	0x20000034
 8004850:	0800b1a8 	.word	0x0800b1a8
 8004854:	0800f068 	.word	0x0800f068
 8004858:	0800efbc 	.word	0x0800efbc
 800485c:	20000035 	.word	0x20000035
 8004860:	20000060 	.word	0x20000060
 8004864:	0800c4b0 	.word	0x0800c4b0
 8004868:	0800f20b 	.word	0x0800f20b
 800486c:	0800de99 	.word	0x0800de99
 8004870:	0800efc1 	.word	0x0800efc1
 8004874:	0800efc4 	.word	0x0800efc4
 8004878:	0800efc8 	.word	0x0800efc8
 800487c:	0800efca 	.word	0x0800efca
 8004880:	0800effa 	.word	0x0800effa
 8004884:	0800e4cb 	.word	0x0800e4cb
 8004888:	0800efcc 	.word	0x0800efcc
 800488c:	0800efd1 	.word	0x0800efd1
if(Mueu == 1 || Mueu ==2 ){
 8004890:	1e5a      	subs	r2, r3, #1
 8004892:	2a01      	cmp	r2, #1
 8004894:	d8af      	bhi.n	80047f6 <Loop+0x382>
	if(Mueu ==1){
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <Loop+0x42a>
		KeyScan1();
 800489a:	f7ff fc65 	bl	8004168 <KeyScan1>
	if(Mueu ==2){
 800489e:	782b      	ldrb	r3, [r5, #0]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d101      	bne.n	80048a8 <Loop+0x434>
		KeyScan2();
 80048a4:	f7ff fd04 	bl	80042b0 <KeyScan2>
	u8g2_SetFont(&u8g2,u8g2_font_spleen6x12_mf);
 80048a8:	0020      	movs	r0, r4
 80048aa:	491e      	ldr	r1, [pc, #120]	; (8004924 <Loop+0x4b0>)
 80048ac:	f7fe feb2 	bl	8003614 <u8g2_SetFont>
	sprintf(buf,"%d",isos[SelectValue[1]]);
 80048b0:	4d1d      	ldr	r5, [pc, #116]	; (8004928 <Loop+0x4b4>)
 80048b2:	4e1e      	ldr	r6, [pc, #120]	; (800492c <Loop+0x4b8>)
 80048b4:	786b      	ldrb	r3, [r5, #1]
 80048b6:	4a1e      	ldr	r2, [pc, #120]	; (8004930 <Loop+0x4bc>)
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	0031      	movs	r1, r6
 80048bc:	5a9a      	ldrh	r2, [r3, r2]
 80048be:	a802      	add	r0, sp, #8
 80048c0:	f002 fe42 	bl	8007548 <siprintf>
	u8g2_DrawStr(&u8g2,0,14,"ISO");
 80048c4:	220e      	movs	r2, #14
 80048c6:	2100      	movs	r1, #0
 80048c8:	0020      	movs	r0, r4
 80048ca:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <Loop+0x4c0>)
 80048cc:	f7fe fe62 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,100,14,buf);
 80048d0:	ab02      	add	r3, sp, #8
 80048d2:	220e      	movs	r2, #14
 80048d4:	2164      	movs	r1, #100	; 0x64
 80048d6:	0020      	movs	r0, r4
 80048d8:	f7fe fe5c 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,0,29,"Light Define");
 80048dc:	221d      	movs	r2, #29
 80048de:	2100      	movs	r1, #0
 80048e0:	0020      	movs	r0, r4
 80048e2:	4b15      	ldr	r3, [pc, #84]	; (8004938 <Loop+0x4c4>)
 80048e4:	f7fe fe56 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,100,29,Ev_[SelectValue[2]]);
 80048e8:	78ab      	ldrb	r3, [r5, #2]
 80048ea:	4a14      	ldr	r2, [pc, #80]	; (800493c <Loop+0x4c8>)
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	589b      	ldr	r3, [r3, r2]
 80048f0:	2164      	movs	r1, #100	; 0x64
 80048f2:	221d      	movs	r2, #29
 80048f4:	0020      	movs	r0, r4
 80048f6:	f7fe fe4d 	bl	8003594 <u8g2_DrawStr>
	sprintf(buf,"%d",SelectValue[3]);
 80048fa:	0031      	movs	r1, r6
 80048fc:	78ea      	ldrb	r2, [r5, #3]
 80048fe:	a802      	add	r0, sp, #8
 8004900:	f002 fe22 	bl	8007548 <siprintf>
	u8g2_DrawStr(&u8g2,0,45,"Sleep Time");
 8004904:	222d      	movs	r2, #45	; 0x2d
 8004906:	2100      	movs	r1, #0
 8004908:	0020      	movs	r0, r4
 800490a:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <Loop+0x4cc>)
 800490c:	f7fe fe42 	bl	8003594 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2,100,45,buf);
 8004910:	222d      	movs	r2, #45	; 0x2d
 8004912:	2164      	movs	r1, #100	; 0x64
 8004914:	ab02      	add	r3, sp, #8
 8004916:	0020      	movs	r0, r4
 8004918:	f7fe fe3c 	bl	8003594 <u8g2_DrawStr>
	frame();
 800491c:	f7ff fd78 	bl	8004410 <frame>
 8004920:	e766      	b.n	80047f0 <Loop+0x37c>
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	0800e4cb 	.word	0x0800e4cb
 8004928:	20000036 	.word	0x20000036
 800492c:	0800efc1 	.word	0x0800efc1
 8004930:	0800f100 	.word	0x0800f100
 8004934:	0800efc4 	.word	0x0800efc4
 8004938:	0800efd4 	.word	0x0800efd4
 800493c:	20000000 	.word	0x20000000
 8004940:	0800efe1 	.word	0x0800efe1

08004944 <ee_write.part.0>:
#endif
  }
  return true;
}
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
 8004944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004946:	0005      	movs	r5, r0
 8004948:	000f      	movs	r7, r1
 800494a:	0014      	movs	r4, r2
#endif
      return false;
    }
  }	
#elif FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 800494c:	002e      	movs	r6, r5
  HAL_FLASH_Unlock();
 800494e:	f000 fc4d 	bl	80051ec <HAL_FLASH_Unlock>
  for (uint32_t i = 0; i < len; i += 8)
 8004952:	1b73      	subs	r3, r6, r5
 8004954:	429f      	cmp	r7, r3
 8004956:	d803      	bhi.n	8004960 <ee_write.part.0+0x1c>
#endif
      return false;
    }
  }
#endif
  HAL_FLASH_Lock();
 8004958:	f000 fcc6 	bl	80052e8 <HAL_FLASH_Lock>
#if _EE_ICACHE_CTRL == 1
  HAL_ICACHE_Enable();
#endif
  return true;
 800495c:	2001      	movs	r0, #1
 800495e:	e01d      	b.n	800499c <ee_write.part.0+0x58>
  	uint8_t DoubleWord[8] =
 8004960:	466a      	mov	r2, sp
 8004962:	7823      	ldrb	r3, [r4, #0]
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint32_t)DoubleWord) != HAL_OK)
 8004964:	2001      	movs	r0, #1
  	uint8_t DoubleWord[8] =
 8004966:	7013      	strb	r3, [r2, #0]
 8004968:	7863      	ldrb	r3, [r4, #1]
 800496a:	7053      	strb	r3, [r2, #1]
 800496c:	78a3      	ldrb	r3, [r4, #2]
 800496e:	7093      	strb	r3, [r2, #2]
 8004970:	78e3      	ldrb	r3, [r4, #3]
 8004972:	70d3      	strb	r3, [r2, #3]
 8004974:	7923      	ldrb	r3, [r4, #4]
 8004976:	7113      	strb	r3, [r2, #4]
 8004978:	7963      	ldrb	r3, [r4, #5]
 800497a:	7153      	strb	r3, [r2, #5]
 800497c:	79a3      	ldrb	r3, [r4, #6]
 800497e:	7193      	strb	r3, [r2, #6]
 8004980:	79e3      	ldrb	r3, [r4, #7]
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint32_t)DoubleWord) != HAL_OK)
 8004982:	3408      	adds	r4, #8
  	uint8_t DoubleWord[8] =
 8004984:	71d3      	strb	r3, [r2, #7]
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint32_t)DoubleWord) != HAL_OK)
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <ee_write.part.0+0x5c>)
 8004988:	18f1      	adds	r1, r6, r3
 800498a:	2300      	movs	r3, #0
 800498c:	f000 fc78 	bl	8005280 <HAL_FLASH_Program>
 8004990:	3608      	adds	r6, #8
 8004992:	2800      	cmp	r0, #0
 8004994:	d0dd      	beq.n	8004952 <ee_write.part.0+0xe>
      HAL_FLASH_Lock();
 8004996:	f000 fca7 	bl	80052e8 <HAL_FLASH_Lock>
      return false;
 800499a:	2000      	movs	r0, #0
}
 800499c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	0800f800 	.word	0x0800f800

080049a4 <ee_format>:
{
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	0004      	movs	r4, r0
  HAL_FLASH_Unlock();
 80049aa:	f000 fc1f 	bl	80051ec <HAL_FLASH_Unlock>
  flashErase.Page = _EE_USE_FLASH_PAGE_OR_SECTOR;
 80049ae:	231f      	movs	r3, #31
  flashErase.NbPages = 1;
 80049b0:	2601      	movs	r6, #1
  flashErase.Page = _EE_USE_FLASH_PAGE_OR_SECTOR;
 80049b2:	9304      	str	r3, [sp, #16]
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 80049b4:	a901      	add	r1, sp, #4
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80049b6:	3b1d      	subs	r3, #29
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 80049b8:	a802      	add	r0, sp, #8
  flashErase.NbPages = 1;
 80049ba:	9605      	str	r6, [sp, #20]
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80049bc:	9302      	str	r3, [sp, #8]
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 80049be:	f000 fcb5 	bl	800532c <HAL_FLASHEx_Erase>
 80049c2:	1e05      	subs	r5, r0, #0
 80049c4:	d110      	bne.n	80049e8 <ee_format+0x44>
    HAL_FLASH_Lock();
 80049c6:	f000 fc8f 	bl	80052e8 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 80049ca:	9b01      	ldr	r3, [sp, #4]
 80049cc:	3301      	adds	r3, #1
 80049ce:	d10f      	bne.n	80049f0 <ee_format+0x4c>
      if (keepRamData == false)
 80049d0:	2c00      	cmp	r4, #0
 80049d2:	d106      	bne.n	80049e2 <ee_format+0x3e>
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 80049d4:	2280      	movs	r2, #128	; 0x80
 80049d6:	21ff      	movs	r1, #255	; 0xff
 80049d8:	4806      	ldr	r0, [pc, #24]	; (80049f4 <ee_format+0x50>)
 80049da:	00d2      	lsls	r2, r2, #3
 80049dc:	f002 f93d 	bl	8006c5a <memset>
 80049e0:	0034      	movs	r4, r6
}
 80049e2:	0020      	movs	r0, r4
 80049e4:	b006      	add	sp, #24
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
  HAL_FLASH_Lock();
 80049e8:	f000 fc7e 	bl	80052e8 <HAL_FLASH_Lock>
  return false;
 80049ec:	2400      	movs	r4, #0
 80049ee:	e7f8      	b.n	80049e2 <ee_format+0x3e>
    	return false;
 80049f0:	002c      	movs	r4, r5
 80049f2:	e7f6      	b.n	80049e2 <ee_format+0x3e>
 80049f4:	20000790 	.word	0x20000790

080049f8 <ee_read>:
{
 80049f8:	b530      	push	{r4, r5, lr}
  if ((startVirtualAddress + len) > _EE_SIZE)
 80049fa:	2480      	movs	r4, #128	; 0x80
 80049fc:	1841      	adds	r1, r0, r1
{
 80049fe:	0003      	movs	r3, r0
  if ((startVirtualAddress + len) > _EE_SIZE)
 8004a00:	0124      	lsls	r4, r4, #4
    return false;
 8004a02:	2000      	movs	r0, #0
  if ((startVirtualAddress + len) > _EE_SIZE)
 8004a04:	42a1      	cmp	r1, r4
 8004a06:	d805      	bhi.n	8004a14 <ee_read+0x1c>
    if (i < _EE_USE_RAM_BYTE)
 8004a08:	2080      	movs	r0, #128	; 0x80
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8004a0a:	4c0a      	ldr	r4, [pc, #40]	; (8004a34 <ee_read+0x3c>)
    if (i < _EE_USE_RAM_BYTE)
 8004a0c:	00c0      	lsls	r0, r0, #3
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8004a0e:	4299      	cmp	r1, r3
 8004a10:	d801      	bhi.n	8004a16 <ee_read+0x1e>
  return true;
 8004a12:	2001      	movs	r0, #1
}
 8004a14:	bd30      	pop	{r4, r5, pc}
    if (data != NULL)
 8004a16:	2a00      	cmp	r2, #0
 8004a18:	d004      	beq.n	8004a24 <ee_read+0x2c>
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8004a1a:	4d07      	ldr	r5, [pc, #28]	; (8004a38 <ee_read+0x40>)
 8004a1c:	195d      	adds	r5, r3, r5
 8004a1e:	782d      	ldrb	r5, [r5, #0]
 8004a20:	7015      	strb	r5, [r2, #0]
      data++;
 8004a22:	3201      	adds	r2, #1
    if (i < _EE_USE_RAM_BYTE)
 8004a24:	4283      	cmp	r3, r0
 8004a26:	d203      	bcs.n	8004a30 <ee_read+0x38>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8004a28:	4d03      	ldr	r5, [pc, #12]	; (8004a38 <ee_read+0x40>)
 8004a2a:	195d      	adds	r5, r3, r5
 8004a2c:	782d      	ldrb	r5, [r5, #0]
 8004a2e:	54e5      	strb	r5, [r4, r3]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8004a30:	3301      	adds	r3, #1
 8004a32:	e7ec      	b.n	8004a0e <ee_read+0x16>
 8004a34:	20000790 	.word	0x20000790
 8004a38:	0800f800 	.word	0x0800f800

08004a3c <ee_init>:
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2180      	movs	r1, #128	; 0x80
{
 8004a40:	b510      	push	{r4, lr}
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 8004a42:	0010      	movs	r0, r2
 8004a44:	00c9      	lsls	r1, r1, #3
 8004a46:	f7ff ffd7 	bl	80049f8 <ee_read>
}
 8004a4a:	bd10      	pop	{r4, pc}

08004a4c <ee_writeToRam>:
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	000c      	movs	r4, r1
 8004a50:	0011      	movs	r1, r2
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8004a52:	2280      	movs	r2, #128	; 0x80
 8004a54:	1905      	adds	r5, r0, r4
{
 8004a56:	0003      	movs	r3, r0
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8004a58:	00d2      	lsls	r2, r2, #3
    return false;
 8004a5a:	2000      	movs	r0, #0
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8004a5c:	4295      	cmp	r5, r2
 8004a5e:	d807      	bhi.n	8004a70 <ee_writeToRam+0x24>
    return false;
 8004a60:	1e08      	subs	r0, r1, #0
  if (data == NULL)
 8004a62:	d005      	beq.n	8004a70 <ee_writeToRam+0x24>
    return false;
  memcpy(&ee_ram[startVirtualAddress], data, len);
 8004a64:	4803      	ldr	r0, [pc, #12]	; (8004a74 <ee_writeToRam+0x28>)
 8004a66:	0022      	movs	r2, r4
 8004a68:	1818      	adds	r0, r3, r0
 8004a6a:	f002 f8ed 	bl	8006c48 <memcpy>
  return true;
 8004a6e:	2001      	movs	r0, #1
#else
  return false;
#endif
}
 8004a70:	bd70      	pop	{r4, r5, r6, pc}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	20000790 	.word	0x20000790

08004a78 <ee_commit>:
//##########################################################################################################
bool  ee_commit(void)
{
 8004a78:	b510      	push	{r4, lr}
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f7ff ff92 	bl	80049a4 <ee_format>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d005      	beq.n	8004a90 <ee_commit+0x18>
  if (data == NULL)
 8004a84:	2180      	movs	r1, #128	; 0x80
 8004a86:	2000      	movs	r0, #0
 8004a88:	4a02      	ldr	r2, [pc, #8]	; (8004a94 <ee_commit+0x1c>)
 8004a8a:	00c9      	lsls	r1, r1, #3
 8004a8c:	f7ff ff5a 	bl	8004944 <ee_write.part.0>
    return false;
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
#else
  return false;
#endif
}
 8004a90:	bd10      	pop	{r4, pc}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	20000790 	.word	0x20000790

08004a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a9c:	2234      	movs	r2, #52	; 0x34
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	a805      	add	r0, sp, #20
 8004aa2:	f002 f8da 	bl	8006c5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004aa6:	2210      	movs	r2, #16
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	a801      	add	r0, sp, #4
 8004aac:	f002 f8d5 	bl	8006c5a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ab0:	2080      	movs	r0, #128	; 0x80
 8004ab2:	0080      	lsls	r0, r0, #2
 8004ab4:	f001 f9b8 	bl	8005e28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004ac2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 9;
 8004ac4:	3309      	adds	r3, #9
 8004ac6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ac8:	2380      	movs	r3, #128	; 0x80
 8004aca:	029b      	lsls	r3, r3, #10
 8004acc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8004ace:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ad0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ad2:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8004ad4:	05db      	lsls	r3, r3, #23
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ad6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ad8:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ada:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004adc:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ade:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8004ae0:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ae2:	f001 f9fd 	bl	8005ee0 <HAL_RCC_OscConfig>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d001      	beq.n	8004aee <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004aea:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004aec:	e7fe      	b.n	8004aec <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004aee:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004af0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004af2:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004af4:	2101      	movs	r1, #1
 8004af6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004af8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004afa:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004afc:	f001 fc50 	bl	80063a0 <HAL_RCC_ClockConfig>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d001      	beq.n	8004b08 <SystemClock_Config+0x70>
 8004b04:	b672      	cpsid	i
  while (1)
 8004b06:	e7fe      	b.n	8004b06 <SystemClock_Config+0x6e>
}
 8004b08:	b012      	add	sp, #72	; 0x48
 8004b0a:	bd10      	pop	{r4, pc}

08004b0c <main>:
{
 8004b0c:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0e:	2501      	movs	r5, #1
{
 8004b10:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8004b12:	f000 fad3 	bl	80050bc <HAL_Init>
  SystemClock_Config();
 8004b16:	f7ff ffbf 	bl	8004a98 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	a804      	add	r0, sp, #16
 8004b20:	f002 f89b 	bl	8006c5a <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b24:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b26:	4b3e      	ldr	r3, [pc, #248]	; (8004c20 <main+0x114>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b28:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b2c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b2e:	432a      	orrs	r2, r5
 8004b30:	635a      	str	r2, [r3, #52]	; 0x34
 8004b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b34:	402a      	ands	r2, r5
 8004b36:	9201      	str	r2, [sp, #4]
 8004b38:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	635a      	str	r2, [r3, #52]	; 0x34
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	400b      	ands	r3, r1
 8004b44:	9302      	str	r3, [sp, #8]
 8004b46:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004b48:	233c      	movs	r3, #60	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004b4c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4e:	f000 fc37 	bl	80053c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004b52:	23e0      	movs	r3, #224	; 0xe0
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b58:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b5a:	4832      	ldr	r0, [pc, #200]	; (8004c24 <main+0x118>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b5c:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b5e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b60:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b62:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b64:	f000 fc2c 	bl	80053c0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2007      	movs	r0, #7
 8004b6c:	0011      	movs	r1, r2
 8004b6e:	f000 faed 	bl	800514c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004b72:	2007      	movs	r0, #7
 8004b74:	f000 fb14 	bl	80051a0 <HAL_NVIC_EnableIRQ>
  hi2c2.Instance = I2C2;
 8004b78:	4c2b      	ldr	r4, [pc, #172]	; (8004c28 <main+0x11c>)
 8004b7a:	4b2c      	ldr	r3, [pc, #176]	; (8004c2c <main+0x120>)
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004b7c:	0020      	movs	r0, r4
  hi2c2.Instance = I2C2;
 8004b7e:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x2010091A;
 8004b80:	4b2b      	ldr	r3, [pc, #172]	; (8004c30 <main+0x124>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b82:	60e5      	str	r5, [r4, #12]
  hi2c2.Init.Timing = 0x2010091A;
 8004b84:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60a3      	str	r3, [r4, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b8a:	6123      	str	r3, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004b8c:	6163      	str	r3, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b8e:	61a3      	str	r3, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b90:	61e3      	str	r3, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b92:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004b94:	f000 fe14 	bl	80057c0 <HAL_I2C_Init>
 8004b98:	1e01      	subs	r1, r0, #0
 8004b9a:	d001      	beq.n	8004ba0 <main+0x94>
 8004b9c:	b672      	cpsid	i
  while (1)
 8004b9e:	e7fe      	b.n	8004b9e <main+0x92>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004ba0:	0020      	movs	r0, r4
 8004ba2:	f001 f8d3 	bl	8005d4c <HAL_I2CEx_ConfigAnalogFilter>
 8004ba6:	1e01      	subs	r1, r0, #0
 8004ba8:	d001      	beq.n	8004bae <main+0xa2>
 8004baa:	b672      	cpsid	i
  while (1)
 8004bac:	e7fe      	b.n	8004bac <main+0xa0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004bae:	0020      	movs	r0, r4
 8004bb0:	f001 f8f2 	bl	8005d98 <HAL_I2CEx_ConfigDigitalFilter>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d001      	beq.n	8004bbc <main+0xb0>
 8004bb8:	b672      	cpsid	i
  while (1)
 8004bba:	e7fe      	b.n	8004bba <main+0xae>
  huart1.Instance = USART1;
 8004bbc:	4c1d      	ldr	r4, [pc, #116]	; (8004c34 <main+0x128>)
 8004bbe:	4b1e      	ldr	r3, [pc, #120]	; (8004c38 <main+0x12c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004bc0:	60a0      	str	r0, [r4, #8]
  huart1.Instance = USART1;
 8004bc2:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
 8004bc4:	23e1      	movs	r3, #225	; 0xe1
 8004bc6:	025b      	lsls	r3, r3, #9
 8004bc8:	6063      	str	r3, [r4, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004bca:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004bcc:	60e0      	str	r0, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004bce:	6120      	str	r0, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bd0:	61a0      	str	r0, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bd2:	61e0      	str	r0, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bd4:	6220      	str	r0, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bd6:	6260      	str	r0, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bd8:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004bda:	0020      	movs	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004bdc:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004bde:	f001 ff47 	bl	8006a70 <HAL_UART_Init>
 8004be2:	1e01      	subs	r1, r0, #0
 8004be4:	d001      	beq.n	8004bea <main+0xde>
 8004be6:	b672      	cpsid	i
  while (1)
 8004be8:	e7fe      	b.n	8004be8 <main+0xdc>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bea:	0020      	movs	r0, r4
 8004bec:	f001 ffb8 	bl	8006b60 <HAL_UARTEx_SetTxFifoThreshold>
 8004bf0:	1e01      	subs	r1, r0, #0
 8004bf2:	d001      	beq.n	8004bf8 <main+0xec>
 8004bf4:	b672      	cpsid	i
  while (1)
 8004bf6:	e7fe      	b.n	8004bf6 <main+0xea>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bf8:	0020      	movs	r0, r4
 8004bfa:	f001 ffd5 	bl	8006ba8 <HAL_UARTEx_SetRxFifoThreshold>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d001      	beq.n	8004c06 <main+0xfa>
 8004c02:	b672      	cpsid	i
  while (1)
 8004c04:	e7fe      	b.n	8004c04 <main+0xf8>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004c06:	0020      	movs	r0, r4
 8004c08:	f001 ff8c 	bl	8006b24 <HAL_UARTEx_DisableFifoMode>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d001      	beq.n	8004c14 <main+0x108>
 8004c10:	b672      	cpsid	i
  while (1)
 8004c12:	e7fe      	b.n	8004c12 <main+0x106>
  LM_Init();
 8004c14:	f7ff f90e 	bl	8003e34 <LM_Init>
	  Loop();
 8004c18:	f7ff fc2c 	bl	8004474 <Loop>
  while (1)
 8004c1c:	e7fc      	b.n	8004c18 <main+0x10c>
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	40021000 	.word	0x40021000
 8004c24:	50000400 	.word	0x50000400
 8004c28:	20000b90 	.word	0x20000b90
 8004c2c:	40005800 	.word	0x40005800
 8004c30:	2010091a 	.word	0x2010091a
 8004c34:	20000be4 	.word	0x20000be4
 8004c38:	40013800 	.word	0x40013800

08004c3c <Error_Handler>:
 8004c3c:	b672      	cpsid	i
  while (1)
 8004c3e:	e7fe      	b.n	8004c3e <Error_Handler+0x2>

08004c40 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c40:	2001      	movs	r0, #1
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <HAL_MspInit+0x2c>)
{
 8004c44:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c46:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c48:	4301      	orrs	r1, r0
 8004c4a:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c4c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c50:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c52:	4002      	ands	r2, r0
 8004c54:	9200      	str	r2, [sp, #0]
 8004c56:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	400b      	ands	r3, r1
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c66:	b002      	add	sp, #8
 8004c68:	4770      	bx	lr
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	40021000 	.word	0x40021000

08004c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c70:	b510      	push	{r4, lr}
 8004c72:	0004      	movs	r4, r0
 8004c74:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c76:	2214      	movs	r2, #20
 8004c78:	2100      	movs	r1, #0
 8004c7a:	a803      	add	r0, sp, #12
 8004c7c:	f001 ffed 	bl	8006c5a <memset>
  if(hi2c->Instance==I2C2)
 8004c80:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <HAL_I2C_MspInit+0x58>)
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d11c      	bne.n	8004cc2 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c88:	2102      	movs	r1, #2
 8004c8a:	4c10      	ldr	r4, [pc, #64]	; (8004ccc <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c8c:	4810      	ldr	r0, [pc, #64]	; (8004cd0 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004c90:	430a      	orrs	r2, r1
 8004c92:	6362      	str	r2, [r4, #52]	; 0x34
 8004c94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c96:	400b      	ands	r3, r1
 8004c98:	9301      	str	r3, [sp, #4]
 8004c9a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c9c:	23c0      	movs	r3, #192	; 0xc0
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ca2:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ca6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8004ca8:	3b0c      	subs	r3, #12
 8004caa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cac:	f000 fb88 	bl	80053c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004cb0:	2180      	movs	r1, #128	; 0x80
 8004cb2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004cb4:	03c9      	lsls	r1, r1, #15
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	63e2      	str	r2, [r4, #60]	; 0x3c
 8004cba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cbc:	400b      	ands	r3, r1
 8004cbe:	9302      	str	r3, [sp, #8]
 8004cc0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004cc2:	b008      	add	sp, #32
 8004cc4:	bd10      	pop	{r4, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	40005800 	.word	0x40005800
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	50000400 	.word	0x50000400

08004cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004cd4:	b510      	push	{r4, lr}
 8004cd6:	0004      	movs	r4, r0
 8004cd8:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cda:	2214      	movs	r2, #20
 8004cdc:	2100      	movs	r1, #0
 8004cde:	a803      	add	r0, sp, #12
 8004ce0:	f001 ffbb 	bl	8006c5a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ce4:	2218      	movs	r2, #24
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	a808      	add	r0, sp, #32
 8004cea:	f001 ffb6 	bl	8006c5a <memset>
  if(huart->Instance==USART1)
 8004cee:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <HAL_UART_MspInit+0x78>)
 8004cf0:	6822      	ldr	r2, [r4, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d128      	bne.n	8004d48 <HAL_UART_MspInit+0x74>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004cf6:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cf8:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004cfa:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cfc:	f001 fc12 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 8004d04:	f7ff ff9a 	bl	8004c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d08:	2080      	movs	r0, #128	; 0x80
 8004d0a:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <HAL_UART_MspInit+0x7c>)
 8004d0c:	01c0      	lsls	r0, r0, #7
 8004d0e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d10:	4301      	orrs	r1, r0
 8004d12:	6419      	str	r1, [r3, #64]	; 0x40
 8004d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d16:	4002      	ands	r2, r0
 8004d18:	9201      	str	r2, [sp, #4]
 8004d1a:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d20:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d22:	4311      	orrs	r1, r2
 8004d24:	6359      	str	r1, [r3, #52]	; 0x34
 8004d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d28:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	9302      	str	r3, [sp, #8]
 8004d2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004d30:	23c0      	movs	r3, #192	; 0xc0
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d36:	2302      	movs	r3, #2
 8004d38:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d3c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d40:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004d42:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d44:	f000 fb3c 	bl	80053c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004d48:	b00e      	add	sp, #56	; 0x38
 8004d4a:	bd10      	pop	{r4, pc}
 8004d4c:	40013800 	.word	0x40013800
 8004d50:	40021000 	.word	0x40021000

08004d54 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d54:	e7fe      	b.n	8004d54 <NMI_Handler>

08004d56 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d56:	e7fe      	b.n	8004d56 <HardFault_Handler>

08004d58 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004d58:	4770      	bx	lr

08004d5a <PendSV_Handler>:
 8004d5a:	4770      	bx	lr

08004d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d5e:	f000 f9c1 	bl	80050e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d62:	bd10      	pop	{r4, pc}

08004d64 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004d64:	2080      	movs	r0, #128	; 0x80
{
 8004d66:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004d68:	0180      	lsls	r0, r0, #6
 8004d6a:	f000 fbdf 	bl	800552c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004d6e:	2080      	movs	r0, #128	; 0x80
 8004d70:	01c0      	lsls	r0, r0, #7
 8004d72:	f000 fbdb 	bl	800552c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004d76:	2080      	movs	r0, #128	; 0x80
 8004d78:	0200      	lsls	r0, r0, #8
 8004d7a:	f000 fbd7 	bl	800552c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004d7e:	bd10      	pop	{r4, pc}

08004d80 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004d80:	2001      	movs	r0, #1
 8004d82:	4770      	bx	lr

08004d84 <_kill>:

int _kill(int pid, int sig)
{
 8004d84:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d86:	f001 ff35 	bl	8006bf4 <__errno>
 8004d8a:	2316      	movs	r3, #22
 8004d8c:	6003      	str	r3, [r0, #0]
  return -1;
 8004d8e:	2001      	movs	r0, #1
}
 8004d90:	4240      	negs	r0, r0
 8004d92:	bd10      	pop	{r4, pc}

08004d94 <_exit>:

void _exit (int status)
{
 8004d94:	b510      	push	{r4, lr}
  errno = EINVAL;
 8004d96:	f001 ff2d 	bl	8006bf4 <__errno>
 8004d9a:	2316      	movs	r3, #22
 8004d9c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004d9e:	e7fe      	b.n	8004d9e <_exit+0xa>

08004da0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	000e      	movs	r6, r1
 8004da4:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004da6:	2500      	movs	r5, #0
 8004da8:	42a5      	cmp	r5, r4
 8004daa:	db01      	blt.n	8004db0 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8004dac:	0020      	movs	r0, r4
 8004dae:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8004db0:	e000      	b.n	8004db4 <_read+0x14>
 8004db2:	bf00      	nop
 8004db4:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004db6:	3501      	adds	r5, #1
 8004db8:	e7f6      	b.n	8004da8 <_read+0x8>

08004dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dba:	b570      	push	{r4, r5, r6, lr}
 8004dbc:	000e      	movs	r6, r1
 8004dbe:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dc0:	2500      	movs	r5, #0
 8004dc2:	42a5      	cmp	r5, r4
 8004dc4:	db01      	blt.n	8004dca <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8004dc6:	0020      	movs	r0, r4
 8004dc8:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8004dca:	5d70      	ldrb	r0, [r6, r5]
 8004dcc:	e000      	b.n	8004dd0 <_write+0x16>
 8004dce:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dd0:	3501      	adds	r5, #1
 8004dd2:	e7f6      	b.n	8004dc2 <_write+0x8>

08004dd4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8004dd4:	2001      	movs	r0, #1
}
 8004dd6:	4240      	negs	r0, r0
 8004dd8:	4770      	bx	lr

08004dda <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	019b      	lsls	r3, r3, #6
  return 0;
}
 8004dde:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8004de0:	604b      	str	r3, [r1, #4]
}
 8004de2:	4770      	bx	lr

08004de4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004de4:	2001      	movs	r0, #1
 8004de6:	4770      	bx	lr

08004de8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004de8:	2000      	movs	r0, #0
 8004dea:	4770      	bx	lr

08004dec <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004dec:	4a0b      	ldr	r2, [pc, #44]	; (8004e1c <_sbrk+0x30>)
 8004dee:	490c      	ldr	r1, [pc, #48]	; (8004e20 <_sbrk+0x34>)
{
 8004df0:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004df2:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004df4:	4a0b      	ldr	r2, [pc, #44]	; (8004e24 <_sbrk+0x38>)
{
 8004df6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8004df8:	6810      	ldr	r0, [r2, #0]
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d101      	bne.n	8004e02 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8004dfe:	480a      	ldr	r0, [pc, #40]	; (8004e28 <_sbrk+0x3c>)
 8004e00:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e02:	6810      	ldr	r0, [r2, #0]
 8004e04:	18c3      	adds	r3, r0, r3
 8004e06:	428b      	cmp	r3, r1
 8004e08:	d906      	bls.n	8004e18 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8004e0a:	f001 fef3 	bl	8006bf4 <__errno>
 8004e0e:	230c      	movs	r3, #12
 8004e10:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004e12:	2001      	movs	r0, #1
 8004e14:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004e16:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004e18:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8004e1a:	e7fc      	b.n	8004e16 <_sbrk+0x2a>
 8004e1c:	00000400 	.word	0x00000400
 8004e20:	20002000 	.word	0x20002000
 8004e24:	20000c78 	.word	0x20000c78
 8004e28:	20000d30 	.word	0x20000d30

08004e2c <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e2c:	4770      	bx	lr

08004e2e <u8g2_gpio_and_delay_stm32>:
 */
#include<u8g2_iic.h>
#include "main.h"
extern I2C_HandleTypeDef hi2c2;
uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004e2e:	0010      	movs	r0, r2
 8004e30:	b510      	push	{r4, lr}
	switch(msg){
 8004e32:	2929      	cmp	r1, #41	; 0x29
 8004e34:	d00d      	beq.n	8004e52 <u8g2_gpio_and_delay_stm32+0x24>
 8004e36:	d804      	bhi.n	8004e42 <u8g2_gpio_and_delay_stm32+0x14>
 8004e38:	3928      	subs	r1, #40	; 0x28
 8004e3a:	424b      	negs	r3, r1
 8004e3c:	4159      	adcs	r1, r3

    case U8X8_MSG_GPIO_I2C_DATA:
        break;

	default:
		return 0;
 8004e3e:	b2c8      	uxtb	r0, r1
	}
	return 1; // command processed successfully.
}
 8004e40:	bd10      	pop	{r4, pc}
	switch(msg){
 8004e42:	2000      	movs	r0, #0
 8004e44:	2301      	movs	r3, #1
 8004e46:	394c      	subs	r1, #76	; 0x4c
 8004e48:	b2c9      	uxtb	r1, r1
 8004e4a:	428b      	cmp	r3, r1
 8004e4c:	4140      	adcs	r0, r0
	return 1; // command processed successfully.
 8004e4e:	b2c0      	uxtb	r0, r0
 8004e50:	e7f6      	b.n	8004e40 <u8g2_gpio_and_delay_stm32+0x12>
		HAL_Delay(arg_int);
 8004e52:	f000 f959 	bl	8005108 <HAL_Delay>
	return 1; // command processed successfully.
 8004e56:	2001      	movs	r0, #1
	    break;
 8004e58:	e7f2      	b.n	8004e40 <u8g2_gpio_and_delay_stm32+0x12>
	...

08004e5c <u8x8_byte_i2c>:
uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  static uint8_t buffer[128];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
  static uint8_t buf_idx;
  uint8_t *data;

  switch(msg)
 8004e5e:	3914      	subs	r1, #20
{
 8004e60:	0004      	movs	r4, r0
  switch(msg)
 8004e62:	0008      	movs	r0, r1
 8004e64:	290c      	cmp	r1, #12
 8004e66:	d82d      	bhi.n	8004ec4 <u8x8_byte_i2c+0x68>
 8004e68:	f7fb f952 	bl	8000110 <__gnu_thumb1_case_uqi>
 8004e6c:	072c2c15 	.word	0x072c2c15
 8004e70:	2c2c201c 	.word	0x2c2c201c
 8004e74:	2c2c2c2c 	.word	0x2c2c2c2c
 8004e78:	15          	.byte	0x15
 8004e79:	00          	.byte	0x00
 8004e7a:	2100      	movs	r1, #0
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	buffer[buf_idx++] = *data;
 8004e7c:	2001      	movs	r0, #1
  switch(msg)
 8004e7e:	000d      	movs	r5, r1
	buffer[buf_idx++] = *data;
 8004e80:	4684      	mov	ip, r0
 8004e82:	4c11      	ldr	r4, [pc, #68]	; (8004ec8 <u8x8_byte_i2c+0x6c>)
 8004e84:	4f11      	ldr	r7, [pc, #68]	; (8004ecc <u8x8_byte_i2c+0x70>)
 8004e86:	7826      	ldrb	r6, [r4, #0]
 8004e88:	1870      	adds	r0, r6, r1
 8004e8a:	b2c0      	uxtb	r0, r0
      while( arg_int > 0 )
 8004e8c:	428a      	cmp	r2, r1
 8004e8e:	d104      	bne.n	8004e9a <u8x8_byte_i2c+0x3e>
 8004e90:	2d00      	cmp	r5, #0
 8004e92:	d000      	beq.n	8004e96 <u8x8_byte_i2c+0x3a>
 8004e94:	7020      	strb	r0, [r4, #0]
      HAL_I2C_Master_Transmit(&hi2c2,u8x8_GetI2CAddress(u8x8),buffer,buf_idx,1000);
      break;
    default:
      return 0;
  }
  return 1;
 8004e96:	2001      	movs	r0, #1
}
 8004e98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	buffer[buf_idx++] = *data;
 8004e9a:	5c5d      	ldrb	r5, [r3, r1]
 8004e9c:	3101      	adds	r1, #1
 8004e9e:	543d      	strb	r5, [r7, r0]
 8004ea0:	4665      	mov	r5, ip
 8004ea2:	e7f1      	b.n	8004e88 <u8x8_byte_i2c+0x2c>
      buf_idx = 0;
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <u8x8_byte_i2c+0x6c>)
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	e7f4      	b.n	8004e96 <u8x8_byte_i2c+0x3a>
      HAL_I2C_Master_Transmit(&hi2c2,u8x8_GetI2CAddress(u8x8),buffer,buf_idx,1000);
 8004eac:	22fa      	movs	r2, #250	; 0xfa
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <u8x8_byte_i2c+0x6c>)
 8004eb0:	3405      	adds	r4, #5
 8004eb2:	0092      	lsls	r2, r2, #2
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	7fe1      	ldrb	r1, [r4, #31]
 8004eb8:	4805      	ldr	r0, [pc, #20]	; (8004ed0 <u8x8_byte_i2c+0x74>)
 8004eba:	9200      	str	r2, [sp, #0]
 8004ebc:	4a03      	ldr	r2, [pc, #12]	; (8004ecc <u8x8_byte_i2c+0x70>)
 8004ebe:	f000 fcdd 	bl	800587c <HAL_I2C_Master_Transmit>
      break;
 8004ec2:	e7e8      	b.n	8004e96 <u8x8_byte_i2c+0x3a>
      return 0;
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	e7e7      	b.n	8004e98 <u8x8_byte_i2c+0x3c>
 8004ec8:	20000c7c 	.word	0x20000c7c
 8004ecc:	20000c7d 	.word	0x20000c7d
 8004ed0:	20000b90 	.word	0x20000b90

08004ed4 <u8g2_Init>:
void u8g2_Init(u8g2_t *u8g2)
{
 8004ed4:	b510      	push	{r4, lr}
 8004ed6:	0004      	movs	r4, r0
	u8g2_Setup_ssd1306_i2c_128x64_noname_1(u8g2, U8G2_R0,u8x8_byte_i2c,u8g2_gpio_and_delay_stm32);
 8004ed8:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <u8g2_Init+0x24>)
 8004eda:	4a08      	ldr	r2, [pc, #32]	; (8004efc <u8g2_Init+0x28>)
 8004edc:	4908      	ldr	r1, [pc, #32]	; (8004f00 <u8g2_Init+0x2c>)
 8004ede:	f7fe f8f5 	bl	80030cc <u8g2_Setup_ssd1306_i2c_128x64_noname_1>
   	u8g2_InitDisplay(u8g2);
 8004ee2:	0020      	movs	r0, r4
 8004ee4:	f7fe ff08 	bl	8003cf8 <u8x8_InitDisplay>
   	u8g2_SetPowerSave(u8g2, 0);
 8004ee8:	2100      	movs	r1, #0
 8004eea:	0020      	movs	r0, r4
 8004eec:	f7fe ff0b 	bl	8003d06 <u8x8_SetPowerSave>
	u8g2_ClearBuffer(u8g2);
 8004ef0:	0020      	movs	r0, r4
 8004ef2:	f7fe f8d0 	bl	8003096 <u8g2_ClearBuffer>
}
 8004ef6:	bd10      	pop	{r4, pc}
 8004ef8:	08004e2f 	.word	0x08004e2f
 8004efc:	08004e5d 	.word	0x08004e5d
 8004f00:	0800ef48 	.word	0x0800ef48

08004f04 <veml7700_write>:

#include "main.h"
#include "veml7700.h"
extern I2C_HandleTypeDef hi2c2;
void veml7700_write(uint8_t reg_addr,uint8_t *p_buf)
{
 8004f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&hi2c2,VEML_SLAVE_ADDR,reg_addr,1,p_buf,2,HAL_MAX_DELAY);
 8004f06:	2301      	movs	r3, #1
 8004f08:	425b      	negs	r3, r3
 8004f0a:	9302      	str	r3, [sp, #8]
 8004f0c:	3303      	adds	r3, #3
 8004f0e:	0002      	movs	r2, r0
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	9100      	str	r1, [sp, #0]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	2120      	movs	r1, #32
 8004f18:	4802      	ldr	r0, [pc, #8]	; (8004f24 <veml7700_write+0x20>)
 8004f1a:	f000 fd57 	bl	80059cc <HAL_I2C_Mem_Write>
}
 8004f1e:	b005      	add	sp, #20
 8004f20:	bd00      	pop	{pc}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	20000b90 	.word	0x20000b90

08004f28 <veml7700_read>:

void veml7700_read(uint8_t reg_addr,uint8_t *p_buf)
{
 8004f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(&hi2c2,VEML_SLAVE_ADDR,reg_addr,1,p_buf,2,HAL_MAX_DELAY);
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	425b      	negs	r3, r3
 8004f2e:	9302      	str	r3, [sp, #8]
 8004f30:	3303      	adds	r3, #3
 8004f32:	0002      	movs	r2, r0
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	9100      	str	r1, [sp, #0]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	2120      	movs	r1, #32
 8004f3c:	4802      	ldr	r0, [pc, #8]	; (8004f48 <veml7700_read+0x20>)
 8004f3e:	f000 fe23 	bl	8005b88 <HAL_I2C_Mem_Read>
}
 8004f42:	b005      	add	sp, #20
 8004f44:	bd00      	pop	{pc}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	20000b90 	.word	0x20000b90

08004f4c <veml7700_set_light_sensor_value>:
    r_value = ((rx_data[1] << 8) | rx_data[0]);
    return (r_value & mask) >> shift;
}

static void veml7700_set_light_sensor_value(uint8_t value,uint8_t command,uint16_t mask,uint8_t shift)
{
 8004f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4e:	001f      	movs	r7, r3
 8004f50:	0004      	movs	r4, r0
 8004f52:	000d      	movs	r5, r1
    uint8_t rx_data[2] = {0};
 8004f54:	2300      	movs	r3, #0
    uint16_t r_value = 0;
    uint16_t tmp_value = 0;
    veml7700_read(command,rx_data);
    r_value = ((rx_data[1] << 8) | rx_data[0]);
    tmp_value = r_value & ~(mask);
    tmp_value |= ((value << shift) & mask);
 8004f56:	40bc      	lsls	r4, r7
{
 8004f58:	b085      	sub	sp, #20
 8004f5a:	9201      	str	r2, [sp, #4]
    uint8_t rx_data[2] = {0};
 8004f5c:	aa02      	add	r2, sp, #8
    uint8_t tx_data[2] = {0};
 8004f5e:	ae03      	add	r6, sp, #12
    veml7700_read(command,rx_data);
 8004f60:	0011      	movs	r1, r2
 8004f62:	0028      	movs	r0, r5
    uint8_t rx_data[2] = {0};
 8004f64:	8013      	strh	r3, [r2, #0]
    uint8_t tx_data[2] = {0};
 8004f66:	8033      	strh	r3, [r6, #0]
    veml7700_read(command,rx_data);
 8004f68:	f7ff ffde 	bl	8004f28 <veml7700_read>
    r_value = ((rx_data[1] << 8) | rx_data[0]);
 8004f6c:	ab02      	add	r3, sp, #8
 8004f6e:	2200      	movs	r2, #0
 8004f70:	5e9b      	ldrsh	r3, [r3, r2]
    tmp_value |= ((value << shift) & mask);
 8004f72:	9a01      	ldr	r2, [sp, #4]
 8004f74:	405c      	eors	r4, r3
 8004f76:	4022      	ands	r2, r4
 8004f78:	405a      	eors	r2, r3
 8004f7a:	b212      	sxth	r2, r2

    tx_data[0] = tmp_value & 0xff;
 8004f7c:	7032      	strb	r2, [r6, #0]
    tx_data[1] = ((tmp_value >> 8) & 0xff);
 8004f7e:	b292      	uxth	r2, r2
 8004f80:	0a12      	lsrs	r2, r2, #8
    veml7700_write(command,tx_data);
 8004f82:	0031      	movs	r1, r6
 8004f84:	0028      	movs	r0, r5
    tx_data[1] = ((tmp_value >> 8) & 0xff);
 8004f86:	7072      	strb	r2, [r6, #1]
    veml7700_write(command,tx_data);
 8004f88:	f7ff ffbc 	bl	8004f04 <veml7700_write>
}
 8004f8c:	b005      	add	sp, #20
 8004f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f90 <get_lux_data>:
    return value;

}

double get_lux_data(void)
{
 8004f90:	b507      	push	{r0, r1, r2, lr}
    uint8_t rx_data[2] = {0};
 8004f92:	2300      	movs	r3, #0
 8004f94:	466a      	mov	r2, sp
    veml7700_read(COMMAND_ALS_DATA,rx_data);
 8004f96:	a901      	add	r1, sp, #4
 8004f98:	2004      	movs	r0, #4
    uint8_t rx_data[2] = {0};
 8004f9a:	8093      	strh	r3, [r2, #4]
    veml7700_read(COMMAND_ALS_DATA,rx_data);
 8004f9c:	f7ff ffc4 	bl	8004f28 <veml7700_read>
    r_value = ((rx_data[1] << 8) | rx_data[0]);
 8004fa0:	466b      	mov	r3, sp
 8004fa2:	8898      	ldrh	r0, [r3, #4]
    return (get_als_reg_data() * 2.1504);
 8004fa4:	f7fd fee4 	bl	8002d70 <__aeabi_i2d>
 8004fa8:	4a02      	ldr	r2, [pc, #8]	; (8004fb4 <get_lux_data+0x24>)
 8004faa:	4b03      	ldr	r3, [pc, #12]	; (8004fb8 <get_lux_data+0x28>)
 8004fac:	f7fd f88e 	bl	80020cc <__aeabi_dmul>
}
 8004fb0:	b003      	add	sp, #12
 8004fb2:	bd00      	pop	{pc}
 8004fb4:	ea4a8c15 	.word	0xea4a8c15
 8004fb8:	40013404 	.word	0x40013404

08004fbc <veml7700_init>:

void veml7700_init(void)
{
 8004fbc:	b513      	push	{r0, r1, r4, lr}
    uint8_t rx_data[2] = {0};
 8004fbe:	2400      	movs	r4, #0
 8004fc0:	a901      	add	r1, sp, #4
    veml7700_read(0x00,rx_data);
 8004fc2:	0020      	movs	r0, r4
    uint8_t rx_data[2] = {0};
 8004fc4:	800c      	strh	r4, [r1, #0]
    veml7700_read(0x00,rx_data);
 8004fc6:	f7ff ffaf 	bl	8004f28 <veml7700_read>
    return veml7700_set_light_sensor_value(enable,COMMAND_ALS_SD,ALS_SD_MASK,ALS_SD_SHIFT);
 8004fca:	2201      	movs	r2, #1
 8004fcc:	0023      	movs	r3, r4
 8004fce:	0021      	movs	r1, r4
 8004fd0:	0010      	movs	r0, r2
 8004fd2:	f7ff ffbb 	bl	8004f4c <veml7700_set_light_sensor_value>
    veml7700_set_light_sensor_value(enable,COMMAND_ALS_INT_EN,ALS_INT_EN_MASK,ALS_INT_EN_SHIFT);
 8004fd6:	0021      	movs	r1, r4
 8004fd8:	0020      	movs	r0, r4
 8004fda:	2301      	movs	r3, #1
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f7ff ffb5 	bl	8004f4c <veml7700_set_light_sensor_value>
    veml7700_set_light_sensor_value(gain,COMMAND_ALS_GAIN,ALS_GAIN_MASK,ALS_GAIN_SHIFT);
 8004fe2:	22c0      	movs	r2, #192	; 0xc0
 8004fe4:	0021      	movs	r1, r4
 8004fe6:	230b      	movs	r3, #11
 8004fe8:	2002      	movs	r0, #2
 8004fea:	0152      	lsls	r2, r2, #5
 8004fec:	f7ff ffae 	bl	8004f4c <veml7700_set_light_sensor_value>
    veml7700_set_light_sensor_value(time,COMMAND_ALS_IT,ALS_IT_MASK,ALS_IT_SHIFT);
 8004ff0:	22f0      	movs	r2, #240	; 0xf0
 8004ff2:	0021      	movs	r1, r4
 8004ff4:	2306      	movs	r3, #6
 8004ff6:	200c      	movs	r0, #12
 8004ff8:	0092      	lsls	r2, r2, #2
 8004ffa:	f7ff ffa7 	bl	8004f4c <veml7700_set_light_sensor_value>
    veml7700_set_light_sensor_value(mode,COMMAND_PSM_EN,PSM_EN_MASK,PSM_EN_SHIFT);
 8004ffe:	0023      	movs	r3, r4
 8005000:	0020      	movs	r0, r4
 8005002:	2201      	movs	r2, #1
 8005004:	2103      	movs	r1, #3
 8005006:	f7ff ffa1 	bl	8004f4c <veml7700_set_light_sensor_value>
    return veml7700_set_light_sensor_value(enable,COMMAND_ALS_SD,ALS_SD_MASK,ALS_SD_SHIFT);
 800500a:	0023      	movs	r3, r4
 800500c:	2201      	movs	r2, #1
 800500e:	0021      	movs	r1, r4
 8005010:	0020      	movs	r0, r4
 8005012:	f7ff ff9b 	bl	8004f4c <veml7700_set_light_sensor_value>
    set_integration_time(ALS_INTEGRATION_25ms);

    set_power_saving_mode(ALS_POWER_MODE_DISABLE);

    set_power_enable(ALS_POWER_ON);
}
 8005016:	bd13      	pop	{r0, r1, r4, pc}

08005018 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005018:	480d      	ldr	r0, [pc, #52]	; (8005050 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800501a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800501c:	f7ff ff06 	bl	8004e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005020:	480c      	ldr	r0, [pc, #48]	; (8005054 <LoopForever+0x6>)
  ldr r1, =_edata
 8005022:	490d      	ldr	r1, [pc, #52]	; (8005058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005024:	4a0d      	ldr	r2, [pc, #52]	; (800505c <LoopForever+0xe>)
  movs r3, #0
 8005026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005028:	e002      	b.n	8005030 <LoopCopyDataInit>

0800502a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800502a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800502c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800502e:	3304      	adds	r3, #4

08005030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005034:	d3f9      	bcc.n	800502a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005036:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005038:	4c0a      	ldr	r4, [pc, #40]	; (8005064 <LoopForever+0x16>)
  movs r3, #0
 800503a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800503c:	e001      	b.n	8005042 <LoopFillZerobss>

0800503e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800503e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005040:	3204      	adds	r2, #4

08005042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005044:	d3fb      	bcc.n	800503e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005046:	f001 fddb 	bl	8006c00 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800504a:	f7ff fd5f 	bl	8004b0c <main>

0800504e <LoopForever>:

LoopForever:
  b LoopForever
 800504e:	e7fe      	b.n	800504e <LoopForever>
  ldr   r0, =_estack
 8005050:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005058:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 800505c:	0800f600 	.word	0x0800f600
  ldr r2, =_sbss
 8005060:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8005064:	20000d30 	.word	0x20000d30

08005068 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005068:	e7fe      	b.n	8005068 <ADC1_IRQHandler>
	...

0800506c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800506c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <HAL_InitTick+0x44>)
{
 8005070:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8005072:	7819      	ldrb	r1, [r3, #0]
 8005074:	2900      	cmp	r1, #0
 8005076:	d101      	bne.n	800507c <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005078:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800507a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800507c:	20fa      	movs	r0, #250	; 0xfa
 800507e:	0080      	lsls	r0, r0, #2
 8005080:	f7fb f85a 	bl	8000138 <__udivsi3>
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <HAL_InitTick+0x48>)
 8005086:	0001      	movs	r1, r0
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	f7fb f855 	bl	8000138 <__udivsi3>
 800508e:	f000 f893 	bl	80051b8 <HAL_SYSTICK_Config>
 8005092:	1e04      	subs	r4, r0, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005096:	2d03      	cmp	r5, #3
 8005098:	d8ee      	bhi.n	8005078 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800509a:	0002      	movs	r2, r0
 800509c:	2001      	movs	r0, #1
 800509e:	0029      	movs	r1, r5
 80050a0:	4240      	negs	r0, r0
 80050a2:	f000 f853 	bl	800514c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80050a6:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <HAL_InitTick+0x4c>)
 80050a8:	0020      	movs	r0, r4
 80050aa:	601d      	str	r5, [r3, #0]
  return status;
 80050ac:	e7e5      	b.n	800507a <HAL_InitTick+0xe>
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	200000a0 	.word	0x200000a0
 80050b4:	2000009c 	.word	0x2000009c
 80050b8:	200000a4 	.word	0x200000a4

080050bc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <HAL_Init+0x24>)
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	6811      	ldr	r1, [r2, #0]
{
 80050c4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050c6:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050c8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050ca:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050cc:	f7ff ffce 	bl	800506c <HAL_InitTick>
 80050d0:	1e04      	subs	r4, r0, #0
 80050d2:	d103      	bne.n	80050dc <HAL_Init+0x20>
  HAL_MspInit();
 80050d4:	f7ff fdb4 	bl	8004c40 <HAL_MspInit>
}
 80050d8:	0020      	movs	r0, r4
 80050da:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80050dc:	2401      	movs	r4, #1
 80050de:	e7fb      	b.n	80050d8 <HAL_Init+0x1c>
 80050e0:	40022000 	.word	0x40022000

080050e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80050e4:	4a03      	ldr	r2, [pc, #12]	; (80050f4 <HAL_IncTick+0x10>)
 80050e6:	4b04      	ldr	r3, [pc, #16]	; (80050f8 <HAL_IncTick+0x14>)
 80050e8:	6811      	ldr	r1, [r2, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	185b      	adds	r3, r3, r1
 80050ee:	6013      	str	r3, [r2, #0]
}
 80050f0:	4770      	bx	lr
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	20000d00 	.word	0x20000d00
 80050f8:	200000a0 	.word	0x200000a0

080050fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80050fc:	4b01      	ldr	r3, [pc, #4]	; (8005104 <HAL_GetTick+0x8>)
 80050fe:	6818      	ldr	r0, [r3, #0]
}
 8005100:	4770      	bx	lr
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	20000d00 	.word	0x20000d00

08005108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800510c:	f7ff fff6 	bl	80050fc <HAL_GetTick>
 8005110:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005112:	1c63      	adds	r3, r4, #1
 8005114:	d002      	beq.n	800511c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005116:	4b04      	ldr	r3, [pc, #16]	; (8005128 <HAL_Delay+0x20>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800511c:	f7ff ffee 	bl	80050fc <HAL_GetTick>
 8005120:	1b40      	subs	r0, r0, r5
 8005122:	42a0      	cmp	r0, r4
 8005124:	d3fa      	bcc.n	800511c <HAL_Delay+0x14>
  {
  }
}
 8005126:	bd70      	pop	{r4, r5, r6, pc}
 8005128:	200000a0 	.word	0x200000a0

0800512c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800512c:	2102      	movs	r1, #2
 800512e:	4a02      	ldr	r2, [pc, #8]	; (8005138 <HAL_SuspendTick+0xc>)
 8005130:	6813      	ldr	r3, [r2, #0]
 8005132:	438b      	bics	r3, r1
 8005134:	6013      	str	r3, [r2, #0]
}
 8005136:	4770      	bx	lr
 8005138:	e000e010 	.word	0xe000e010

0800513c <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800513c:	2302      	movs	r3, #2
 800513e:	4a02      	ldr	r2, [pc, #8]	; (8005148 <HAL_ResumeTick+0xc>)
 8005140:	6811      	ldr	r1, [r2, #0]
 8005142:	430b      	orrs	r3, r1
 8005144:	6013      	str	r3, [r2, #0]
}
 8005146:	4770      	bx	lr
 8005148:	e000e010 	.word	0xe000e010

0800514c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800514c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800514e:	25ff      	movs	r5, #255	; 0xff
 8005150:	2403      	movs	r4, #3
 8005152:	002a      	movs	r2, r5
 8005154:	4004      	ands	r4, r0
 8005156:	00e4      	lsls	r4, r4, #3
 8005158:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800515a:	0189      	lsls	r1, r1, #6
 800515c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800515e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005160:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005162:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8005164:	2800      	cmp	r0, #0
 8005166:	db0a      	blt.n	800517e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005168:	24c0      	movs	r4, #192	; 0xc0
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_NVIC_SetPriority+0x4c>)
 800516c:	0880      	lsrs	r0, r0, #2
 800516e:	0080      	lsls	r0, r0, #2
 8005170:	18c0      	adds	r0, r0, r3
 8005172:	00a4      	lsls	r4, r4, #2
 8005174:	5903      	ldr	r3, [r0, r4]
 8005176:	401a      	ands	r2, r3
 8005178:	4311      	orrs	r1, r2
 800517a:	5101      	str	r1, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800517c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800517e:	200f      	movs	r0, #15
 8005180:	4003      	ands	r3, r0
 8005182:	3b08      	subs	r3, #8
 8005184:	4805      	ldr	r0, [pc, #20]	; (800519c <HAL_NVIC_SetPriority+0x50>)
 8005186:	089b      	lsrs	r3, r3, #2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	181b      	adds	r3, r3, r0
 800518c:	69d8      	ldr	r0, [r3, #28]
 800518e:	4002      	ands	r2, r0
 8005190:	4311      	orrs	r1, r2
 8005192:	61d9      	str	r1, [r3, #28]
 8005194:	e7f2      	b.n	800517c <HAL_NVIC_SetPriority+0x30>
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	e000e100 	.word	0xe000e100
 800519c:	e000ed00 	.word	0xe000ed00

080051a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80051a0:	2800      	cmp	r0, #0
 80051a2:	db05      	blt.n	80051b0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051a4:	231f      	movs	r3, #31
 80051a6:	4018      	ands	r0, r3
 80051a8:	3b1e      	subs	r3, #30
 80051aa:	4083      	lsls	r3, r0
 80051ac:	4a01      	ldr	r2, [pc, #4]	; (80051b4 <HAL_NVIC_EnableIRQ+0x14>)
 80051ae:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80051b0:	4770      	bx	lr
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	e000e100 	.word	0xe000e100

080051b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051b8:	2280      	movs	r2, #128	; 0x80
 80051ba:	1e43      	subs	r3, r0, #1
 80051bc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80051be:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d20d      	bcs.n	80051e0 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051c4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051c6:	4a07      	ldr	r2, [pc, #28]	; (80051e4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051c8:	4807      	ldr	r0, [pc, #28]	; (80051e8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051ca:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051cc:	6a03      	ldr	r3, [r0, #32]
 80051ce:	0609      	lsls	r1, r1, #24
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	430b      	orrs	r3, r1
 80051d6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051d8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051da:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051dc:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051de:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80051e0:	4770      	bx	lr
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	e000e010 	.word	0xe000e010
 80051e8:	e000ed00 	.word	0xe000ed00

080051ec <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;
 80051ec:	2000      	movs	r0, #0

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80051ee:	4b05      	ldr	r3, [pc, #20]	; (8005204 <HAL_FLASH_Unlock+0x18>)
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	4282      	cmp	r2, r0
 80051f4:	da05      	bge.n	8005202 <HAL_FLASH_Unlock+0x16>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80051f6:	4a04      	ldr	r2, [pc, #16]	; (8005208 <HAL_FLASH_Unlock+0x1c>)
 80051f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80051fa:	4a04      	ldr	r2, [pc, #16]	; (800520c <HAL_FLASH_Unlock+0x20>)
 80051fc:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80051fe:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8005200:	0fc0      	lsrs	r0, r0, #31
      status = HAL_ERROR;
    }
  }

  return status;
}
 8005202:	4770      	bx	lr
 8005204:	40022000 	.word	0x40022000
 8005208:	45670123 	.word	0x45670123
 800520c:	cdef89ab 	.word	0xcdef89ab

08005210 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	0004      	movs	r4, r0
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005214:	f7ff ff72 	bl	80050fc <HAL_GetTick>
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8005218:	2780      	movs	r7, #128	; 0x80
  uint32_t tickstart = HAL_GetTick();
 800521a:	0006      	movs	r6, r0
  while ((FLASH->SR & error) != 0x00U)
 800521c:	027f      	lsls	r7, r7, #9
 800521e:	4d14      	ldr	r5, [pc, #80]	; (8005270 <FLASH_WaitForLastOperation+0x60>)
 8005220:	692b      	ldr	r3, [r5, #16]
 8005222:	423b      	tst	r3, r7
 8005224:	d116      	bne.n	8005254 <FLASH_WaitForLastOperation+0x44>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005226:	692a      	ldr	r2, [r5, #16]
 8005228:	4b12      	ldr	r3, [pc, #72]	; (8005274 <FLASH_WaitForLastOperation+0x64>)
 800522a:	0011      	movs	r1, r2

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800522c:	4812      	ldr	r0, [pc, #72]	; (8005278 <FLASH_WaitForLastOperation+0x68>)
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800522e:	4019      	ands	r1, r3
  FLASH->SR = FLASH_SR_CLEAR;
 8005230:	6128      	str	r0, [r5, #16]

  if (error != 0x00U)
 8005232:	421a      	tst	r2, r3
 8005234:	d117      	bne.n	8005266 <FLASH_WaitForLastOperation+0x56>
    pFlash.ErrorCode = error;
    return HAL_ERROR;
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005236:	2780      	movs	r7, #128	; 0x80
 8005238:	02ff      	lsls	r7, r7, #11
 800523a:	692b      	ldr	r3, [r5, #16]
 800523c:	0018      	movs	r0, r3
 800523e:	4038      	ands	r0, r7
 8005240:	423b      	tst	r3, r7
 8005242:	d00f      	beq.n	8005264 <FLASH_WaitForLastOperation+0x54>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005244:	1c63      	adds	r3, r4, #1
 8005246:	d0f8      	beq.n	800523a <FLASH_WaitForLastOperation+0x2a>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005248:	f7ff ff58 	bl	80050fc <HAL_GetTick>
 800524c:	1b80      	subs	r0, r0, r6
 800524e:	42a0      	cmp	r0, r4
 8005250:	d3f3      	bcc.n	800523a <FLASH_WaitForLastOperation+0x2a>
 8005252:	e006      	b.n	8005262 <FLASH_WaitForLastOperation+0x52>
    if(Timeout != HAL_MAX_DELAY)
 8005254:	1c63      	adds	r3, r4, #1
 8005256:	d0e3      	beq.n	8005220 <FLASH_WaitForLastOperation+0x10>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005258:	f7ff ff50 	bl	80050fc <HAL_GetTick>
 800525c:	1b80      	subs	r0, r0, r6
 800525e:	42a0      	cmp	r0, r4
 8005260:	d3dd      	bcc.n	800521e <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8005262:	2003      	movs	r0, #3
      }
    }
  }

  return HAL_OK;
}
 8005264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode = error;
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <FLASH_WaitForLastOperation+0x6c>)
    return HAL_ERROR;
 8005268:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 800526a:	6059      	str	r1, [r3, #4]
    return HAL_ERROR;
 800526c:	e7fa      	b.n	8005264 <FLASH_WaitForLastOperation+0x54>
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	40022000 	.word	0x40022000
 8005274:	000083fa 	.word	0x000083fa
 8005278:	000083fb 	.word	0x000083fb
 800527c:	20000d04 	.word	0x20000d04

08005280 <HAL_FLASH_Program>:
{
 8005280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8005282:	4e17      	ldr	r6, [pc, #92]	; (80052e0 <HAL_FLASH_Program+0x60>)
{
 8005284:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(&pFlash);
 8005286:	7833      	ldrb	r3, [r6, #0]
{
 8005288:	0004      	movs	r4, r0
 800528a:	000d      	movs	r5, r1
  __HAL_LOCK(&pFlash);
 800528c:	2002      	movs	r0, #2
{
 800528e:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(&pFlash);
 8005290:	2b01      	cmp	r3, #1
 8005292:	d01e      	beq.n	80052d2 <HAL_FLASH_Program+0x52>
 8005294:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005296:	20fa      	movs	r0, #250	; 0xfa
  __HAL_LOCK(&pFlash);
 8005298:	7033      	strb	r3, [r6, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800529a:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800529c:	0080      	lsls	r0, r0, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800529e:	6073      	str	r3, [r6, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052a0:	f7ff ffb6 	bl	8005210 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d112      	bne.n	80052ce <HAL_FLASH_Program+0x4e>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80052a8:	4f0e      	ldr	r7, [pc, #56]	; (80052e4 <HAL_FLASH_Program+0x64>)
 80052aa:	2c01      	cmp	r4, #1
 80052ac:	d112      	bne.n	80052d4 <HAL_FLASH_Program+0x54>
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4323      	orrs	r3, r4
 80052b2:	617b      	str	r3, [r7, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80052b4:	9b00      	ldr	r3, [sp, #0]
 80052b6:	602b      	str	r3, [r5, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80052b8:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80052bc:	9b01      	ldr	r3, [sp, #4]
 80052be:	606b      	str	r3, [r5, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052c0:	20fa      	movs	r0, #250	; 0xfa
 80052c2:	0080      	lsls	r0, r0, #2
 80052c4:	f7ff ffa4 	bl	8005210 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	43a3      	bics	r3, r4
 80052cc:	617b      	str	r3, [r7, #20]
  __HAL_UNLOCK(&pFlash);
 80052ce:	2300      	movs	r3, #0
 80052d0:	7033      	strb	r3, [r6, #0]
}
 80052d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80052d4:	0028      	movs	r0, r5
 80052d6:	9900      	ldr	r1, [sp, #0]
 80052d8:	f005 febe 	bl	800b058 <__FLASH_Program_Fast_veneer>
 80052dc:	e7f0      	b.n	80052c0 <HAL_FLASH_Program+0x40>
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	20000d04 	.word	0x20000d04
 80052e4:	40022000 	.word	0x40022000

080052e8 <HAL_FLASH_Lock>:
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052e8:	20fa      	movs	r0, #250	; 0xfa
{
 80052ea:	b510      	push	{r4, lr}
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052ec:	0080      	lsls	r0, r0, #2
 80052ee:	f7ff ff8f 	bl	8005210 <FLASH_WaitForLastOperation>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80052f2:	2280      	movs	r2, #128	; 0x80
 80052f4:	4b04      	ldr	r3, [pc, #16]	; (8005308 <HAL_FLASH_Lock+0x20>)
 80052f6:	0612      	lsls	r2, r2, #24
 80052f8:	6959      	ldr	r1, [r3, #20]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80052fe:	6958      	ldr	r0, [r3, #20]
 8005300:	43c0      	mvns	r0, r0
  return status;
 8005302:	0fc0      	lsrs	r0, r0, #31
}
 8005304:	bd10      	pop	{r4, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	40022000 	.word	0x40022000

0800530c <FLASH_PageErase>:
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800530c:	4a04      	ldr	r2, [pc, #16]	; (8005320 <FLASH_PageErase+0x14>)
 800530e:	4805      	ldr	r0, [pc, #20]	; (8005324 <FLASH_PageErase+0x18>)
 8005310:	6953      	ldr	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8005312:	00c9      	lsls	r1, r1, #3
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8005314:	4003      	ands	r3, r0
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8005316:	4319      	orrs	r1, r3
 8005318:	4b03      	ldr	r3, [pc, #12]	; (8005328 <FLASH_PageErase+0x1c>)
 800531a:	4319      	orrs	r1, r3
 800531c:	6151      	str	r1, [r2, #20]
}
 800531e:	4770      	bx	lr
 8005320:	40022000 	.word	0x40022000
 8005324:	ffffe007 	.word	0xffffe007
 8005328:	00010002 	.word	0x00010002

0800532c <HAL_FLASHEx_Erase>:
{
 800532c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800532e:	4f21      	ldr	r7, [pc, #132]	; (80053b4 <HAL_FLASHEx_Erase+0x88>)
{
 8005330:	0005      	movs	r5, r0
  __HAL_LOCK(&pFlash);
 8005332:	783b      	ldrb	r3, [r7, #0]
 8005334:	2402      	movs	r4, #2
{
 8005336:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(&pFlash);
 8005338:	2b01      	cmp	r3, #1
 800533a:	d01a      	beq.n	8005372 <HAL_FLASHEx_Erase+0x46>
 800533c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800533e:	20fa      	movs	r0, #250	; 0xfa
  __HAL_LOCK(&pFlash);
 8005340:	703b      	strb	r3, [r7, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005342:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005344:	0080      	lsls	r0, r0, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005346:	607b      	str	r3, [r7, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005348:	f7ff ff62 	bl	8005210 <FLASH_WaitForLastOperation>
 800534c:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 800534e:	d10e      	bne.n	800536e <HAL_FLASHEx_Erase+0x42>
    pEraseInit->Banks = FLASH_BANK_1;
 8005350:	2304      	movs	r3, #4
 8005352:	606b      	str	r3, [r5, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	2b04      	cmp	r3, #4
 8005358:	d10d      	bne.n	8005376 <HAL_FLASHEx_Erase+0x4a>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800535a:	20fa      	movs	r0, #250	; 0xfa
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800535c:	4a16      	ldr	r2, [pc, #88]	; (80053b8 <HAL_FLASHEx_Erase+0x8c>)
 800535e:	4b17      	ldr	r3, [pc, #92]	; (80053bc <HAL_FLASHEx_Erase+0x90>)
 8005360:	6951      	ldr	r1, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005362:	0080      	lsls	r0, r0, #2
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8005364:	430b      	orrs	r3, r1
 8005366:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005368:	f7ff ff52 	bl	8005210 <FLASH_WaitForLastOperation>
 800536c:	0004      	movs	r4, r0
  __HAL_UNLOCK(&pFlash);
 800536e:	2300      	movs	r3, #0
 8005370:	703b      	strb	r3, [r7, #0]
}
 8005372:	0020      	movs	r0, r4
 8005374:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      *PageError = 0xFFFFFFFFU;
 8005376:	2301      	movs	r3, #1
 8005378:	9a01      	ldr	r2, [sp, #4]
 800537a:	425b      	negs	r3, r3
 800537c:	6013      	str	r3, [r2, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800537e:	68ae      	ldr	r6, [r5, #8]
 8005380:	68ab      	ldr	r3, [r5, #8]
 8005382:	68ea      	ldr	r2, [r5, #12]
 8005384:	189b      	adds	r3, r3, r2
 8005386:	42b3      	cmp	r3, r6
 8005388:	d90c      	bls.n	80053a4 <HAL_FLASHEx_Erase+0x78>
        FLASH_PageErase(pEraseInit->Banks, index);
 800538a:	6868      	ldr	r0, [r5, #4]
 800538c:	0031      	movs	r1, r6
 800538e:	f7ff ffbd 	bl	800530c <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005392:	20fa      	movs	r0, #250	; 0xfa
 8005394:	0080      	lsls	r0, r0, #2
 8005396:	f7ff ff3b 	bl	8005210 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 800539a:	2800      	cmp	r0, #0
 800539c:	d008      	beq.n	80053b0 <HAL_FLASHEx_Erase+0x84>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800539e:	0004      	movs	r4, r0
          *PageError = index;
 80053a0:	9b01      	ldr	r3, [sp, #4]
 80053a2:	601e      	str	r6, [r3, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80053a4:	2102      	movs	r1, #2
 80053a6:	4a04      	ldr	r2, [pc, #16]	; (80053b8 <HAL_FLASHEx_Erase+0x8c>)
 80053a8:	6953      	ldr	r3, [r2, #20]
 80053aa:	438b      	bics	r3, r1
 80053ac:	6153      	str	r3, [r2, #20]
 80053ae:	e7de      	b.n	800536e <HAL_FLASHEx_Erase+0x42>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80053b0:	3601      	adds	r6, #1
 80053b2:	e7e5      	b.n	8005380 <HAL_FLASHEx_Erase+0x54>
 80053b4:	20000d04 	.word	0x20000d04
 80053b8:	40022000 	.word	0x40022000
 80053bc:	00010004 	.word	0x00010004

080053c0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 80053c0:	2300      	movs	r3, #0
{
 80053c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053c6:	680a      	ldr	r2, [r1, #0]
 80053c8:	0014      	movs	r4, r2
 80053ca:	40dc      	lsrs	r4, r3
 80053cc:	d101      	bne.n	80053d2 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 80053ce:	b005      	add	sp, #20
 80053d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053d2:	2501      	movs	r5, #1
 80053d4:	0014      	movs	r4, r2
 80053d6:	409d      	lsls	r5, r3
 80053d8:	402c      	ands	r4, r5
 80053da:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 80053dc:	422a      	tst	r2, r5
 80053de:	d100      	bne.n	80053e2 <HAL_GPIO_Init+0x22>
 80053e0:	e08e      	b.n	8005500 <HAL_GPIO_Init+0x140>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053e2:	684a      	ldr	r2, [r1, #4]
 80053e4:	005e      	lsls	r6, r3, #1
 80053e6:	4694      	mov	ip, r2
 80053e8:	2203      	movs	r2, #3
 80053ea:	4664      	mov	r4, ip
 80053ec:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80053ee:	2403      	movs	r4, #3
 80053f0:	40b4      	lsls	r4, r6
 80053f2:	43e4      	mvns	r4, r4
 80053f4:	9402      	str	r4, [sp, #8]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053f6:	1e54      	subs	r4, r2, #1
 80053f8:	2c01      	cmp	r4, #1
 80053fa:	d82a      	bhi.n	8005452 <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 80053fc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80053fe:	9c02      	ldr	r4, [sp, #8]
 8005400:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005402:	68cc      	ldr	r4, [r1, #12]
 8005404:	40b4      	lsls	r4, r6
 8005406:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8005408:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800540a:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800540c:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800540e:	43ac      	bics	r4, r5
 8005410:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005412:	4664      	mov	r4, ip
 8005414:	0924      	lsrs	r4, r4, #4
 8005416:	403c      	ands	r4, r7
 8005418:	409c      	lsls	r4, r3
 800541a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800541c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800541e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005420:	9c02      	ldr	r4, [sp, #8]
 8005422:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005424:	688c      	ldr	r4, [r1, #8]
 8005426:	40b4      	lsls	r4, r6
 8005428:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800542a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800542c:	2a02      	cmp	r2, #2
 800542e:	d112      	bne.n	8005456 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8005430:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005432:	2507      	movs	r5, #7
 8005434:	00a4      	lsls	r4, r4, #2
 8005436:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8005438:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800543a:	9403      	str	r4, [sp, #12]
 800543c:	240f      	movs	r4, #15
 800543e:	401d      	ands	r5, r3
 8005440:	00ad      	lsls	r5, r5, #2
 8005442:	40ac      	lsls	r4, r5
 8005444:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005446:	690c      	ldr	r4, [r1, #16]
 8005448:	40ac      	lsls	r4, r5
 800544a:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 800544c:	9c03      	ldr	r4, [sp, #12]
 800544e:	6227      	str	r7, [r4, #32]
 8005450:	e001      	b.n	8005456 <HAL_GPIO_Init+0x96>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005452:	2a03      	cmp	r2, #3
 8005454:	d1e3      	bne.n	800541e <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8005456:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005458:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800545a:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800545c:	4025      	ands	r5, r4
 800545e:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005460:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8005462:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005464:	24c0      	movs	r4, #192	; 0xc0
 8005466:	4662      	mov	r2, ip
 8005468:	02a4      	lsls	r4, r4, #10
 800546a:	4222      	tst	r2, r4
 800546c:	d048      	beq.n	8005500 <HAL_GPIO_Init+0x140>
        temp = EXTI->EXTICR[position >> 2u];
 800546e:	4a25      	ldr	r2, [pc, #148]	; (8005504 <HAL_GPIO_Init+0x144>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005470:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8005472:	089c      	lsrs	r4, r3, #2
 8005474:	00a4      	lsls	r4, r4, #2
 8005476:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005478:	220f      	movs	r2, #15
 800547a:	401d      	ands	r5, r3
 800547c:	00ed      	lsls	r5, r5, #3
 800547e:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005480:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8005482:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005484:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005486:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005488:	2200      	movs	r2, #0
 800548a:	42b8      	cmp	r0, r7
 800548c:	d00c      	beq.n	80054a8 <HAL_GPIO_Init+0xe8>
 800548e:	4f1e      	ldr	r7, [pc, #120]	; (8005508 <HAL_GPIO_Init+0x148>)
 8005490:	3201      	adds	r2, #1
 8005492:	42b8      	cmp	r0, r7
 8005494:	d008      	beq.n	80054a8 <HAL_GPIO_Init+0xe8>
 8005496:	4f1d      	ldr	r7, [pc, #116]	; (800550c <HAL_GPIO_Init+0x14c>)
 8005498:	3201      	adds	r2, #1
 800549a:	42b8      	cmp	r0, r7
 800549c:	d004      	beq.n	80054a8 <HAL_GPIO_Init+0xe8>
 800549e:	4f1c      	ldr	r7, [pc, #112]	; (8005510 <HAL_GPIO_Init+0x150>)
 80054a0:	3201      	adds	r2, #1
 80054a2:	42b8      	cmp	r0, r7
 80054a4:	d000      	beq.n	80054a8 <HAL_GPIO_Init+0xe8>
 80054a6:	3202      	adds	r2, #2
 80054a8:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054aa:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80054ac:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 80054ae:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->RTSR1;
 80054b0:	4c14      	ldr	r4, [pc, #80]	; (8005504 <HAL_GPIO_Init+0x144>)
        temp &= ~(iocurrent);
 80054b2:	9a01      	ldr	r2, [sp, #4]
        temp = EXTI->RTSR1;
 80054b4:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 80054b6:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 80054b8:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 80054ba:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054bc:	02ff      	lsls	r7, r7, #11
 80054be:	d401      	bmi.n	80054c4 <HAL_GPIO_Init+0x104>
        temp &= ~(iocurrent);
 80054c0:	0035      	movs	r5, r6
 80054c2:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054c4:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 80054c6:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80054c8:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 80054ca:	9d01      	ldr	r5, [sp, #4]
 80054cc:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054ce:	02bf      	lsls	r7, r7, #10
 80054d0:	d401      	bmi.n	80054d6 <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 80054d2:	0035      	movs	r5, r6
 80054d4:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054d6:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 80054d8:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 80054da:	4c0e      	ldr	r4, [pc, #56]	; (8005514 <HAL_GPIO_Init+0x154>)
          temp |= iocurrent;
 80054dc:	9d01      	ldr	r5, [sp, #4]
        temp = EXTI->EMR1;
 80054de:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
          temp |= iocurrent;
 80054e0:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054e2:	03bf      	lsls	r7, r7, #14
 80054e4:	d401      	bmi.n	80054ea <HAL_GPIO_Init+0x12a>
        temp &= ~(iocurrent);
 80054e6:	0035      	movs	r5, r6
 80054e8:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054ea:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 80054ec:	67e5      	str	r5, [r4, #124]	; 0x7c
        temp = EXTI->IMR1;
 80054ee:	4c0a      	ldr	r4, [pc, #40]	; (8005518 <HAL_GPIO_Init+0x158>)
          temp |= iocurrent;
 80054f0:	9e01      	ldr	r6, [sp, #4]
        temp = EXTI->IMR1;
 80054f2:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
          temp |= iocurrent;
 80054f4:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054f6:	03ff      	lsls	r7, r7, #15
 80054f8:	d401      	bmi.n	80054fe <HAL_GPIO_Init+0x13e>
        temp &= ~(iocurrent);
 80054fa:	4015      	ands	r5, r2
 80054fc:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 80054fe:	67e6      	str	r6, [r4, #124]	; 0x7c
    position++;
 8005500:	3301      	adds	r3, #1
 8005502:	e760      	b.n	80053c6 <HAL_GPIO_Init+0x6>
 8005504:	40021800 	.word	0x40021800
 8005508:	50000400 	.word	0x50000400
 800550c:	50000800 	.word	0x50000800
 8005510:	50000c00 	.word	0x50000c00
 8005514:	40021808 	.word	0x40021808
 8005518:	40021804 	.word	0x40021804

0800551c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800551c:	6900      	ldr	r0, [r0, #16]
 800551e:	4008      	ands	r0, r1
 8005520:	1e43      	subs	r3, r0, #1
 8005522:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8005524:	b2c0      	uxtb	r0, r0
}
 8005526:	4770      	bx	lr

08005528 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005528:	4770      	bx	lr

0800552a <HAL_GPIO_EXTI_Falling_Callback>:
 800552a:	4770      	bx	lr

0800552c <HAL_GPIO_EXTI_IRQHandler>:
{
 800552c:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800552e:	4d08      	ldr	r5, [pc, #32]	; (8005550 <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 8005530:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005532:	68eb      	ldr	r3, [r5, #12]
 8005534:	4218      	tst	r0, r3
 8005536:	d002      	beq.n	800553e <HAL_GPIO_EXTI_IRQHandler+0x12>
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005538:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800553a:	f7ff fff5 	bl	8005528 <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800553e:	692b      	ldr	r3, [r5, #16]
 8005540:	4223      	tst	r3, r4
 8005542:	d003      	beq.n	800554c <HAL_GPIO_EXTI_IRQHandler+0x20>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005544:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005546:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005548:	f7ff ffef 	bl	800552a <HAL_GPIO_EXTI_Falling_Callback>
}
 800554c:	bd70      	pop	{r4, r5, r6, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	40021800 	.word	0x40021800

08005554 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005554:	6803      	ldr	r3, [r0, #0]
 8005556:	699a      	ldr	r2, [r3, #24]
 8005558:	0792      	lsls	r2, r2, #30
 800555a:	d501      	bpl.n	8005560 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800555c:	2200      	movs	r2, #0
 800555e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005560:	2201      	movs	r2, #1
 8005562:	6999      	ldr	r1, [r3, #24]
 8005564:	4211      	tst	r1, r2
 8005566:	d102      	bne.n	800556e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005568:	6999      	ldr	r1, [r3, #24]
 800556a:	430a      	orrs	r2, r1
 800556c:	619a      	str	r2, [r3, #24]
  }
}
 800556e:	4770      	bx	lr

08005570 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005570:	b530      	push	{r4, r5, lr}
 8005572:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005574:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005576:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005578:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800557a:	0589      	lsls	r1, r1, #22
 800557c:	431a      	orrs	r2, r3
 800557e:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <I2C_TransferConfig+0x28>)
 8005582:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005584:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005586:	0d64      	lsrs	r4, r4, #21
 8005588:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800558a:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800558c:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800558e:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005590:	432a      	orrs	r2, r5
 8005592:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005594:	bd30      	pop	{r4, r5, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	03ff63ff 	.word	0x03ff63ff

0800559c <I2C_IsErrorOccurred>:
{
 800559c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800559e:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80055a0:	6802      	ldr	r2, [r0, #0]
{
 80055a2:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 80055a4:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055a6:	2310      	movs	r3, #16
 80055a8:	000f      	movs	r7, r1
{
 80055aa:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055ac:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 80055ae:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055b0:	4219      	tst	r1, r3
 80055b2:	d00e      	beq.n	80055d2 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055b4:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055b6:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 80055b8:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ba:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	699a      	ldr	r2, [r3, #24]
 80055c0:	423a      	tst	r2, r7
 80055c2:	d164      	bne.n	800568e <I2C_IsErrorOccurred+0xf2>
 80055c4:	9a01      	ldr	r2, [sp, #4]
 80055c6:	2a00      	cmp	r2, #0
 80055c8:	d032      	beq.n	8005630 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 80055ca:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80055cc:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80055ce:	9b00      	ldr	r3, [sp, #0]
 80055d0:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055d2:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 80055d4:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055d6:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 80055d8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055da:	420a      	tst	r2, r1
 80055dc:	d002      	beq.n	80055e4 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 80055de:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055e0:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80055e2:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055e4:	2180      	movs	r1, #128	; 0x80
 80055e6:	00c9      	lsls	r1, r1, #3
 80055e8:	420a      	tst	r2, r1
 80055ea:	d003      	beq.n	80055f4 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 80055ec:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055ee:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80055f0:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 80055f2:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055f4:	2180      	movs	r1, #128	; 0x80
 80055f6:	0089      	lsls	r1, r1, #2
 80055f8:	420a      	tst	r2, r1
 80055fa:	d04d      	beq.n	8005698 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 80055fc:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055fe:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8005600:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 8005602:	0020      	movs	r0, r4
 8005604:	f7ff ffa6 	bl	8005554 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005608:	6822      	ldr	r2, [r4, #0]
 800560a:	4925      	ldr	r1, [pc, #148]	; (80056a0 <I2C_IsErrorOccurred+0x104>)
 800560c:	6853      	ldr	r3, [r2, #4]
 800560e:	400b      	ands	r3, r1
 8005610:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005612:	0023      	movs	r3, r4
 8005614:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8005616:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005618:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 800561a:	4307      	orrs	r7, r0
 800561c:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800561e:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005620:	0022      	movs	r2, r4
 8005622:	2300      	movs	r3, #0
 8005624:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8005626:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005628:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800562a:	2001      	movs	r0, #1
 800562c:	7023      	strb	r3, [r4, #0]
 800562e:	e035      	b.n	800569c <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8005630:	1c72      	adds	r2, r6, #1
 8005632:	d0c4      	beq.n	80055be <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005634:	f7ff fd62 	bl	80050fc <HAL_GetTick>
 8005638:	1b40      	subs	r0, r0, r5
 800563a:	42b0      	cmp	r0, r6
 800563c:	d801      	bhi.n	8005642 <I2C_IsErrorOccurred+0xa6>
 800563e:	2e00      	cmp	r6, #0
 8005640:	d1bc      	bne.n	80055bc <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8005642:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005644:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8005646:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005648:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800564a:	7811      	ldrb	r1, [r2, #0]
 800564c:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800564e:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8005650:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005652:	699a      	ldr	r2, [r3, #24]
 8005654:	0209      	lsls	r1, r1, #8
 8005656:	420a      	tst	r2, r1
 8005658:	d00c      	beq.n	8005674 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800565a:	2280      	movs	r2, #128	; 0x80
 800565c:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800565e:	4210      	tst	r0, r2
 8005660:	d108      	bne.n	8005674 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 8005662:	4661      	mov	r1, ip
 8005664:	2920      	cmp	r1, #32
 8005666:	d005      	beq.n	8005674 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005668:	6859      	ldr	r1, [r3, #4]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800566e:	f7ff fd45 	bl	80050fc <HAL_GetTick>
 8005672:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	423b      	tst	r3, r7
 800567a:	d19f      	bne.n	80055bc <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800567c:	f7ff fd3e 	bl	80050fc <HAL_GetTick>
 8005680:	1b40      	subs	r0, r0, r5
 8005682:	2819      	cmp	r0, #25
 8005684:	d9f6      	bls.n	8005674 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005688:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 800568a:	9301      	str	r3, [sp, #4]
 800568c:	e796      	b.n	80055bc <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 800568e:	9a01      	ldr	r2, [sp, #4]
 8005690:	2a00      	cmp	r2, #0
 8005692:	d19a      	bne.n	80055ca <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005694:	61df      	str	r7, [r3, #28]
 8005696:	e798      	b.n	80055ca <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8005698:	2800      	cmp	r0, #0
 800569a:	d1b2      	bne.n	8005602 <I2C_IsErrorOccurred+0x66>
}
 800569c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	fe00e800 	.word	0xfe00e800

080056a4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a6:	0004      	movs	r4, r0
 80056a8:	000d      	movs	r5, r1
 80056aa:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056ac:	2702      	movs	r7, #2
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	423b      	tst	r3, r7
 80056b4:	d001      	beq.n	80056ba <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80056b6:	2000      	movs	r0, #0
}
 80056b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ba:	0032      	movs	r2, r6
 80056bc:	0029      	movs	r1, r5
 80056be:	0020      	movs	r0, r4
 80056c0:	f7ff ff6c 	bl	800559c <I2C_IsErrorOccurred>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d118      	bne.n	80056fa <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80056c8:	1c6b      	adds	r3, r5, #1
 80056ca:	d0f0      	beq.n	80056ae <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056cc:	f7ff fd16 	bl	80050fc <HAL_GetTick>
 80056d0:	1b80      	subs	r0, r0, r6
 80056d2:	42a8      	cmp	r0, r5
 80056d4:	d801      	bhi.n	80056da <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	d1e9      	bne.n	80056ae <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	001a      	movs	r2, r3
 80056e0:	403a      	ands	r2, r7
 80056e2:	423b      	tst	r3, r7
 80056e4:	d1e3      	bne.n	80056ae <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056e6:	2120      	movs	r1, #32
 80056e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056ea:	430b      	orrs	r3, r1
 80056ec:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056ee:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80056f0:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80056f2:	3341      	adds	r3, #65	; 0x41
 80056f4:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f6:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80056f8:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80056fa:	2001      	movs	r0, #1
 80056fc:	e7dc      	b.n	80056b8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080056fe <I2C_WaitOnFlagUntilTimeout>:
{
 80056fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005700:	0004      	movs	r4, r0
 8005702:	000d      	movs	r5, r1
 8005704:	0017      	movs	r7, r2
 8005706:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	402b      	ands	r3, r5
 800570e:	1b5b      	subs	r3, r3, r5
 8005710:	425a      	negs	r2, r3
 8005712:	4153      	adcs	r3, r2
 8005714:	42bb      	cmp	r3, r7
 8005716:	d001      	beq.n	800571c <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8005718:	2000      	movs	r0, #0
}
 800571a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800571c:	0031      	movs	r1, r6
 800571e:	0020      	movs	r0, r4
 8005720:	9a06      	ldr	r2, [sp, #24]
 8005722:	f7ff ff3b 	bl	800559c <I2C_IsErrorOccurred>
 8005726:	2800      	cmp	r0, #0
 8005728:	d11e      	bne.n	8005768 <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800572a:	1c73      	adds	r3, r6, #1
 800572c:	d0ec      	beq.n	8005708 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572e:	f7ff fce5 	bl	80050fc <HAL_GetTick>
 8005732:	9b06      	ldr	r3, [sp, #24]
 8005734:	1ac0      	subs	r0, r0, r3
 8005736:	42b0      	cmp	r0, r6
 8005738:	d801      	bhi.n	800573e <I2C_WaitOnFlagUntilTimeout+0x40>
 800573a:	2e00      	cmp	r6, #0
 800573c:	d1e4      	bne.n	8005708 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	402b      	ands	r3, r5
 8005744:	1b5b      	subs	r3, r3, r5
 8005746:	425a      	negs	r2, r3
 8005748:	4153      	adcs	r3, r2
 800574a:	42bb      	cmp	r3, r7
 800574c:	d1dc      	bne.n	8005708 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800574e:	2220      	movs	r2, #32
 8005750:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005752:	4313      	orrs	r3, r2
 8005754:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005756:	0023      	movs	r3, r4
 8005758:	3341      	adds	r3, #65	; 0x41
 800575a:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800575c:	0022      	movs	r2, r4
 800575e:	2300      	movs	r3, #0
 8005760:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8005762:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005764:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8005766:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8005768:	2001      	movs	r0, #1
 800576a:	e7d6      	b.n	800571a <I2C_WaitOnFlagUntilTimeout+0x1c>

0800576c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	0004      	movs	r4, r0
 8005770:	000e      	movs	r6, r1
 8005772:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005774:	2520      	movs	r5, #32
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	422b      	tst	r3, r5
 800577c:	d001      	beq.n	8005782 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800577e:	2000      	movs	r0, #0
}
 8005780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005782:	003a      	movs	r2, r7
 8005784:	0031      	movs	r1, r6
 8005786:	0020      	movs	r0, r4
 8005788:	f7ff ff08 	bl	800559c <I2C_IsErrorOccurred>
 800578c:	2800      	cmp	r0, #0
 800578e:	d115      	bne.n	80057bc <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005790:	f7ff fcb4 	bl	80050fc <HAL_GetTick>
 8005794:	1bc0      	subs	r0, r0, r7
 8005796:	42b0      	cmp	r0, r6
 8005798:	d801      	bhi.n	800579e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800579a:	2e00      	cmp	r6, #0
 800579c:	d1eb      	bne.n	8005776 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	001a      	movs	r2, r3
 80057a4:	402a      	ands	r2, r5
 80057a6:	422b      	tst	r3, r5
 80057a8:	d1e5      	bne.n	8005776 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80057ac:	432b      	orrs	r3, r5
 80057ae:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057b0:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 80057b2:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80057b4:	3341      	adds	r3, #65	; 0x41
 80057b6:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b8:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 80057ba:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80057bc:	2001      	movs	r0, #1
 80057be:	e7df      	b.n	8005780 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080057c0 <HAL_I2C_Init>:
{
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80057c4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80057c6:	2c00      	cmp	r4, #0
 80057c8:	d04f      	beq.n	800586a <HAL_I2C_Init+0xaa>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057ca:	0025      	movs	r5, r4
 80057cc:	3541      	adds	r5, #65	; 0x41
 80057ce:	782b      	ldrb	r3, [r5, #0]
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d105      	bne.n	80057e2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80057d6:	0023      	movs	r3, r4
 80057d8:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 80057da:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80057dc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80057de:	f7ff fa47 	bl	8004c70 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80057e2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80057e4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80057e6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80057e8:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057ea:	4820      	ldr	r0, [pc, #128]	; (800586c <HAL_I2C_Init+0xac>)
  __HAL_I2C_DISABLE(hi2c);
 80057ec:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057ee:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80057f0:	438a      	bics	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057f4:	6861      	ldr	r1, [r4, #4]
 80057f6:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <HAL_I2C_Init+0xb0>)
 80057f8:	400a      	ands	r2, r1
 80057fa:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057fc:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057fe:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005800:	4002      	ands	r2, r0
 8005802:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005804:	2901      	cmp	r1, #1
 8005806:	d108      	bne.n	800581a <HAL_I2C_Init+0x5a>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	0212      	lsls	r2, r2, #8
 800580c:	4332      	orrs	r2, r6
 800580e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005810:	6859      	ldr	r1, [r3, #4]
 8005812:	4a18      	ldr	r2, [pc, #96]	; (8005874 <HAL_I2C_Init+0xb4>)
 8005814:	4011      	ands	r1, r2
 8005816:	6059      	str	r1, [r3, #4]
 8005818:	e00a      	b.n	8005830 <HAL_I2C_Init+0x70>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800581a:	2284      	movs	r2, #132	; 0x84
 800581c:	0212      	lsls	r2, r2, #8
 800581e:	4332      	orrs	r2, r6
 8005820:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005822:	2902      	cmp	r1, #2
 8005824:	d1f4      	bne.n	8005810 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005826:	2280      	movs	r2, #128	; 0x80
 8005828:	6859      	ldr	r1, [r3, #4]
 800582a:	0112      	lsls	r2, r2, #4
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	4911      	ldr	r1, [pc, #68]	; (8005878 <HAL_I2C_Init+0xb8>)
 8005834:	4311      	orrs	r1, r2
 8005836:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005838:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800583a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800583c:	4002      	ands	r2, r0
 800583e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005840:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005842:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005844:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005846:	69a1      	ldr	r1, [r4, #24]
 8005848:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800584a:	430a      	orrs	r2, r1
 800584c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800584e:	6a21      	ldr	r1, [r4, #32]
 8005850:	69e2      	ldr	r2, [r4, #28]
 8005852:	430a      	orrs	r2, r1
 8005854:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005856:	2201      	movs	r2, #1
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800585e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005860:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005862:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005864:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005866:	3442      	adds	r4, #66	; 0x42
 8005868:	7020      	strb	r0, [r4, #0]
}
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	ffff7fff 	.word	0xffff7fff
 8005870:	f0ffffff 	.word	0xf0ffffff
 8005874:	fffff7ff 	.word	0xfffff7ff
 8005878:	02008000 	.word	0x02008000

0800587c <HAL_I2C_Master_Transmit>:
{
 800587c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800587e:	b087      	sub	sp, #28
 8005880:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005882:	0003      	movs	r3, r0
 8005884:	3341      	adds	r3, #65	; 0x41
{
 8005886:	9203      	str	r2, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005888:	9304      	str	r3, [sp, #16]
 800588a:	781b      	ldrb	r3, [r3, #0]
{
 800588c:	0004      	movs	r4, r0
 800588e:	000d      	movs	r5, r1
    return HAL_BUSY;
 8005890:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005892:	2b20      	cmp	r3, #32
 8005894:	d114      	bne.n	80058c0 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8005896:	0023      	movs	r3, r4
 8005898:	3340      	adds	r3, #64	; 0x40
 800589a:	781a      	ldrb	r2, [r3, #0]
 800589c:	2a01      	cmp	r2, #1
 800589e:	d00f      	beq.n	80058c0 <HAL_I2C_Master_Transmit+0x44>
 80058a0:	2601      	movs	r6, #1
 80058a2:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80058a4:	f7ff fc2a 	bl	80050fc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058a8:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80058aa:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058ac:	9000      	str	r0, [sp, #0]
 80058ae:	2319      	movs	r3, #25
 80058b0:	0032      	movs	r2, r6
 80058b2:	0020      	movs	r0, r4
 80058b4:	0209      	lsls	r1, r1, #8
 80058b6:	f7ff ff22 	bl	80056fe <I2C_WaitOnFlagUntilTimeout>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 80058be:	2001      	movs	r0, #1
}
 80058c0:	b007      	add	sp, #28
 80058c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058c4:	2321      	movs	r3, #33	; 0x21
 80058c6:	9a04      	ldr	r2, [sp, #16]
 80058c8:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80058ca:	0023      	movs	r3, r4
 80058cc:	2210      	movs	r2, #16
 80058ce:	3342      	adds	r3, #66	; 0x42
 80058d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr  = pData;
 80058d2:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80058d6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80058d8:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80058da:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80058dc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058e0:	2bff      	cmp	r3, #255	; 0xff
 80058e2:	d836      	bhi.n	8005952 <HAL_I2C_Master_Transmit+0xd6>
      xfermode = I2C_AUTOEND_MODE;
 80058e4:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 80058e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 80058e8:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 80058ea:	b292      	uxth	r2, r2
      xfermode = I2C_AUTOEND_MODE;
 80058ec:	4935      	ldr	r1, [pc, #212]	; (80059c4 <HAL_I2C_Master_Transmit+0x148>)
 80058ee:	8522      	strh	r2, [r4, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 80058f0:	2a00      	cmp	r2, #0
 80058f2:	d00f      	beq.n	8005914 <HAL_I2C_Master_Transmit+0x98>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058f4:	9e03      	ldr	r6, [sp, #12]
 80058f6:	6820      	ldr	r0, [r4, #0]
 80058f8:	7836      	ldrb	r6, [r6, #0]
      hi2c->XferSize--;
 80058fa:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058fc:	6286      	str	r6, [r0, #40]	; 0x28
      hi2c->pBuffPtr++;
 80058fe:	9803      	ldr	r0, [sp, #12]
      hi2c->XferSize--;
 8005900:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8005902:	3001      	adds	r0, #1
 8005904:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005906:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005908:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800590a:	3801      	subs	r0, #1
 800590c:	b280      	uxth	r0, r0
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800590e:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8005910:	8560      	strh	r0, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005912:	b2d2      	uxtb	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005914:	9100      	str	r1, [sp, #0]
 8005916:	0020      	movs	r0, r4
 8005918:	0029      	movs	r1, r5
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800591a:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800591c:	f7ff fe28 	bl	8005570 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005920:	04b6      	lsls	r6, r6, #18
    while (hi2c->XferCount > 0U)
 8005922:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005924:	003a      	movs	r2, r7
 8005926:	0020      	movs	r0, r4
 8005928:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 800592a:	2b00      	cmp	r3, #0
 800592c:	d115      	bne.n	800595a <HAL_I2C_Master_Transmit+0xde>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592e:	f7ff ff1d 	bl	800576c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005932:	2800      	cmp	r0, #0
 8005934:	d1c3      	bne.n	80058be <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005936:	2120      	movs	r1, #32
 8005938:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800593a:	4d23      	ldr	r5, [pc, #140]	; (80059c8 <HAL_I2C_Master_Transmit+0x14c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800593c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	402a      	ands	r2, r5
 8005942:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005944:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8005946:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8005948:	3341      	adds	r3, #65	; 0x41
 800594a:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800594c:	7058      	strb	r0, [r3, #1]
    __HAL_UNLOCK(hi2c);
 800594e:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8005950:	e7b6      	b.n	80058c0 <HAL_I2C_Master_Transmit+0x44>
      xfermode = I2C_RELOAD_MODE;
 8005952:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005954:	22ff      	movs	r2, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8005956:	045b      	lsls	r3, r3, #17
 8005958:	e7c8      	b.n	80058ec <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800595a:	f7ff fea3 	bl	80056a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800595e:	2800      	cmp	r0, #0
 8005960:	d1ad      	bne.n	80058be <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005964:	6822      	ldr	r2, [r4, #0]
 8005966:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8005968:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800596a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800596c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800596e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005970:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005972:	3b01      	subs	r3, #1
 8005974:	b29b      	uxth	r3, r3
 8005976:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005978:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800597a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800597c:	b292      	uxth	r2, r2
 800597e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0ce      	beq.n	8005922 <HAL_I2C_Master_Transmit+0xa6>
 8005984:	2a00      	cmp	r2, #0
 8005986:	d1cc      	bne.n	8005922 <HAL_I2C_Master_Transmit+0xa6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005988:	2180      	movs	r1, #128	; 0x80
 800598a:	0020      	movs	r0, r4
 800598c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800598e:	9700      	str	r7, [sp, #0]
 8005990:	f7ff feb5 	bl	80056fe <I2C_WaitOnFlagUntilTimeout>
 8005994:	2800      	cmp	r0, #0
 8005996:	d000      	beq.n	800599a <HAL_I2C_Master_Transmit+0x11e>
 8005998:	e791      	b.n	80058be <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800599a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800599c:	2bff      	cmp	r3, #255	; 0xff
 800599e:	d90a      	bls.n	80059b6 <HAL_I2C_Master_Transmit+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059a0:	23ff      	movs	r3, #255	; 0xff
 80059a2:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	22ff      	movs	r2, #255	; 0xff
 80059a8:	9000      	str	r0, [sp, #0]
 80059aa:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059ac:	0029      	movs	r1, r5
 80059ae:	0020      	movs	r0, r4
 80059b0:	f7ff fdde 	bl	8005570 <I2C_TransferConfig>
 80059b4:	e7b5      	b.n	8005922 <HAL_I2C_Master_Transmit+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80059b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059b8:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 80059ba:	b292      	uxth	r2, r2
 80059bc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	9000      	str	r0, [sp, #0]
 80059c2:	e7f3      	b.n	80059ac <HAL_I2C_Master_Transmit+0x130>
 80059c4:	80002000 	.word	0x80002000
 80059c8:	fe00e800 	.word	0xfe00e800

080059cc <HAL_I2C_Mem_Write>:
{
 80059cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ce:	b089      	sub	sp, #36	; 0x24
 80059d0:	9304      	str	r3, [sp, #16]
 80059d2:	ab0e      	add	r3, sp, #56	; 0x38
 80059d4:	9203      	str	r2, [sp, #12]
 80059d6:	cb04      	ldmia	r3!, {r2}
 80059d8:	0004      	movs	r4, r0
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	9205      	str	r2, [sp, #20]
 80059de:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e0:	0003      	movs	r3, r0
 80059e2:	3341      	adds	r3, #65	; 0x41
 80059e4:	9307      	str	r3, [sp, #28]
 80059e6:	781b      	ldrb	r3, [r3, #0]
{
 80059e8:	000f      	movs	r7, r1
    return HAL_BUSY;
 80059ea:	2002      	movs	r0, #2
{
 80059ec:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	d108      	bne.n	8005a04 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 80059f2:	2a00      	cmp	r2, #0
 80059f4:	d002      	beq.n	80059fc <HAL_I2C_Mem_Write+0x30>
 80059f6:	9b06      	ldr	r3, [sp, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005a02:	2001      	movs	r0, #1
}
 8005a04:	b009      	add	sp, #36	; 0x24
 8005a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8005a08:	0023      	movs	r3, r4
 8005a0a:	3340      	adds	r3, #64	; 0x40
 8005a0c:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8005a0e:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8005a10:	2a01      	cmp	r2, #1
 8005a12:	d0f7      	beq.n	8005a04 <HAL_I2C_Mem_Write+0x38>
 8005a14:	2201      	movs	r2, #1
 8005a16:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005a18:	f7ff fb70 	bl	80050fc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a1c:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8005a1e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a20:	9000      	str	r0, [sp, #0]
 8005a22:	2319      	movs	r3, #25
 8005a24:	2201      	movs	r2, #1
 8005a26:	0020      	movs	r0, r4
 8005a28:	0209      	lsls	r1, r1, #8
 8005a2a:	f7ff fe68 	bl	80056fe <I2C_WaitOnFlagUntilTimeout>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d1e7      	bne.n	8005a02 <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a32:	2321      	movs	r3, #33	; 0x21
 8005a34:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a36:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a38:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a3a:	0023      	movs	r3, r4
 8005a3c:	3342      	adds	r3, #66	; 0x42
 8005a3e:	9307      	str	r3, [sp, #28]
 8005a40:	2340      	movs	r3, #64	; 0x40
 8005a42:	9a07      	ldr	r2, [sp, #28]
 8005a44:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8005a46:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a48:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005a4a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a4c:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8005a4e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8005a50:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a52:	466b      	mov	r3, sp
 8005a54:	7c1a      	ldrb	r2, [r3, #16]
 8005a56:	4b4a      	ldr	r3, [pc, #296]	; (8005b80 <HAL_I2C_Mem_Write+0x1b4>)
 8005a58:	0020      	movs	r0, r4
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	2380      	movs	r3, #128	; 0x80
 8005a5e:	045b      	lsls	r3, r3, #17
 8005a60:	f7ff fd86 	bl	8005570 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a64:	002a      	movs	r2, r5
 8005a66:	0031      	movs	r1, r6
 8005a68:	0020      	movs	r0, r4
 8005a6a:	f7ff fe1b 	bl	80056a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d126      	bne.n	8005ac0 <HAL_I2C_Mem_Write+0xf4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a72:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a74:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a76:	2a01      	cmp	r2, #1
 8005a78:	d116      	bne.n	8005aa8 <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a7a:	466a      	mov	r2, sp
 8005a7c:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a7e:	2180      	movs	r1, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a80:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a82:	0020      	movs	r0, r4
 8005a84:	0033      	movs	r3, r6
 8005a86:	2200      	movs	r2, #0
 8005a88:	9500      	str	r5, [sp, #0]
 8005a8a:	f7ff fe38 	bl	80056fe <I2C_WaitOnFlagUntilTimeout>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d116      	bne.n	8005ac0 <HAL_I2C_Mem_Write+0xf4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a94:	2bff      	cmp	r3, #255	; 0xff
 8005a96:	d817      	bhi.n	8005ac8 <HAL_I2C_Mem_Write+0xfc>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a98:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8005a9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a9c:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8005a9e:	b292      	uxth	r2, r2
 8005aa0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	9000      	str	r0, [sp, #0]
 8005aa6:	e014      	b.n	8005ad2 <HAL_I2C_Mem_Write+0x106>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005aa8:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aaa:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005aac:	0a12      	lsrs	r2, r2, #8
 8005aae:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ab0:	0020      	movs	r0, r4
 8005ab2:	002a      	movs	r2, r5
 8005ab4:	f7ff fdf6 	bl	80056a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	e7dc      	b.n	8005a7a <HAL_I2C_Mem_Write+0xae>
      __HAL_UNLOCK(hi2c);
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	3440      	adds	r4, #64	; 0x40
 8005ac4:	7023      	strb	r3, [r4, #0]
 8005ac6:	e79c      	b.n	8005a02 <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ac8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005aca:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005acc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ace:	045b      	lsls	r3, r3, #17
 8005ad0:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ad2:	0039      	movs	r1, r7
 8005ad4:	0020      	movs	r0, r4
 8005ad6:	f7ff fd4b 	bl	8005570 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ada:	002a      	movs	r2, r5
 8005adc:	0031      	movs	r1, r6
 8005ade:	0020      	movs	r0, r4
 8005ae0:	f7ff fde0 	bl	80056a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d000      	beq.n	8005aea <HAL_I2C_Mem_Write+0x11e>
 8005ae8:	e78b      	b.n	8005a02 <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aec:	6822      	ldr	r2, [r4, #0]
 8005aee:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8005af0:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005af2:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005af4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005af6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005af8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b00:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b04:	b292      	uxth	r2, r2
 8005b06:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d017      	beq.n	8005b3c <HAL_I2C_Mem_Write+0x170>
 8005b0c:	2a00      	cmp	r2, #0
 8005b0e:	d115      	bne.n	8005b3c <HAL_I2C_Mem_Write+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b10:	0033      	movs	r3, r6
 8005b12:	2180      	movs	r1, #128	; 0x80
 8005b14:	0020      	movs	r0, r4
 8005b16:	9500      	str	r5, [sp, #0]
 8005b18:	f7ff fdf1 	bl	80056fe <I2C_WaitOnFlagUntilTimeout>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d000      	beq.n	8005b22 <HAL_I2C_Mem_Write+0x156>
 8005b20:	e76f      	b.n	8005a02 <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b24:	2bff      	cmp	r3, #255	; 0xff
 8005b26:	d923      	bls.n	8005b70 <HAL_I2C_Mem_Write+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b28:	23ff      	movs	r3, #255	; 0xff
 8005b2a:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	22ff      	movs	r2, #255	; 0xff
 8005b30:	9000      	str	r0, [sp, #0]
 8005b32:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b34:	0039      	movs	r1, r7
 8005b36:	0020      	movs	r0, r4
 8005b38:	f7ff fd1a 	bl	8005570 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005b3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1cb      	bne.n	8005ada <HAL_I2C_Mem_Write+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b42:	002a      	movs	r2, r5
 8005b44:	0031      	movs	r1, r6
 8005b46:	0020      	movs	r0, r4
 8005b48:	f7ff fe10 	bl	800576c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d000      	beq.n	8005b52 <HAL_I2C_Mem_Write+0x186>
 8005b50:	e757      	b.n	8005a02 <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b52:	2120      	movs	r1, #32
 8005b54:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8005b56:	4d0b      	ldr	r5, [pc, #44]	; (8005b84 <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b58:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	402a      	ands	r2, r5
 8005b5e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b60:	0023      	movs	r3, r4
 8005b62:	3341      	adds	r3, #65	; 0x41
 8005b64:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b66:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8005b68:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b6a:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8005b6c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8005b6e:	e749      	b.n	8005a04 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b70:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8005b72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b74:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8005b76:	b292      	uxth	r2, r2
 8005b78:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	9000      	str	r0, [sp, #0]
 8005b7e:	e7d9      	b.n	8005b34 <HAL_I2C_Mem_Write+0x168>
 8005b80:	80002000 	.word	0x80002000
 8005b84:	fe00e800 	.word	0xfe00e800

08005b88 <HAL_I2C_Mem_Read>:
{
 8005b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b8a:	b089      	sub	sp, #36	; 0x24
 8005b8c:	9304      	str	r3, [sp, #16]
 8005b8e:	ab0e      	add	r3, sp, #56	; 0x38
 8005b90:	9203      	str	r2, [sp, #12]
 8005b92:	cb04      	ldmia	r3!, {r2}
 8005b94:	0004      	movs	r4, r0
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	9205      	str	r2, [sp, #20]
 8005b9a:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b9c:	0003      	movs	r3, r0
 8005b9e:	3341      	adds	r3, #65	; 0x41
 8005ba0:	9307      	str	r3, [sp, #28]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
{
 8005ba4:	000f      	movs	r7, r1
    return HAL_BUSY;
 8005ba6:	2002      	movs	r0, #2
{
 8005ba8:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d108      	bne.n	8005bc0 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_I2C_Mem_Read+0x30>
 8005bb2:	9b06      	ldr	r3, [sp, #24]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005bbe:	2001      	movs	r0, #1
}
 8005bc0:	b009      	add	sp, #36	; 0x24
 8005bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8005bc4:	0023      	movs	r3, r4
 8005bc6:	3340      	adds	r3, #64	; 0x40
 8005bc8:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8005bca:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8005bcc:	2a01      	cmp	r2, #1
 8005bce:	d0f7      	beq.n	8005bc0 <HAL_I2C_Mem_Read+0x38>
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005bd4:	f7ff fa92 	bl	80050fc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bd8:	2180      	movs	r1, #128	; 0x80
 8005bda:	2319      	movs	r3, #25
 8005bdc:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005bde:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005be0:	2201      	movs	r2, #1
 8005be2:	0020      	movs	r0, r4
 8005be4:	0209      	lsls	r1, r1, #8
 8005be6:	f7ff fd8a 	bl	80056fe <I2C_WaitOnFlagUntilTimeout>
 8005bea:	1e03      	subs	r3, r0, #0
 8005bec:	d1e7      	bne.n	8005bbe <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bee:	2222      	movs	r2, #34	; 0x22
 8005bf0:	9907      	ldr	r1, [sp, #28]
 8005bf2:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bf4:	0022      	movs	r2, r4
 8005bf6:	3242      	adds	r2, #66	; 0x42
 8005bf8:	9207      	str	r2, [sp, #28]
 8005bfa:	2240      	movs	r2, #64	; 0x40
 8005bfc:	9907      	ldr	r1, [sp, #28]
 8005bfe:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8005c00:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c02:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005c04:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c06:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c08:	494d      	ldr	r1, [pc, #308]	; (8005d40 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 8005c0a:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c0c:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8005c0e:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c10:	7c12      	ldrb	r2, [r2, #16]
 8005c12:	0020      	movs	r0, r4
 8005c14:	9100      	str	r1, [sp, #0]
 8005c16:	0039      	movs	r1, r7
 8005c18:	f7ff fcaa 	bl	8005570 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1c:	002a      	movs	r2, r5
 8005c1e:	0031      	movs	r1, r6
 8005c20:	0020      	movs	r0, r4
 8005c22:	f7ff fd3f 	bl	80056a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d127      	bne.n	8005c7a <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c2a:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c2c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c2e:	2a01      	cmp	r2, #1
 8005c30:	d117      	bne.n	8005c62 <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c32:	466a      	mov	r2, sp
 8005c34:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c36:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c38:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c3a:	0020      	movs	r0, r4
 8005c3c:	0033      	movs	r3, r6
 8005c3e:	2200      	movs	r2, #0
 8005c40:	9500      	str	r5, [sp, #0]
 8005c42:	f7ff fd5c 	bl	80056fe <I2C_WaitOnFlagUntilTimeout>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d117      	bne.n	8005c7a <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c4a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005c4c:	4b3d      	ldr	r3, [pc, #244]	; (8005d44 <HAL_I2C_Mem_Read+0x1bc>)
 8005c4e:	2aff      	cmp	r2, #255	; 0xff
 8005c50:	d817      	bhi.n	8005c82 <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8005c52:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005c54:	b292      	uxth	r2, r2
 8005c56:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	2380      	movs	r3, #128	; 0x80
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	049b      	lsls	r3, r3, #18
 8005c60:	e014      	b.n	8005c8c <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c62:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c64:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c66:	0a12      	lsrs	r2, r2, #8
 8005c68:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6a:	0020      	movs	r0, r4
 8005c6c:	002a      	movs	r2, r5
 8005c6e:	f7ff fd19 	bl	80056a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	e7db      	b.n	8005c32 <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	3440      	adds	r4, #64	; 0x40
 8005c7e:	7023      	strb	r3, [r4, #0]
 8005c80:	e79d      	b.n	8005bbe <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c82:	22ff      	movs	r2, #255	; 0xff
 8005c84:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c8c:	0039      	movs	r1, r7
 8005c8e:	0020      	movs	r0, r4
 8005c90:	f7ff fc6e 	bl	8005570 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005c94:	0033      	movs	r3, r6
 8005c96:	2200      	movs	r2, #0
 8005c98:	2104      	movs	r1, #4
 8005c9a:	0020      	movs	r0, r4
 8005c9c:	9500      	str	r5, [sp, #0]
 8005c9e:	f7ff fd2e 	bl	80056fe <I2C_WaitOnFlagUntilTimeout>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d000      	beq.n	8005ca8 <HAL_I2C_Mem_Read+0x120>
 8005ca6:	e78a      	b.n	8005bbe <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8005cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005cb2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005cb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005cba:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005cc4:	b292      	uxth	r2, r2
 8005cc6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d017      	beq.n	8005cfc <HAL_I2C_Mem_Read+0x174>
 8005ccc:	2a00      	cmp	r2, #0
 8005cce:	d115      	bne.n	8005cfc <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cd0:	0033      	movs	r3, r6
 8005cd2:	2180      	movs	r1, #128	; 0x80
 8005cd4:	0020      	movs	r0, r4
 8005cd6:	9500      	str	r5, [sp, #0]
 8005cd8:	f7ff fd11 	bl	80056fe <I2C_WaitOnFlagUntilTimeout>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d000      	beq.n	8005ce2 <HAL_I2C_Mem_Read+0x15a>
 8005ce0:	e76d      	b.n	8005bbe <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ce2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ce4:	2bff      	cmp	r3, #255	; 0xff
 8005ce6:	d923      	bls.n	8005d30 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ce8:	23ff      	movs	r3, #255	; 0xff
 8005cea:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	22ff      	movs	r2, #255	; 0xff
 8005cf0:	9000      	str	r0, [sp, #0]
 8005cf2:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cf4:	0039      	movs	r1, r7
 8005cf6:	0020      	movs	r0, r4
 8005cf8:	f7ff fc3a 	bl	8005570 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005cfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1c8      	bne.n	8005c94 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d02:	002a      	movs	r2, r5
 8005d04:	0031      	movs	r1, r6
 8005d06:	0020      	movs	r0, r4
 8005d08:	f7ff fd30 	bl	800576c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d000      	beq.n	8005d12 <HAL_I2C_Mem_Read+0x18a>
 8005d10:	e755      	b.n	8005bbe <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d12:	2120      	movs	r1, #32
 8005d14:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8005d16:	4d0c      	ldr	r5, [pc, #48]	; (8005d48 <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d18:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	402a      	ands	r2, r5
 8005d1e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d20:	0023      	movs	r3, r4
 8005d22:	3341      	adds	r3, #65	; 0x41
 8005d24:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d26:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8005d28:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d2a:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8005d2c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8005d2e:	e747      	b.n	8005bc0 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d30:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8005d32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d34:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8005d36:	b292      	uxth	r2, r2
 8005d38:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	9000      	str	r0, [sp, #0]
 8005d3e:	e7d9      	b.n	8005cf4 <HAL_I2C_Mem_Read+0x16c>
 8005d40:	80002000 	.word	0x80002000
 8005d44:	80002400 	.word	0x80002400
 8005d48:	fe00e800 	.word	0xfe00e800

08005d4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d4e:	0004      	movs	r4, r0
 8005d50:	3441      	adds	r4, #65	; 0x41
 8005d52:	7822      	ldrb	r2, [r4, #0]
{
 8005d54:	0003      	movs	r3, r0
 8005d56:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005d58:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d5a:	b2d6      	uxtb	r6, r2
 8005d5c:	2a20      	cmp	r2, #32
 8005d5e:	d118      	bne.n	8005d92 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8005d60:	001d      	movs	r5, r3
 8005d62:	3540      	adds	r5, #64	; 0x40
 8005d64:	782a      	ldrb	r2, [r5, #0]
 8005d66:	2a01      	cmp	r2, #1
 8005d68:	d013      	beq.n	8005d92 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d6a:	2224      	movs	r2, #36	; 0x24
 8005d6c:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3a23      	subs	r2, #35	; 0x23
 8005d72:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d74:	4807      	ldr	r0, [pc, #28]	; (8005d94 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8005d76:	4391      	bics	r1, r2
 8005d78:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d7a:	6819      	ldr	r1, [r3, #0]
 8005d7c:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8005d7e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d80:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d82:	6819      	ldr	r1, [r3, #0]
 8005d84:	4339      	orrs	r1, r7
 8005d86:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8005d88:	6819      	ldr	r1, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d8e:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8005d90:	7028      	strb	r0, [r5, #0]
  }
}
 8005d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d94:	ffffefff 	.word	0xffffefff

08005d98 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d98:	0002      	movs	r2, r0
{
 8005d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9c:	3241      	adds	r2, #65	; 0x41
 8005d9e:	7814      	ldrb	r4, [r2, #0]
{
 8005da0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da2:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005da4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da6:	2c20      	cmp	r4, #32
 8005da8:	d117      	bne.n	8005dda <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8005daa:	001c      	movs	r4, r3
 8005dac:	3440      	adds	r4, #64	; 0x40
 8005dae:	7826      	ldrb	r6, [r4, #0]
 8005db0:	2e01      	cmp	r6, #1
 8005db2:	d012      	beq.n	8005dda <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005db4:	3022      	adds	r0, #34	; 0x22
 8005db6:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3823      	subs	r0, #35	; 0x23
 8005dbc:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8005dbe:	4f07      	ldr	r7, [pc, #28]	; (8005ddc <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8005dc0:	4386      	bics	r6, r0
 8005dc2:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8005dc4:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8005dc6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8005dc8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8005dca:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8005dcc:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	4308      	orrs	r0, r1
 8005dd2:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8005dd4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005dd6:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8005dd8:	7020      	strb	r0, [r4, #0]
  }
}
 8005dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ddc:	fffff0ff 	.word	0xfffff0ff

08005de0 <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator != PWR_MAINREGULATOR_ON)
 8005de0:	2380      	movs	r3, #128	; 0x80
 8005de2:	4a0f      	ldr	r2, [pc, #60]	; (8005e20 <HAL_PWR_EnterSLEEPMode+0x40>)
{
 8005de4:	b510      	push	{r4, lr}
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if ((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 8005de6:	6952      	ldr	r2, [r2, #20]
{
 8005de8:	000c      	movs	r4, r1
 8005dea:	009b      	lsls	r3, r3, #2
  if (Regulator != PWR_MAINREGULATOR_ON)
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d00c      	beq.n	8005e0a <HAL_PWR_EnterSLEEPMode+0x2a>
    if ((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 8005df0:	421a      	tst	r2, r3
 8005df2:	d101      	bne.n	8005df8 <HAL_PWR_EnterSLEEPMode+0x18>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005df4:	f000 f844 	bl	8005e80 <HAL_PWREx_EnableLowPowerRunMode>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005df8:	2104      	movs	r1, #4
 8005dfa:	4a0a      	ldr	r2, [pc, #40]	; (8005e24 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005dfc:	6913      	ldr	r3, [r2, #16]
 8005dfe:	438b      	bics	r3, r1
 8005e00:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005e02:	2c01      	cmp	r4, #1
 8005e04:	d108      	bne.n	8005e18 <HAL_PWR_EnterSLEEPMode+0x38>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005e06:	bf30      	wfi
 8005e08:	e005      	b.n	8005e16 <HAL_PWR_EnterSLEEPMode+0x36>
    if ((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 8005e0a:	421a      	tst	r2, r3
 8005e0c:	d0f4      	beq.n	8005df8 <HAL_PWR_EnterSLEEPMode+0x18>
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005e0e:	f000 f841 	bl	8005e94 <HAL_PWREx_DisableLowPowerRunMode>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_PWR_EnterSLEEPMode+0x18>
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8005e16:	bd10      	pop	{r4, pc}
    __SEV();
 8005e18:	bf40      	sev
    __WFE();
 8005e1a:	bf20      	wfe
    __WFE();
 8005e1c:	bf20      	wfe
 8005e1e:	e7fa      	b.n	8005e16 <HAL_PWR_EnterSLEEPMode+0x36>
 8005e20:	40007000 	.word	0x40007000
 8005e24:	e000ed00 	.word	0xe000ed00

08005e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e28:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005e2a:	4c11      	ldr	r4, [pc, #68]	; (8005e70 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8005e2c:	4911      	ldr	r1, [pc, #68]	; (8005e74 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8005e2e:	6823      	ldr	r3, [r4, #0]
{
 8005e30:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005e32:	400b      	ands	r3, r1
 8005e34:	4303      	orrs	r3, r0
 8005e36:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e38:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005e3a:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d10e      	bne.n	8005e60 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005e42:	4b0d      	ldr	r3, [pc, #52]	; (8005e78 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8005e44:	490d      	ldr	r1, [pc, #52]	; (8005e7c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	2306      	movs	r3, #6
 8005e4a:	4358      	muls	r0, r3
 8005e4c:	f7fa f974 	bl	8000138 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e50:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005e52:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e54:	00d2      	lsls	r2, r2, #3
 8005e56:	6961      	ldr	r1, [r4, #20]
 8005e58:	0008      	movs	r0, r1
 8005e5a:	4010      	ands	r0, r2
 8005e5c:	4211      	tst	r1, r2
 8005e5e:	d100      	bne.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 8005e60:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8005e66:	3b01      	subs	r3, #1
 8005e68:	e7f5      	b.n	8005e56 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8005e6a:	2003      	movs	r0, #3
 8005e6c:	e7f8      	b.n	8005e60 <HAL_PWREx_ControlVoltageScaling+0x38>
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	40007000 	.word	0x40007000
 8005e74:	fffff9ff 	.word	0xfffff9ff
 8005e78:	2000009c 	.word	0x2000009c
 8005e7c:	000f4240 	.word	0x000f4240

08005e80 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	4a03      	ldr	r2, [pc, #12]	; (8005e90 <HAL_PWREx_EnableLowPowerRunMode+0x10>)
 8005e84:	01db      	lsls	r3, r3, #7
 8005e86:	6811      	ldr	r1, [r2, #0]
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6013      	str	r3, [r2, #0]
}
 8005e8c:	4770      	bx	lr
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	40007000 	.word	0x40007000

08005e94 <HAL_PWREx_DisableLowPowerRunMode>:
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005e94:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <HAL_PWREx_DisableLowPowerRunMode+0x3c>)
 8005e96:	490f      	ldr	r1, [pc, #60]	; (8005ed4 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	2306      	movs	r3, #6
{
 8005e9c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005e9e:	4358      	muls	r0, r3
 8005ea0:	f7fa f94a 	bl	8000138 <__udivsi3>

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005ea4:	4a0c      	ldr	r2, [pc, #48]	; (8005ed8 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8005ea6:	490d      	ldr	r1, [pc, #52]	; (8005edc <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8005ea8:	6813      	ldr	r3, [r2, #0]
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005eaa:	3001      	adds	r0, #1
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005eac:	400b      	ands	r3, r1

  /* Wait until REGLPF is reset */
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005eae:	2180      	movs	r1, #128	; 0x80
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005eb0:	6013      	str	r3, [r2, #0]
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005eb2:	0089      	lsls	r1, r1, #2
 8005eb4:	6954      	ldr	r4, [r2, #20]
 8005eb6:	0023      	movs	r3, r4
 8005eb8:	400b      	ands	r3, r1
 8005eba:	420c      	tst	r4, r1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8005ebe:	0018      	movs	r0, r3
}
 8005ec0:	bd10      	pop	{r4, pc}
    if (wait_loop_index != 0U)
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_PWREx_DisableLowPowerRunMode+0x36>
      wait_loop_index--;
 8005ec6:	3801      	subs	r0, #1
 8005ec8:	e7f4      	b.n	8005eb4 <HAL_PWREx_DisableLowPowerRunMode+0x20>
      return HAL_TIMEOUT;
 8005eca:	2003      	movs	r0, #3
 8005ecc:	e7f8      	b.n	8005ec0 <HAL_PWREx_DisableLowPowerRunMode+0x2c>
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	2000009c 	.word	0x2000009c
 8005ed4:	000f4240 	.word	0x000f4240
 8005ed8:	40007000 	.word	0x40007000
 8005edc:	ffffbfff 	.word	0xffffbfff

08005ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee2:	0004      	movs	r4, r0
 8005ee4:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d023      	beq.n	8005f32 <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eea:	6803      	ldr	r3, [r0, #0]
 8005eec:	07db      	lsls	r3, r3, #31
 8005eee:	d410      	bmi.n	8005f12 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	079b      	lsls	r3, r3, #30
 8005ef4:	d45e      	bmi.n	8005fb4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	071b      	lsls	r3, r3, #28
 8005efa:	d500      	bpl.n	8005efe <HAL_RCC_OscConfig+0x1e>
 8005efc:	e0c3      	b.n	8006086 <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	075b      	lsls	r3, r3, #29
 8005f02:	d500      	bpl.n	8005f06 <HAL_RCC_OscConfig+0x26>
 8005f04:	e0f4      	b.n	80060f0 <HAL_RCC_OscConfig+0x210>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f06:	69e3      	ldr	r3, [r4, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d000      	beq.n	8005f0e <HAL_RCC_OscConfig+0x2e>
 8005f0c:	e17a      	b.n	8006204 <HAL_RCC_OscConfig+0x324>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005f0e:	2000      	movs	r0, #0
 8005f10:	e029      	b.n	8005f66 <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f12:	2238      	movs	r2, #56	; 0x38
 8005f14:	4daf      	ldr	r5, [pc, #700]	; (80061d4 <HAL_RCC_OscConfig+0x2f4>)
 8005f16:	68ab      	ldr	r3, [r5, #8]
 8005f18:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f1a:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d10a      	bne.n	8005f36 <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f20:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005f22:	0793      	lsls	r3, r2, #30
 8005f24:	d109      	bne.n	8005f3a <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	039b      	lsls	r3, r3, #14
 8005f2a:	d5e1      	bpl.n	8005ef0 <HAL_RCC_OscConfig+0x10>
 8005f2c:	6863      	ldr	r3, [r4, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1de      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8005f32:	2001      	movs	r0, #1
 8005f34:	e017      	b.n	8005f66 <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d0f5      	beq.n	8005f26 <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f3a:	2280      	movs	r2, #128	; 0x80
 8005f3c:	6863      	ldr	r3, [r4, #4]
 8005f3e:	0252      	lsls	r2, r2, #9
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d112      	bne.n	8005f6a <HAL_RCC_OscConfig+0x8a>
 8005f44:	682a      	ldr	r2, [r5, #0]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005f4a:	f7ff f8d7 	bl	80050fc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f4e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8005f50:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f52:	02bf      	lsls	r7, r7, #10
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	423b      	tst	r3, r7
 8005f58:	d1ca      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f5a:	f7ff f8cf 	bl	80050fc <HAL_GetTick>
 8005f5e:	1b80      	subs	r0, r0, r6
 8005f60:	2864      	cmp	r0, #100	; 0x64
 8005f62:	d9f7      	bls.n	8005f54 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8005f64:	2003      	movs	r0, #3
}
 8005f66:	b005      	add	sp, #20
 8005f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f6a:	21a0      	movs	r1, #160	; 0xa0
 8005f6c:	02c9      	lsls	r1, r1, #11
 8005f6e:	428b      	cmp	r3, r1
 8005f70:	d108      	bne.n	8005f84 <HAL_RCC_OscConfig+0xa4>
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	6829      	ldr	r1, [r5, #0]
 8005f76:	02db      	lsls	r3, r3, #11
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	602b      	str	r3, [r5, #0]
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f82:	e7e2      	b.n	8005f4a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f84:	682a      	ldr	r2, [r5, #0]
 8005f86:	4994      	ldr	r1, [pc, #592]	; (80061d8 <HAL_RCC_OscConfig+0x2f8>)
 8005f88:	400a      	ands	r2, r1
 8005f8a:	602a      	str	r2, [r5, #0]
 8005f8c:	682a      	ldr	r2, [r5, #0]
 8005f8e:	4993      	ldr	r1, [pc, #588]	; (80061dc <HAL_RCC_OscConfig+0x2fc>)
 8005f90:	400a      	ands	r2, r1
 8005f92:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1d8      	bne.n	8005f4a <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 8005f98:	f7ff f8b0 	bl	80050fc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f9c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8005f9e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fa0:	02bf      	lsls	r7, r7, #10
 8005fa2:	682b      	ldr	r3, [r5, #0]
 8005fa4:	423b      	tst	r3, r7
 8005fa6:	d0a3      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fa8:	f7ff f8a8 	bl	80050fc <HAL_GetTick>
 8005fac:	1b80      	subs	r0, r0, r6
 8005fae:	2864      	cmp	r0, #100	; 0x64
 8005fb0:	d9f7      	bls.n	8005fa2 <HAL_RCC_OscConfig+0xc2>
 8005fb2:	e7d7      	b.n	8005f64 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fb4:	2338      	movs	r3, #56	; 0x38
 8005fb6:	4d87      	ldr	r5, [pc, #540]	; (80061d4 <HAL_RCC_OscConfig+0x2f4>)
 8005fb8:	68aa      	ldr	r2, [r5, #8]
 8005fba:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fbc:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005fbe:	2b10      	cmp	r3, #16
 8005fc0:	d128      	bne.n	8006014 <HAL_RCC_OscConfig+0x134>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fc2:	2103      	movs	r1, #3
 8005fc4:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005fc6:	2a02      	cmp	r2, #2
 8005fc8:	d126      	bne.n	8006018 <HAL_RCC_OscConfig+0x138>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fca:	682a      	ldr	r2, [r5, #0]
 8005fcc:	0552      	lsls	r2, r2, #21
 8005fce:	d502      	bpl.n	8005fd6 <HAL_RCC_OscConfig+0xf6>
 8005fd0:	68e2      	ldr	r2, [r4, #12]
 8005fd2:	2a00      	cmp	r2, #0
 8005fd4:	d0ad      	beq.n	8005f32 <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd6:	6869      	ldr	r1, [r5, #4]
 8005fd8:	6962      	ldr	r2, [r4, #20]
 8005fda:	4881      	ldr	r0, [pc, #516]	; (80061e0 <HAL_RCC_OscConfig+0x300>)
 8005fdc:	0212      	lsls	r2, r2, #8
 8005fde:	4001      	ands	r1, r0
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10d      	bne.n	8006004 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	4a7e      	ldr	r2, [pc, #504]	; (80061e4 <HAL_RCC_OscConfig+0x304>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	6922      	ldr	r2, [r4, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	4a7c      	ldr	r2, [pc, #496]	; (80061e8 <HAL_RCC_OscConfig+0x308>)
 8005ff8:	049b      	lsls	r3, r3, #18
 8005ffa:	0f5b      	lsrs	r3, r3, #29
 8005ffc:	40da      	lsrs	r2, r3
 8005ffe:	0013      	movs	r3, r2
 8006000:	4a7a      	ldr	r2, [pc, #488]	; (80061ec <HAL_RCC_OscConfig+0x30c>)
 8006002:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006004:	4b7a      	ldr	r3, [pc, #488]	; (80061f0 <HAL_RCC_OscConfig+0x310>)
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	f7ff f830 	bl	800506c <HAL_InitTick>
 800600c:	2800      	cmp	r0, #0
 800600e:	d100      	bne.n	8006012 <HAL_RCC_OscConfig+0x132>
 8006010:	e771      	b.n	8005ef6 <HAL_RCC_OscConfig+0x16>
 8006012:	e78e      	b.n	8005f32 <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0d8      	beq.n	8005fca <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006018:	68e3      	ldr	r3, [r4, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d020      	beq.n	8006060 <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800601e:	682b      	ldr	r3, [r5, #0]
 8006020:	4a70      	ldr	r2, [pc, #448]	; (80061e4 <HAL_RCC_OscConfig+0x304>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006022:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006024:	4013      	ands	r3, r2
 8006026:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006028:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800602a:	4313      	orrs	r3, r2
 800602c:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 800602e:	2380      	movs	r3, #128	; 0x80
 8006030:	682a      	ldr	r2, [r5, #0]
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	4313      	orrs	r3, r2
 8006036:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006038:	f7ff f860 	bl	80050fc <HAL_GetTick>
 800603c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800603e:	682b      	ldr	r3, [r5, #0]
 8006040:	423b      	tst	r3, r7
 8006042:	d007      	beq.n	8006054 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006044:	686a      	ldr	r2, [r5, #4]
 8006046:	6963      	ldr	r3, [r4, #20]
 8006048:	4965      	ldr	r1, [pc, #404]	; (80061e0 <HAL_RCC_OscConfig+0x300>)
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	400a      	ands	r2, r1
 800604e:	4313      	orrs	r3, r2
 8006050:	606b      	str	r3, [r5, #4]
 8006052:	e750      	b.n	8005ef6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006054:	f7ff f852 	bl	80050fc <HAL_GetTick>
 8006058:	1b80      	subs	r0, r0, r6
 800605a:	2802      	cmp	r0, #2
 800605c:	d9ef      	bls.n	800603e <HAL_RCC_OscConfig+0x15e>
 800605e:	e781      	b.n	8005f64 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	4a64      	ldr	r2, [pc, #400]	; (80061f4 <HAL_RCC_OscConfig+0x314>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006064:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8006066:	4013      	ands	r3, r2
 8006068:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800606a:	f7ff f847 	bl	80050fc <HAL_GetTick>
 800606e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006070:	00ff      	lsls	r7, r7, #3
 8006072:	682b      	ldr	r3, [r5, #0]
 8006074:	423b      	tst	r3, r7
 8006076:	d100      	bne.n	800607a <HAL_RCC_OscConfig+0x19a>
 8006078:	e73d      	b.n	8005ef6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800607a:	f7ff f83f 	bl	80050fc <HAL_GetTick>
 800607e:	1b80      	subs	r0, r0, r6
 8006080:	2802      	cmp	r0, #2
 8006082:	d9f6      	bls.n	8006072 <HAL_RCC_OscConfig+0x192>
 8006084:	e76e      	b.n	8005f64 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006086:	2238      	movs	r2, #56	; 0x38
 8006088:	4d52      	ldr	r5, [pc, #328]	; (80061d4 <HAL_RCC_OscConfig+0x2f4>)
 800608a:	68ab      	ldr	r3, [r5, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	2b18      	cmp	r3, #24
 8006090:	d108      	bne.n	80060a4 <HAL_RCC_OscConfig+0x1c4>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006092:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8006094:	079b      	lsls	r3, r3, #30
 8006096:	d400      	bmi.n	800609a <HAL_RCC_OscConfig+0x1ba>
 8006098:	e731      	b.n	8005efe <HAL_RCC_OscConfig+0x1e>
 800609a:	69a3      	ldr	r3, [r4, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d000      	beq.n	80060a2 <HAL_RCC_OscConfig+0x1c2>
 80060a0:	e72d      	b.n	8005efe <HAL_RCC_OscConfig+0x1e>
 80060a2:	e746      	b.n	8005f32 <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060a4:	69a2      	ldr	r2, [r4, #24]
 80060a6:	2301      	movs	r3, #1
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	d010      	beq.n	80060ce <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_LSI_ENABLE();
 80060ac:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060ae:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80060b0:	4313      	orrs	r3, r2
 80060b2:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80060b4:	f7ff f822 	bl	80050fc <HAL_GetTick>
 80060b8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060ba:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80060bc:	423b      	tst	r3, r7
 80060be:	d000      	beq.n	80060c2 <HAL_RCC_OscConfig+0x1e2>
 80060c0:	e71d      	b.n	8005efe <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060c2:	f7ff f81b 	bl	80050fc <HAL_GetTick>
 80060c6:	1b80      	subs	r0, r0, r6
 80060c8:	2802      	cmp	r0, #2
 80060ca:	d9f6      	bls.n	80060ba <HAL_RCC_OscConfig+0x1da>
 80060cc:	e74a      	b.n	8005f64 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 80060ce:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060d0:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 80060d2:	439a      	bics	r2, r3
 80060d4:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80060d6:	f7ff f811 	bl	80050fc <HAL_GetTick>
 80060da:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060dc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80060de:	423b      	tst	r3, r7
 80060e0:	d100      	bne.n	80060e4 <HAL_RCC_OscConfig+0x204>
 80060e2:	e70c      	b.n	8005efe <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e4:	f7ff f80a 	bl	80050fc <HAL_GetTick>
 80060e8:	1b80      	subs	r0, r0, r6
 80060ea:	2802      	cmp	r0, #2
 80060ec:	d9f6      	bls.n	80060dc <HAL_RCC_OscConfig+0x1fc>
 80060ee:	e739      	b.n	8005f64 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80060f0:	2238      	movs	r2, #56	; 0x38
 80060f2:	4d38      	ldr	r5, [pc, #224]	; (80061d4 <HAL_RCC_OscConfig+0x2f4>)
 80060f4:	68ab      	ldr	r3, [r5, #8]
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d108      	bne.n	800610e <HAL_RCC_OscConfig+0x22e>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80060fc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80060fe:	079b      	lsls	r3, r3, #30
 8006100:	d400      	bmi.n	8006104 <HAL_RCC_OscConfig+0x224>
 8006102:	e700      	b.n	8005f06 <HAL_RCC_OscConfig+0x26>
 8006104:	68a3      	ldr	r3, [r4, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d000      	beq.n	800610c <HAL_RCC_OscConfig+0x22c>
 800610a:	e6fc      	b.n	8005f06 <HAL_RCC_OscConfig+0x26>
 800610c:	e711      	b.n	8005f32 <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800610e:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8006110:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006112:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006114:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8006116:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006118:	4213      	tst	r3, r2
 800611a:	d108      	bne.n	800612e <HAL_RCC_OscConfig+0x24e>
        __HAL_RCC_PWR_CLK_ENABLE();
 800611c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800611e:	4313      	orrs	r3, r2
 8006120:	63eb      	str	r3, [r5, #60]	; 0x3c
 8006122:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006124:	4013      	ands	r3, r2
 8006126:	9303      	str	r3, [sp, #12]
 8006128:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 800612a:	2301      	movs	r3, #1
 800612c:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800612e:	2780      	movs	r7, #128	; 0x80
 8006130:	4e31      	ldr	r6, [pc, #196]	; (80061f8 <HAL_RCC_OscConfig+0x318>)
 8006132:	007f      	lsls	r7, r7, #1
 8006134:	6833      	ldr	r3, [r6, #0]
 8006136:	423b      	tst	r3, r7
 8006138:	d015      	beq.n	8006166 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800613a:	68a3      	ldr	r3, [r4, #8]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d122      	bne.n	8006186 <HAL_RCC_OscConfig+0x2a6>
 8006140:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8006142:	4313      	orrs	r3, r2
 8006144:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8006146:	f7fe ffd9 	bl	80050fc <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800614a:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800614c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800614e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8006150:	423b      	tst	r3, r7
 8006152:	d038      	beq.n	80061c6 <HAL_RCC_OscConfig+0x2e6>
      if (pwrclkchanged == SET)
 8006154:	9b00      	ldr	r3, [sp, #0]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d000      	beq.n	800615c <HAL_RCC_OscConfig+0x27c>
 800615a:	e6d4      	b.n	8005f06 <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 800615c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800615e:	4a27      	ldr	r2, [pc, #156]	; (80061fc <HAL_RCC_OscConfig+0x31c>)
 8006160:	4013      	ands	r3, r2
 8006162:	63eb      	str	r3, [r5, #60]	; 0x3c
 8006164:	e6cf      	b.n	8005f06 <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006166:	6833      	ldr	r3, [r6, #0]
 8006168:	433b      	orrs	r3, r7
 800616a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800616c:	f7fe ffc6 	bl	80050fc <HAL_GetTick>
 8006170:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006172:	6833      	ldr	r3, [r6, #0]
 8006174:	423b      	tst	r3, r7
 8006176:	d1e0      	bne.n	800613a <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006178:	f7fe ffc0 	bl	80050fc <HAL_GetTick>
 800617c:	9b01      	ldr	r3, [sp, #4]
 800617e:	1ac0      	subs	r0, r0, r3
 8006180:	2802      	cmp	r0, #2
 8006182:	d9f6      	bls.n	8006172 <HAL_RCC_OscConfig+0x292>
 8006184:	e6ee      	b.n	8005f64 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006186:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8006188:	2b05      	cmp	r3, #5
 800618a:	d105      	bne.n	8006198 <HAL_RCC_OscConfig+0x2b8>
 800618c:	3b01      	subs	r3, #1
 800618e:	4313      	orrs	r3, r2
 8006190:	65eb      	str	r3, [r5, #92]	; 0x5c
 8006192:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8006194:	2301      	movs	r3, #1
 8006196:	e7d4      	b.n	8006142 <HAL_RCC_OscConfig+0x262>
 8006198:	2101      	movs	r1, #1
 800619a:	438a      	bics	r2, r1
 800619c:	65ea      	str	r2, [r5, #92]	; 0x5c
 800619e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80061a0:	3103      	adds	r1, #3
 80061a2:	438a      	bics	r2, r1
 80061a4:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1cd      	bne.n	8006146 <HAL_RCC_OscConfig+0x266>
        tickstart = HAL_GetTick();
 80061aa:	f7fe ffa7 	bl	80050fc <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061ae:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80061b0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061b2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80061b4:	423b      	tst	r3, r7
 80061b6:	d0cd      	beq.n	8006154 <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b8:	f7fe ffa0 	bl	80050fc <HAL_GetTick>
 80061bc:	4b10      	ldr	r3, [pc, #64]	; (8006200 <HAL_RCC_OscConfig+0x320>)
 80061be:	1b80      	subs	r0, r0, r6
 80061c0:	4298      	cmp	r0, r3
 80061c2:	d9f6      	bls.n	80061b2 <HAL_RCC_OscConfig+0x2d2>
 80061c4:	e6ce      	b.n	8005f64 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c6:	f7fe ff99 	bl	80050fc <HAL_GetTick>
 80061ca:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <HAL_RCC_OscConfig+0x320>)
 80061cc:	1b80      	subs	r0, r0, r6
 80061ce:	4298      	cmp	r0, r3
 80061d0:	d9bd      	bls.n	800614e <HAL_RCC_OscConfig+0x26e>
 80061d2:	e6c7      	b.n	8005f64 <HAL_RCC_OscConfig+0x84>
 80061d4:	40021000 	.word	0x40021000
 80061d8:	fffeffff 	.word	0xfffeffff
 80061dc:	fffbffff 	.word	0xfffbffff
 80061e0:	ffff80ff 	.word	0xffff80ff
 80061e4:	ffffc7ff 	.word	0xffffc7ff
 80061e8:	00f42400 	.word	0x00f42400
 80061ec:	2000009c 	.word	0x2000009c
 80061f0:	200000a4 	.word	0x200000a4
 80061f4:	fffffeff 	.word	0xfffffeff
 80061f8:	40007000 	.word	0x40007000
 80061fc:	efffffff 	.word	0xefffffff
 8006200:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006204:	2138      	movs	r1, #56	; 0x38
 8006206:	4d3f      	ldr	r5, [pc, #252]	; (8006304 <HAL_RCC_OscConfig+0x424>)
 8006208:	68aa      	ldr	r2, [r5, #8]
 800620a:	400a      	ands	r2, r1
 800620c:	2a10      	cmp	r2, #16
 800620e:	d053      	beq.n	80062b8 <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006210:	4a3d      	ldr	r2, [pc, #244]	; (8006308 <HAL_RCC_OscConfig+0x428>)
 8006212:	2b02      	cmp	r3, #2
 8006214:	d138      	bne.n	8006288 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_PLL_DISABLE();
 8006216:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006218:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800621a:	4013      	ands	r3, r2
 800621c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800621e:	f7fe ff6d 	bl	80050fc <HAL_GetTick>
 8006222:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006224:	04bf      	lsls	r7, r7, #18
 8006226:	682b      	ldr	r3, [r5, #0]
 8006228:	423b      	tst	r3, r7
 800622a:	d127      	bne.n	800627c <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800622c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800622e:	6a23      	ldr	r3, [r4, #32]
 8006230:	68ea      	ldr	r2, [r5, #12]
 8006232:	430b      	orrs	r3, r1
 8006234:	4935      	ldr	r1, [pc, #212]	; (800630c <HAL_RCC_OscConfig+0x42c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006236:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006238:	400a      	ands	r2, r1
 800623a:	4313      	orrs	r3, r2
 800623c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800623e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006240:	4313      	orrs	r3, r2
 8006242:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006244:	4313      	orrs	r3, r2
 8006246:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006248:	0212      	lsls	r2, r2, #8
 800624a:	4313      	orrs	r3, r2
 800624c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800624e:	2380      	movs	r3, #128	; 0x80
 8006250:	682a      	ldr	r2, [r5, #0]
 8006252:	045b      	lsls	r3, r3, #17
 8006254:	4313      	orrs	r3, r2
 8006256:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	68ea      	ldr	r2, [r5, #12]
 800625c:	055b      	lsls	r3, r3, #21
 800625e:	4313      	orrs	r3, r2
 8006260:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8006262:	f7fe ff4b 	bl	80050fc <HAL_GetTick>
 8006266:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	4233      	tst	r3, r6
 800626c:	d000      	beq.n	8006270 <HAL_RCC_OscConfig+0x390>
 800626e:	e64e      	b.n	8005f0e <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006270:	f7fe ff44 	bl	80050fc <HAL_GetTick>
 8006274:	1b00      	subs	r0, r0, r4
 8006276:	2802      	cmp	r0, #2
 8006278:	d9f6      	bls.n	8006268 <HAL_RCC_OscConfig+0x388>
 800627a:	e673      	b.n	8005f64 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800627c:	f7fe ff3e 	bl	80050fc <HAL_GetTick>
 8006280:	1b80      	subs	r0, r0, r6
 8006282:	2802      	cmp	r0, #2
 8006284:	d9cf      	bls.n	8006226 <HAL_RCC_OscConfig+0x346>
 8006286:	e66d      	b.n	8005f64 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_PLL_DISABLE();
 8006288:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800628a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800628c:	4013      	ands	r3, r2
 800628e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006290:	f7fe ff34 	bl	80050fc <HAL_GetTick>
 8006294:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006296:	04b6      	lsls	r6, r6, #18
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	0018      	movs	r0, r3
 800629c:	4030      	ands	r0, r6
 800629e:	4233      	tst	r3, r6
 80062a0:	d104      	bne.n	80062ac <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80062a2:	68eb      	ldr	r3, [r5, #12]
 80062a4:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <HAL_RCC_OscConfig+0x430>)
 80062a6:	4013      	ands	r3, r2
 80062a8:	60eb      	str	r3, [r5, #12]
 80062aa:	e65c      	b.n	8005f66 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ac:	f7fe ff26 	bl	80050fc <HAL_GetTick>
 80062b0:	1b00      	subs	r0, r0, r4
 80062b2:	2802      	cmp	r0, #2
 80062b4:	d9f0      	bls.n	8006298 <HAL_RCC_OscConfig+0x3b8>
 80062b6:	e655      	b.n	8005f64 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d100      	bne.n	80062be <HAL_RCC_OscConfig+0x3de>
 80062bc:	e639      	b.n	8005f32 <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062be:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80062c0:	68eb      	ldr	r3, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c2:	6a21      	ldr	r1, [r4, #32]
 80062c4:	401a      	ands	r2, r3
 80062c6:	428a      	cmp	r2, r1
 80062c8:	d000      	beq.n	80062cc <HAL_RCC_OscConfig+0x3ec>
 80062ca:	e632      	b.n	8005f32 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062cc:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062d0:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d2:	428a      	cmp	r2, r1
 80062d4:	d000      	beq.n	80062d8 <HAL_RCC_OscConfig+0x3f8>
 80062d6:	e62c      	b.n	8005f32 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062d8:	21fe      	movs	r1, #254	; 0xfe
 80062da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80062dc:	01c9      	lsls	r1, r1, #7
 80062de:	4019      	ands	r1, r3
 80062e0:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062e2:	4291      	cmp	r1, r2
 80062e4:	d000      	beq.n	80062e8 <HAL_RCC_OscConfig+0x408>
 80062e6:	e624      	b.n	8005f32 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062e8:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062ec:	0392      	lsls	r2, r2, #14
 80062ee:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062f0:	428a      	cmp	r2, r1
 80062f2:	d000      	beq.n	80062f6 <HAL_RCC_OscConfig+0x416>
 80062f4:	e61d      	b.n	8005f32 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80062f8:	0f5b      	lsrs	r3, r3, #29
 80062fa:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d100      	bne.n	8006302 <HAL_RCC_OscConfig+0x422>
 8006300:	e605      	b.n	8005f0e <HAL_RCC_OscConfig+0x2e>
 8006302:	e616      	b.n	8005f32 <HAL_RCC_OscConfig+0x52>
 8006304:	40021000 	.word	0x40021000
 8006308:	feffffff 	.word	0xfeffffff
 800630c:	1fc1808c 	.word	0x1fc1808c
 8006310:	effefffc 	.word	0xeffefffc

08006314 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006314:	2338      	movs	r3, #56	; 0x38
{
 8006316:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006318:	4c1e      	ldr	r4, [pc, #120]	; (8006394 <HAL_RCC_GetSysClockFreq+0x80>)
 800631a:	68a2      	ldr	r2, [r4, #8]
 800631c:	421a      	tst	r2, r3
 800631e:	d105      	bne.n	800632c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006320:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006322:	481d      	ldr	r0, [pc, #116]	; (8006398 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006324:	049b      	lsls	r3, r3, #18
 8006326:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006328:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800632a:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800632c:	68a2      	ldr	r2, [r4, #8]
 800632e:	401a      	ands	r2, r3
 8006330:	2a08      	cmp	r2, #8
 8006332:	d02a      	beq.n	800638a <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006334:	68a2      	ldr	r2, [r4, #8]
 8006336:	401a      	ands	r2, r3
 8006338:	2a10      	cmp	r2, #16
 800633a:	d11a      	bne.n	8006372 <HAL_RCC_GetSysClockFreq+0x5e>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800633c:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800633e:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006340:	43db      	mvns	r3, r3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006342:	0649      	lsls	r1, r1, #25
 8006344:	0f49      	lsrs	r1, r1, #29
 8006346:	257f      	movs	r5, #127	; 0x7f
 8006348:	3101      	adds	r1, #1
    switch (pllsource)
 800634a:	079b      	lsls	r3, r3, #30
 800634c:	d10c      	bne.n	8006368 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800634e:	68e3      	ldr	r3, [r4, #12]
 8006350:	4812      	ldr	r0, [pc, #72]	; (800639c <HAL_RCC_GetSysClockFreq+0x88>)
 8006352:	0a1b      	lsrs	r3, r3, #8
 8006354:	401d      	ands	r5, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006356:	f7f9 feef 	bl	8000138 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800635a:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800635c:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800635e:	0f49      	lsrs	r1, r1, #29
 8006360:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8006362:	f7f9 fee9 	bl	8000138 <__udivsi3>
 8006366:	e7e0      	b.n	800632a <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006368:	68e3      	ldr	r3, [r4, #12]
 800636a:	480b      	ldr	r0, [pc, #44]	; (8006398 <HAL_RCC_GetSysClockFreq+0x84>)
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	401d      	ands	r5, r3
 8006370:	e7f1      	b.n	8006356 <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006372:	68a2      	ldr	r2, [r4, #8]
 8006374:	401a      	ands	r2, r3
 8006376:	2a20      	cmp	r2, #32
 8006378:	d009      	beq.n	800638e <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800637a:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 800637c:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800637e:	4013      	ands	r3, r2
 8006380:	2b18      	cmp	r3, #24
 8006382:	d1d2      	bne.n	800632a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8006384:	20fa      	movs	r0, #250	; 0xfa
 8006386:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8006388:	e7cf      	b.n	800632a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800638a:	4804      	ldr	r0, [pc, #16]	; (800639c <HAL_RCC_GetSysClockFreq+0x88>)
 800638c:	e7cd      	b.n	800632a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 800638e:	2080      	movs	r0, #128	; 0x80
 8006390:	0200      	lsls	r0, r0, #8
 8006392:	e7ca      	b.n	800632a <HAL_RCC_GetSysClockFreq+0x16>
 8006394:	40021000 	.word	0x40021000
 8006398:	00f42400 	.word	0x00f42400
 800639c:	007a1200 	.word	0x007a1200

080063a0 <HAL_RCC_ClockConfig>:
{
 80063a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063a2:	0004      	movs	r4, r0
 80063a4:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d101      	bne.n	80063ae <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80063aa:	2001      	movs	r0, #1
}
 80063ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063ae:	2707      	movs	r7, #7
 80063b0:	4e4a      	ldr	r6, [pc, #296]	; (80064dc <HAL_RCC_ClockConfig+0x13c>)
 80063b2:	6833      	ldr	r3, [r6, #0]
 80063b4:	403b      	ands	r3, r7
 80063b6:	428b      	cmp	r3, r1
 80063b8:	d32a      	bcc.n	8006410 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063ba:	6821      	ldr	r1, [r4, #0]
 80063bc:	078b      	lsls	r3, r1, #30
 80063be:	d43b      	bmi.n	8006438 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063c0:	07cb      	lsls	r3, r1, #31
 80063c2:	d448      	bmi.n	8006456 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063c4:	2707      	movs	r7, #7
 80063c6:	6833      	ldr	r3, [r6, #0]
 80063c8:	403b      	ands	r3, r7
 80063ca:	42ab      	cmp	r3, r5
 80063cc:	d90a      	bls.n	80063e4 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ce:	6833      	ldr	r3, [r6, #0]
 80063d0:	43bb      	bics	r3, r7
 80063d2:	432b      	orrs	r3, r5
 80063d4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80063d6:	f7fe fe91 	bl	80050fc <HAL_GetTick>
 80063da:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80063dc:	6833      	ldr	r3, [r6, #0]
 80063de:	403b      	ands	r3, r7
 80063e0:	42ab      	cmp	r3, r5
 80063e2:	d16b      	bne.n	80064bc <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	4d3e      	ldr	r5, [pc, #248]	; (80064e0 <HAL_RCC_ClockConfig+0x140>)
 80063e8:	075b      	lsls	r3, r3, #29
 80063ea:	d46f      	bmi.n	80064cc <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80063ec:	f7ff ff92 	bl	8006314 <HAL_RCC_GetSysClockFreq>
 80063f0:	68ab      	ldr	r3, [r5, #8]
 80063f2:	4a3c      	ldr	r2, [pc, #240]	; (80064e4 <HAL_RCC_ClockConfig+0x144>)
 80063f4:	051b      	lsls	r3, r3, #20
 80063f6:	0f1b      	lsrs	r3, r3, #28
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	589b      	ldr	r3, [r3, r2]
 80063fc:	221f      	movs	r2, #31
 80063fe:	4013      	ands	r3, r2
 8006400:	40d8      	lsrs	r0, r3
 8006402:	4b39      	ldr	r3, [pc, #228]	; (80064e8 <HAL_RCC_ClockConfig+0x148>)
 8006404:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006406:	4b39      	ldr	r3, [pc, #228]	; (80064ec <HAL_RCC_ClockConfig+0x14c>)
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	f7fe fe2f 	bl	800506c <HAL_InitTick>
 800640e:	e7cd      	b.n	80063ac <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006410:	6833      	ldr	r3, [r6, #0]
 8006412:	43bb      	bics	r3, r7
 8006414:	430b      	orrs	r3, r1
 8006416:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006418:	f7fe fe70 	bl	80050fc <HAL_GetTick>
 800641c:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800641e:	6833      	ldr	r3, [r6, #0]
 8006420:	403b      	ands	r3, r7
 8006422:	42ab      	cmp	r3, r5
 8006424:	d0c9      	beq.n	80063ba <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006426:	f7fe fe69 	bl	80050fc <HAL_GetTick>
 800642a:	9b01      	ldr	r3, [sp, #4]
 800642c:	1ac0      	subs	r0, r0, r3
 800642e:	4b30      	ldr	r3, [pc, #192]	; (80064f0 <HAL_RCC_ClockConfig+0x150>)
 8006430:	4298      	cmp	r0, r3
 8006432:	d9f4      	bls.n	800641e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8006434:	2003      	movs	r0, #3
 8006436:	e7b9      	b.n	80063ac <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006438:	4a29      	ldr	r2, [pc, #164]	; (80064e0 <HAL_RCC_ClockConfig+0x140>)
 800643a:	074b      	lsls	r3, r1, #29
 800643c:	d504      	bpl.n	8006448 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800643e:	23e0      	movs	r3, #224	; 0xe0
 8006440:	6890      	ldr	r0, [r2, #8]
 8006442:	01db      	lsls	r3, r3, #7
 8006444:	4303      	orrs	r3, r0
 8006446:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006448:	6893      	ldr	r3, [r2, #8]
 800644a:	482a      	ldr	r0, [pc, #168]	; (80064f4 <HAL_RCC_ClockConfig+0x154>)
 800644c:	4003      	ands	r3, r0
 800644e:	68a0      	ldr	r0, [r4, #8]
 8006450:	4303      	orrs	r3, r0
 8006452:	6093      	str	r3, [r2, #8]
 8006454:	e7b4      	b.n	80063c0 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006456:	6862      	ldr	r2, [r4, #4]
 8006458:	4f21      	ldr	r7, [pc, #132]	; (80064e0 <HAL_RCC_ClockConfig+0x140>)
 800645a:	2a01      	cmp	r2, #1
 800645c:	d119      	bne.n	8006492 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	039b      	lsls	r3, r3, #14
 8006462:	d5a2      	bpl.n	80063aa <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006464:	2107      	movs	r1, #7
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	438b      	bics	r3, r1
 800646a:	4313      	orrs	r3, r2
 800646c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800646e:	f7fe fe45 	bl	80050fc <HAL_GetTick>
 8006472:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006474:	2338      	movs	r3, #56	; 0x38
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	401a      	ands	r2, r3
 800647a:	6863      	ldr	r3, [r4, #4]
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	429a      	cmp	r2, r3
 8006480:	d0a0      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006482:	f7fe fe3b 	bl	80050fc <HAL_GetTick>
 8006486:	9b01      	ldr	r3, [sp, #4]
 8006488:	1ac0      	subs	r0, r0, r3
 800648a:	4b19      	ldr	r3, [pc, #100]	; (80064f0 <HAL_RCC_ClockConfig+0x150>)
 800648c:	4298      	cmp	r0, r3
 800648e:	d9f1      	bls.n	8006474 <HAL_RCC_ClockConfig+0xd4>
 8006490:	e7d0      	b.n	8006434 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006492:	2a02      	cmp	r2, #2
 8006494:	d103      	bne.n	800649e <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	019b      	lsls	r3, r3, #6
 800649a:	d4e3      	bmi.n	8006464 <HAL_RCC_ClockConfig+0xc4>
 800649c:	e785      	b.n	80063aa <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800649e:	2a00      	cmp	r2, #0
 80064a0:	d103      	bne.n	80064aa <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	055b      	lsls	r3, r3, #21
 80064a6:	d4dd      	bmi.n	8006464 <HAL_RCC_ClockConfig+0xc4>
 80064a8:	e77f      	b.n	80063aa <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80064aa:	2302      	movs	r3, #2
 80064ac:	2a03      	cmp	r2, #3
 80064ae:	d103      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064b0:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064b2:	4219      	tst	r1, r3
 80064b4:	d1d6      	bne.n	8006464 <HAL_RCC_ClockConfig+0xc4>
 80064b6:	e778      	b.n	80063aa <HAL_RCC_ClockConfig+0xa>
 80064b8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80064ba:	e7fa      	b.n	80064b2 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064bc:	f7fe fe1e 	bl	80050fc <HAL_GetTick>
 80064c0:	9b01      	ldr	r3, [sp, #4]
 80064c2:	1ac0      	subs	r0, r0, r3
 80064c4:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <HAL_RCC_ClockConfig+0x150>)
 80064c6:	4298      	cmp	r0, r3
 80064c8:	d988      	bls.n	80063dc <HAL_RCC_ClockConfig+0x3c>
 80064ca:	e7b3      	b.n	8006434 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80064cc:	68ab      	ldr	r3, [r5, #8]
 80064ce:	4a0a      	ldr	r2, [pc, #40]	; (80064f8 <HAL_RCC_ClockConfig+0x158>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	68e2      	ldr	r2, [r4, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60ab      	str	r3, [r5, #8]
 80064d8:	e788      	b.n	80063ec <HAL_RCC_ClockConfig+0x4c>
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	40022000 	.word	0x40022000
 80064e0:	40021000 	.word	0x40021000
 80064e4:	0800f15c 	.word	0x0800f15c
 80064e8:	2000009c 	.word	0x2000009c
 80064ec:	200000a4 	.word	0x200000a4
 80064f0:	00001388 	.word	0x00001388
 80064f4:	fffff0ff 	.word	0xfffff0ff
 80064f8:	ffff8fff 	.word	0xffff8fff

080064fc <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80064fc:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80064fe:	4a07      	ldr	r2, [pc, #28]	; (800651c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	045b      	lsls	r3, r3, #17
 8006504:	0f5b      	lsrs	r3, r3, #29
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	589b      	ldr	r3, [r3, r2]
 800650a:	221f      	movs	r2, #31
 800650c:	4013      	ands	r3, r2
 800650e:	4a04      	ldr	r2, [pc, #16]	; (8006520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006510:	6810      	ldr	r0, [r2, #0]
 8006512:	40d8      	lsrs	r0, r3
}
 8006514:	4770      	bx	lr
 8006516:	46c0      	nop			; (mov r8, r8)
 8006518:	40021000 	.word	0x40021000
 800651c:	0800f19c 	.word	0x0800f19c
 8006520:	2000009c 	.word	0x2000009c

08006524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006526:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006528:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800652a:	2000      	movs	r0, #0
{
 800652c:	b085      	sub	sp, #20
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800652e:	039b      	lsls	r3, r3, #14
 8006530:	d53b      	bpl.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x86>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006532:	2280      	movs	r2, #128	; 0x80
 8006534:	4c48      	ldr	r4, [pc, #288]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006536:	0552      	lsls	r2, r2, #21
 8006538:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800653a:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800653c:	4213      	tst	r3, r2
 800653e:	d108      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006540:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006542:	4313      	orrs	r3, r2
 8006544:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006546:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006548:	4013      	ands	r3, r2
 800654a:	9303      	str	r3, [sp, #12]
 800654c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800654e:	2301      	movs	r3, #1
 8006550:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006552:	2780      	movs	r7, #128	; 0x80
 8006554:	4e41      	ldr	r6, [pc, #260]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006556:	007f      	lsls	r7, r7, #1
 8006558:	6833      	ldr	r3, [r6, #0]
 800655a:	433b      	orrs	r3, r7
 800655c:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800655e:	f7fe fdcd 	bl	80050fc <HAL_GetTick>
 8006562:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006564:	6833      	ldr	r3, [r6, #0]
 8006566:	423b      	tst	r3, r7
 8006568:	d011      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800656a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800656c:	23c0      	movs	r3, #192	; 0xc0
 800656e:	0011      	movs	r1, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4e3b      	ldr	r6, [pc, #236]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006574:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006576:	421a      	tst	r2, r3
 8006578:	d002      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800657a:	696b      	ldr	r3, [r5, #20]
 800657c:	4299      	cmp	r1, r3
 800657e:	d14d      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006580:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006582:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006584:	401e      	ands	r6, r3
 8006586:	696b      	ldr	r3, [r5, #20]
 8006588:	431e      	orrs	r6, r3
 800658a:	65e6      	str	r6, [r4, #92]	; 0x5c
 800658c:	e006      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800658e:	f7fe fdb5 	bl	80050fc <HAL_GetTick>
 8006592:	9b01      	ldr	r3, [sp, #4]
 8006594:	1ac0      	subs	r0, r0, r3
 8006596:	2802      	cmp	r0, #2
 8006598:	d9e4      	bls.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 800659a:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800659c:	9b00      	ldr	r3, [sp, #0]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d103      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80065a4:	4a2f      	ldr	r2, [pc, #188]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065aa:	682a      	ldr	r2, [r5, #0]
 80065ac:	07d3      	lsls	r3, r2, #31
 80065ae:	d506      	bpl.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065b0:	2403      	movs	r4, #3
 80065b2:	4929      	ldr	r1, [pc, #164]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065b4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80065b6:	43a3      	bics	r3, r4
 80065b8:	686c      	ldr	r4, [r5, #4]
 80065ba:	4323      	orrs	r3, r4
 80065bc:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065be:	0693      	lsls	r3, r2, #26
 80065c0:	d506      	bpl.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065c2:	4925      	ldr	r1, [pc, #148]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065c4:	4c28      	ldr	r4, [pc, #160]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80065c6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80065c8:	4023      	ands	r3, r4
 80065ca:	68ac      	ldr	r4, [r5, #8]
 80065cc:	4323      	orrs	r3, r4
 80065ce:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065d0:	0453      	lsls	r3, r2, #17
 80065d2:	d50f      	bpl.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065d4:	4920      	ldr	r1, [pc, #128]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065d6:	692c      	ldr	r4, [r5, #16]
 80065d8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	089b      	lsrs	r3, r3, #2
 80065de:	4323      	orrs	r3, r4
 80065e0:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80065e2:	2380      	movs	r3, #128	; 0x80
 80065e4:	05db      	lsls	r3, r3, #23
 80065e6:	429c      	cmp	r4, r3
 80065e8:	d104      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80065ea:	2380      	movs	r3, #128	; 0x80
 80065ec:	68cc      	ldr	r4, [r1, #12]
 80065ee:	025b      	lsls	r3, r3, #9
 80065f0:	4323      	orrs	r3, r4
 80065f2:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80065f4:	0513      	lsls	r3, r2, #20
 80065f6:	d50f      	bpl.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80065f8:	4a17      	ldr	r2, [pc, #92]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065fa:	4c1c      	ldr	r4, [pc, #112]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80065fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80065fe:	68e9      	ldr	r1, [r5, #12]
 8006600:	4023      	ands	r3, r4
 8006602:	430b      	orrs	r3, r1
 8006604:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006606:	2380      	movs	r3, #128	; 0x80
 8006608:	01db      	lsls	r3, r3, #7
 800660a:	4299      	cmp	r1, r3
 800660c:	d104      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800660e:	2380      	movs	r3, #128	; 0x80
 8006610:	68d1      	ldr	r1, [r2, #12]
 8006612:	025b      	lsls	r3, r3, #9
 8006614:	430b      	orrs	r3, r1
 8006616:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8006618:	b005      	add	sp, #20
 800661a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 800661c:	2380      	movs	r3, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800661e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8006620:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006622:	0011      	movs	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8006624:	025b      	lsls	r3, r3, #9
 8006626:	4303      	orrs	r3, r0
 8006628:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800662a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800662c:	4810      	ldr	r0, [pc, #64]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800662e:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006630:	4003      	ands	r3, r0
 8006632:	65e3      	str	r3, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8006634:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006636:	07d3      	lsls	r3, r2, #31
 8006638:	d5a2      	bpl.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        tickstart = HAL_GetTick();
 800663a:	f7fe fd5f 	bl	80050fc <HAL_GetTick>
 800663e:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006640:	2202      	movs	r2, #2
 8006642:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006644:	4213      	tst	r3, r2
 8006646:	d19b      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x5c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006648:	f7fe fd58 	bl	80050fc <HAL_GetTick>
 800664c:	4b09      	ldr	r3, [pc, #36]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800664e:	1bc0      	subs	r0, r0, r7
 8006650:	4298      	cmp	r0, r3
 8006652:	d9f5      	bls.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8006654:	e7a1      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	40021000 	.word	0x40021000
 800665c:	40007000 	.word	0x40007000
 8006660:	fffffcff 	.word	0xfffffcff
 8006664:	efffffff 	.word	0xefffffff
 8006668:	ffffcfff 	.word	0xffffcfff
 800666c:	ffff3fff 	.word	0xffff3fff
 8006670:	fffeffff 	.word	0xfffeffff
 8006674:	00001388 	.word	0x00001388

08006678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006678:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800667a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800667e:	2201      	movs	r2, #1
 8006680:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006684:	6801      	ldr	r1, [r0, #0]
 8006686:	4d13      	ldr	r5, [pc, #76]	; (80066d4 <UART_EndRxTransfer+0x5c>)
 8006688:	680b      	ldr	r3, [r1, #0]
 800668a:	402b      	ands	r3, r5
 800668c:	600b      	str	r3, [r1, #0]
 800668e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006692:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006696:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800669a:	6802      	ldr	r2, [r0, #0]
 800669c:	4c0e      	ldr	r4, [pc, #56]	; (80066d8 <UART_EndRxTransfer+0x60>)
 800669e:	6893      	ldr	r3, [r2, #8]
 80066a0:	4023      	ands	r3, r4
 80066a2:	6093      	str	r3, [r2, #8]
 80066a4:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d10a      	bne.n	80066c4 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b2:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b6:	2410      	movs	r4, #16
 80066b8:	6802      	ldr	r2, [r0, #0]
 80066ba:	6813      	ldr	r3, [r2, #0]
 80066bc:	43a3      	bics	r3, r4
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066c4:	0003      	movs	r3, r0
 80066c6:	2220      	movs	r2, #32
 80066c8:	338c      	adds	r3, #140	; 0x8c
 80066ca:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066cc:	2300      	movs	r3, #0
 80066ce:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066d0:	6743      	str	r3, [r0, #116]	; 0x74
}
 80066d2:	bd30      	pop	{r4, r5, pc}
 80066d4:	fffffedf 	.word	0xfffffedf
 80066d8:	effffffe 	.word	0xeffffffe

080066dc <UART_SetConfig>:
{
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066e0:	6925      	ldr	r5, [r4, #16]
 80066e2:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066e4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066e6:	4329      	orrs	r1, r5
 80066e8:	6965      	ldr	r5, [r4, #20]
 80066ea:	69c3      	ldr	r3, [r0, #28]
 80066ec:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066ee:	6810      	ldr	r0, [r2, #0]
 80066f0:	4d48      	ldr	r5, [pc, #288]	; (8006814 <UART_SetConfig+0x138>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066f2:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066f4:	4028      	ands	r0, r5
 80066f6:	4301      	orrs	r1, r0
 80066f8:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066fa:	6851      	ldr	r1, [r2, #4]
 80066fc:	4846      	ldr	r0, [pc, #280]	; (8006818 <UART_SetConfig+0x13c>)
    tmpreg |= huart->Init.OneBitSampling;
 80066fe:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006700:	4001      	ands	r1, r0
 8006702:	68e0      	ldr	r0, [r4, #12]
 8006704:	4301      	orrs	r1, r0
 8006706:	6051      	str	r1, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8006708:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800670a:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800670c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800670e:	4d43      	ldr	r5, [pc, #268]	; (800681c <UART_SetConfig+0x140>)
 8006710:	4028      	ands	r0, r5
 8006712:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006714:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006716:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006718:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800671a:	4381      	bics	r1, r0
 800671c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800671e:	4301      	orrs	r1, r0
 8006720:	62d1      	str	r1, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006722:	493f      	ldr	r1, [pc, #252]	; (8006820 <UART_SetConfig+0x144>)
 8006724:	428a      	cmp	r2, r1
 8006726:	d115      	bne.n	8006754 <UART_SetConfig+0x78>
 8006728:	2103      	movs	r1, #3
 800672a:	4a3e      	ldr	r2, [pc, #248]	; (8006824 <UART_SetConfig+0x148>)
 800672c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800672e:	400a      	ands	r2, r1
 8006730:	2180      	movs	r1, #128	; 0x80
 8006732:	3a01      	subs	r2, #1
 8006734:	0209      	lsls	r1, r1, #8
 8006736:	2a02      	cmp	r2, #2
 8006738:	d85f      	bhi.n	80067fa <UART_SetConfig+0x11e>
 800673a:	483b      	ldr	r0, [pc, #236]	; (8006828 <UART_SetConfig+0x14c>)
 800673c:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800673e:	428b      	cmp	r3, r1
 8006740:	d014      	beq.n	800676c <UART_SetConfig+0x90>
    switch (clocksource)
 8006742:	2808      	cmp	r0, #8
 8006744:	d857      	bhi.n	80067f6 <UART_SetConfig+0x11a>
 8006746:	f7f9 fce3 	bl	8000110 <__gnu_thumb1_case_uqi>
 800674a:	560c      	.short	0x560c
 800674c:	56515654 	.word	0x56515654
 8006750:	5656      	.short	0x5656
 8006752:	3b          	.byte	0x3b
 8006753:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006754:	4935      	ldr	r1, [pc, #212]	; (800682c <UART_SetConfig+0x150>)
 8006756:	428a      	cmp	r2, r1
 8006758:	d14d      	bne.n	80067f6 <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800675a:	2280      	movs	r2, #128	; 0x80
 800675c:	0212      	lsls	r2, r2, #8
 800675e:	4293      	cmp	r3, r2
 8006760:	d04d      	beq.n	80067fe <UART_SetConfig+0x122>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006762:	f7ff fecb 	bl	80064fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006766:	2800      	cmp	r0, #0
 8006768:	d04d      	beq.n	8006806 <UART_SetConfig+0x12a>
 800676a:	e02b      	b.n	80067c4 <UART_SetConfig+0xe8>
    switch (clocksource)
 800676c:	2808      	cmp	r0, #8
 800676e:	d842      	bhi.n	80067f6 <UART_SetConfig+0x11a>
 8006770:	f7f9 fcce 	bl	8000110 <__gnu_thumb1_case_uqi>
 8006774:	41084145 	.word	0x41084145
 8006778:	41414105 	.word	0x41414105
 800677c:	09          	.byte	0x09
 800677d:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 800677e:	f7ff fdc9 	bl	8006314 <HAL_RCC_GetSysClockFreq>
 8006782:	e03e      	b.n	8006802 <UART_SetConfig+0x126>
    switch (clocksource)
 8006784:	4b2a      	ldr	r3, [pc, #168]	; (8006830 <UART_SetConfig+0x154>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006786:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006788:	492a      	ldr	r1, [pc, #168]	; (8006834 <UART_SetConfig+0x158>)
 800678a:	0052      	lsls	r2, r2, #1
 800678c:	5a51      	ldrh	r1, [r2, r1]
 800678e:	0018      	movs	r0, r3
 8006790:	f7f9 fcd2 	bl	8000138 <__udivsi3>
 8006794:	6865      	ldr	r5, [r4, #4]
 8006796:	0040      	lsls	r0, r0, #1
 8006798:	086b      	lsrs	r3, r5, #1
 800679a:	18c0      	adds	r0, r0, r3
 800679c:	0029      	movs	r1, r5
 800679e:	f7f9 fccb 	bl	8000138 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a2:	0002      	movs	r2, r0
 80067a4:	4b24      	ldr	r3, [pc, #144]	; (8006838 <UART_SetConfig+0x15c>)
 80067a6:	3a10      	subs	r2, #16
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d824      	bhi.n	80067f6 <UART_SetConfig+0x11a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ac:	230f      	movs	r3, #15
 80067ae:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067b0:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067b2:	439a      	bics	r2, r3
 80067b4:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067b6:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80067b8:	6822      	ldr	r2, [r4, #0]
 80067ba:	4318      	orrs	r0, r3
 80067bc:	60d0      	str	r0, [r2, #12]
 80067be:	e022      	b.n	8006806 <UART_SetConfig+0x12a>
    switch (clocksource)
 80067c0:	2080      	movs	r0, #128	; 0x80
 80067c2:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067c6:	4a1b      	ldr	r2, [pc, #108]	; (8006834 <UART_SetConfig+0x158>)
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	5a99      	ldrh	r1, [r3, r2]
 80067cc:	f7f9 fcb4 	bl	8000138 <__udivsi3>
 80067d0:	6865      	ldr	r5, [r4, #4]
 80067d2:	086b      	lsrs	r3, r5, #1
 80067d4:	18c0      	adds	r0, r0, r3
 80067d6:	0029      	movs	r1, r5
 80067d8:	f7f9 fcae 	bl	8000138 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067dc:	0002      	movs	r2, r0
 80067de:	4b16      	ldr	r3, [pc, #88]	; (8006838 <UART_SetConfig+0x15c>)
 80067e0:	3a10      	subs	r2, #16
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d807      	bhi.n	80067f6 <UART_SetConfig+0x11a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	60d8      	str	r0, [r3, #12]
 80067ea:	e00c      	b.n	8006806 <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetSysClockFreq();
 80067ec:	f7ff fd92 	bl	8006314 <HAL_RCC_GetSysClockFreq>
        break;
 80067f0:	e7b9      	b.n	8006766 <UART_SetConfig+0x8a>
        pclk = (uint32_t) HSI_VALUE;
 80067f2:	480f      	ldr	r0, [pc, #60]	; (8006830 <UART_SetConfig+0x154>)
 80067f4:	e7e6      	b.n	80067c4 <UART_SetConfig+0xe8>
    switch (clocksource)
 80067f6:	2001      	movs	r0, #1
 80067f8:	e006      	b.n	8006808 <UART_SetConfig+0x12c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067fa:	428b      	cmp	r3, r1
 80067fc:	d1b1      	bne.n	8006762 <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 80067fe:	f7ff fe7d 	bl	80064fc <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8006802:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8006804:	d1bf      	bne.n	8006786 <UART_SetConfig+0xaa>
 8006806:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8006808:	4b0c      	ldr	r3, [pc, #48]	; (800683c <UART_SetConfig+0x160>)
 800680a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800680c:	2300      	movs	r3, #0
 800680e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8006810:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006812:	bd70      	pop	{r4, r5, r6, pc}
 8006814:	cfff69f3 	.word	0xcfff69f3
 8006818:	ffffcfff 	.word	0xffffcfff
 800681c:	11fff4ff 	.word	0x11fff4ff
 8006820:	40013800 	.word	0x40013800
 8006824:	40021000 	.word	0x40021000
 8006828:	0800f1bc 	.word	0x0800f1bc
 800682c:	40004400 	.word	0x40004400
 8006830:	00f42400 	.word	0x00f42400
 8006834:	0800f1c0 	.word	0x0800f1c0
 8006838:	0000ffef 	.word	0x0000ffef
 800683c:	00010001 	.word	0x00010001

08006840 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006840:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8006842:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006844:	071a      	lsls	r2, r3, #28
 8006846:	d506      	bpl.n	8006856 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006848:	6801      	ldr	r1, [r0, #0]
 800684a:	4c28      	ldr	r4, [pc, #160]	; (80068ec <UART_AdvFeatureConfig+0xac>)
 800684c:	684a      	ldr	r2, [r1, #4]
 800684e:	4022      	ands	r2, r4
 8006850:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006852:	4322      	orrs	r2, r4
 8006854:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006856:	07da      	lsls	r2, r3, #31
 8006858:	d506      	bpl.n	8006868 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800685a:	6801      	ldr	r1, [r0, #0]
 800685c:	4c24      	ldr	r4, [pc, #144]	; (80068f0 <UART_AdvFeatureConfig+0xb0>)
 800685e:	684a      	ldr	r2, [r1, #4]
 8006860:	4022      	ands	r2, r4
 8006862:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006864:	4322      	orrs	r2, r4
 8006866:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006868:	079a      	lsls	r2, r3, #30
 800686a:	d506      	bpl.n	800687a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800686c:	6801      	ldr	r1, [r0, #0]
 800686e:	4c21      	ldr	r4, [pc, #132]	; (80068f4 <UART_AdvFeatureConfig+0xb4>)
 8006870:	684a      	ldr	r2, [r1, #4]
 8006872:	4022      	ands	r2, r4
 8006874:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006876:	4322      	orrs	r2, r4
 8006878:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800687a:	075a      	lsls	r2, r3, #29
 800687c:	d506      	bpl.n	800688c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800687e:	6801      	ldr	r1, [r0, #0]
 8006880:	4c1d      	ldr	r4, [pc, #116]	; (80068f8 <UART_AdvFeatureConfig+0xb8>)
 8006882:	684a      	ldr	r2, [r1, #4]
 8006884:	4022      	ands	r2, r4
 8006886:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006888:	4322      	orrs	r2, r4
 800688a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800688c:	06da      	lsls	r2, r3, #27
 800688e:	d506      	bpl.n	800689e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006890:	6801      	ldr	r1, [r0, #0]
 8006892:	4c1a      	ldr	r4, [pc, #104]	; (80068fc <UART_AdvFeatureConfig+0xbc>)
 8006894:	688a      	ldr	r2, [r1, #8]
 8006896:	4022      	ands	r2, r4
 8006898:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800689a:	4322      	orrs	r2, r4
 800689c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800689e:	069a      	lsls	r2, r3, #26
 80068a0:	d506      	bpl.n	80068b0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068a2:	6801      	ldr	r1, [r0, #0]
 80068a4:	4c16      	ldr	r4, [pc, #88]	; (8006900 <UART_AdvFeatureConfig+0xc0>)
 80068a6:	688a      	ldr	r2, [r1, #8]
 80068a8:	4022      	ands	r2, r4
 80068aa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80068ac:	4322      	orrs	r2, r4
 80068ae:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068b0:	065a      	lsls	r2, r3, #25
 80068b2:	d510      	bpl.n	80068d6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b4:	6801      	ldr	r1, [r0, #0]
 80068b6:	4d13      	ldr	r5, [pc, #76]	; (8006904 <UART_AdvFeatureConfig+0xc4>)
 80068b8:	684a      	ldr	r2, [r1, #4]
 80068ba:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80068bc:	402a      	ands	r2, r5
 80068be:	4322      	orrs	r2, r4
 80068c0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068c2:	2280      	movs	r2, #128	; 0x80
 80068c4:	0352      	lsls	r2, r2, #13
 80068c6:	4294      	cmp	r4, r2
 80068c8:	d105      	bne.n	80068d6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068ca:	684a      	ldr	r2, [r1, #4]
 80068cc:	4c0e      	ldr	r4, [pc, #56]	; (8006908 <UART_AdvFeatureConfig+0xc8>)
 80068ce:	4022      	ands	r2, r4
 80068d0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80068d2:	4322      	orrs	r2, r4
 80068d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068d6:	061b      	lsls	r3, r3, #24
 80068d8:	d506      	bpl.n	80068e8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068da:	6802      	ldr	r2, [r0, #0]
 80068dc:	490b      	ldr	r1, [pc, #44]	; (800690c <UART_AdvFeatureConfig+0xcc>)
 80068de:	6853      	ldr	r3, [r2, #4]
 80068e0:	400b      	ands	r3, r1
 80068e2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6053      	str	r3, [r2, #4]
}
 80068e8:	bd30      	pop	{r4, r5, pc}
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	ffff7fff 	.word	0xffff7fff
 80068f0:	fffdffff 	.word	0xfffdffff
 80068f4:	fffeffff 	.word	0xfffeffff
 80068f8:	fffbffff 	.word	0xfffbffff
 80068fc:	ffffefff 	.word	0xffffefff
 8006900:	ffffdfff 	.word	0xffffdfff
 8006904:	ffefffff 	.word	0xffefffff
 8006908:	ff9fffff 	.word	0xff9fffff
 800690c:	fff7ffff 	.word	0xfff7ffff

08006910 <UART_WaitOnFlagUntilTimeout>:
{
 8006910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006912:	0004      	movs	r4, r0
 8006914:	000d      	movs	r5, r1
 8006916:	0017      	movs	r7, r2
 8006918:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800691a:	6822      	ldr	r2, [r4, #0]
 800691c:	69d3      	ldr	r3, [r2, #28]
 800691e:	402b      	ands	r3, r5
 8006920:	1b5b      	subs	r3, r3, r5
 8006922:	4259      	negs	r1, r3
 8006924:	414b      	adcs	r3, r1
 8006926:	42bb      	cmp	r3, r7
 8006928:	d001      	beq.n	800692e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800692a:	2000      	movs	r0, #0
 800692c:	e027      	b.n	800697e <UART_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 800692e:	9b08      	ldr	r3, [sp, #32]
 8006930:	3301      	adds	r3, #1
 8006932:	d0f3      	beq.n	800691c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006934:	f7fe fbe2 	bl	80050fc <HAL_GetTick>
 8006938:	9b00      	ldr	r3, [sp, #0]
 800693a:	1ac0      	subs	r0, r0, r3
 800693c:	9b08      	ldr	r3, [sp, #32]
 800693e:	4298      	cmp	r0, r3
 8006940:	d82e      	bhi.n	80069a0 <UART_WaitOnFlagUntilTimeout+0x90>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d02c      	beq.n	80069a0 <UART_WaitOnFlagUntilTimeout+0x90>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006946:	2104      	movs	r1, #4
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	420a      	tst	r2, r1
 800694e:	d0e4      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0xa>
 8006950:	002a      	movs	r2, r5
 8006952:	313c      	adds	r1, #60	; 0x3c
 8006954:	3a40      	subs	r2, #64	; 0x40
 8006956:	438a      	bics	r2, r1
 8006958:	d0df      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800695a:	69da      	ldr	r2, [r3, #28]
 800695c:	2608      	movs	r6, #8
 800695e:	0011      	movs	r1, r2
 8006960:	4031      	ands	r1, r6
 8006962:	9101      	str	r1, [sp, #4]
 8006964:	4232      	tst	r2, r6
 8006966:	d00b      	beq.n	8006980 <UART_WaitOnFlagUntilTimeout+0x70>
          UART_EndRxTransfer(huart);
 8006968:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800696a:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 800696c:	f7ff fe84 	bl	8006678 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006970:	0023      	movs	r3, r4
 8006972:	3390      	adds	r3, #144	; 0x90
 8006974:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 8006976:	2300      	movs	r3, #0
          return HAL_ERROR;
 8006978:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 800697a:	3484      	adds	r4, #132	; 0x84
 800697c:	7023      	strb	r3, [r4, #0]
}
 800697e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006980:	2280      	movs	r2, #128	; 0x80
 8006982:	69d9      	ldr	r1, [r3, #28]
 8006984:	0112      	lsls	r2, r2, #4
 8006986:	4211      	tst	r1, r2
 8006988:	d0c7      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800698a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800698c:	0020      	movs	r0, r4
 800698e:	f7ff fe73 	bl	8006678 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006992:	0023      	movs	r3, r4
 8006994:	2220      	movs	r2, #32
 8006996:	3390      	adds	r3, #144	; 0x90
 8006998:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	3484      	adds	r4, #132	; 0x84
 800699e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80069a0:	2003      	movs	r0, #3
 80069a2:	e7ec      	b.n	800697e <UART_WaitOnFlagUntilTimeout+0x6e>

080069a4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a4:	0003      	movs	r3, r0
{
 80069a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a8:	2700      	movs	r7, #0
{
 80069aa:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ac:	3390      	adds	r3, #144	; 0x90
 80069ae:	601f      	str	r7, [r3, #0]
  tickstart = HAL_GetTick();
 80069b0:	f7fe fba4 	bl	80050fc <HAL_GetTick>
 80069b4:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069b6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80069b8:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3684      	adds	r6, #132	; 0x84
 80069be:	071b      	lsls	r3, r3, #28
 80069c0:	d51c      	bpl.n	80069fc <UART_CheckIdleState+0x58>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069c2:	2180      	movs	r1, #128	; 0x80
 80069c4:	4b28      	ldr	r3, [pc, #160]	; (8006a68 <UART_CheckIdleState+0xc4>)
 80069c6:	003a      	movs	r2, r7
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	0389      	lsls	r1, r1, #14
 80069cc:	0003      	movs	r3, r0
 80069ce:	0020      	movs	r0, r4
 80069d0:	f7ff ff9e 	bl	8006910 <UART_WaitOnFlagUntilTimeout>
 80069d4:	42b8      	cmp	r0, r7
 80069d6:	d011      	beq.n	80069fc <UART_CheckIdleState+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069d8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069dc:	2301      	movs	r3, #1
 80069de:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069e2:	2080      	movs	r0, #128	; 0x80
 80069e4:	6822      	ldr	r2, [r4, #0]
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	4383      	bics	r3, r0
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80069f0:	2320      	movs	r3, #32
 80069f2:	3488      	adds	r4, #136	; 0x88
 80069f4:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(huart);
 80069f6:	7037      	strb	r7, [r6, #0]
      return HAL_TIMEOUT;
 80069f8:	2003      	movs	r0, #3
}
 80069fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069fc:	0027      	movs	r7, r4
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	378c      	adds	r7, #140	; 0x8c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	075b      	lsls	r3, r3, #29
 8006a06:	d525      	bpl.n	8006a54 <UART_CheckIdleState+0xb0>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a08:	2180      	movs	r1, #128	; 0x80
 8006a0a:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <UART_CheckIdleState+0xc4>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	0020      	movs	r0, r4
 8006a12:	002b      	movs	r3, r5
 8006a14:	03c9      	lsls	r1, r1, #15
 8006a16:	f7ff ff7b 	bl	8006910 <UART_WaitOnFlagUntilTimeout>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d01a      	beq.n	8006a54 <UART_CheckIdleState+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a1e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a22:	2201      	movs	r2, #1
 8006a24:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a28:	6821      	ldr	r1, [r4, #0]
 8006a2a:	4d10      	ldr	r5, [pc, #64]	; (8006a6c <UART_CheckIdleState+0xc8>)
 8006a2c:	680b      	ldr	r3, [r1, #0]
 8006a2e:	402b      	ands	r3, r5
 8006a30:	600b      	str	r3, [r1, #0]
 8006a32:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a36:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3e:	6821      	ldr	r1, [r4, #0]
 8006a40:	688b      	ldr	r3, [r1, #8]
 8006a42:	4393      	bics	r3, r2
 8006a44:	608b      	str	r3, [r1, #8]
 8006a46:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8006a4a:	2320      	movs	r3, #32
 8006a4c:	603b      	str	r3, [r7, #0]
      __HAL_UNLOCK(huart);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	7033      	strb	r3, [r6, #0]
 8006a52:	e7d1      	b.n	80069f8 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8006a54:	0022      	movs	r2, r4
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a56:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006a58:	2320      	movs	r3, #32
 8006a5a:	3288      	adds	r2, #136	; 0x88
 8006a5c:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8006a5e:	603b      	str	r3, [r7, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a60:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a62:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8006a64:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 8006a66:	e7c8      	b.n	80069fa <UART_CheckIdleState+0x56>
 8006a68:	01ffffff 	.word	0x01ffffff
 8006a6c:	fffffedf 	.word	0xfffffedf

08006a70 <HAL_UART_Init>:
{
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8006a74:	d101      	bne.n	8006a7a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8006a76:	2001      	movs	r0, #1
}
 8006a78:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006a7a:	0005      	movs	r5, r0
 8006a7c:	3588      	adds	r5, #136	; 0x88
 8006a7e:	682b      	ldr	r3, [r5, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d104      	bne.n	8006a8e <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8006a84:	0002      	movs	r2, r0
 8006a86:	3284      	adds	r2, #132	; 0x84
 8006a88:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8006a8a:	f7fe f923 	bl	8004cd4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8006a8e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006a90:	2101      	movs	r1, #1
 8006a92:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006a94:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8006a96:	6813      	ldr	r3, [r2, #0]
 8006a98:	438b      	bics	r3, r1
 8006a9a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8006aa2:	0020      	movs	r0, r4
 8006aa4:	f7ff fecc 	bl	8006840 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aa8:	0020      	movs	r0, r4
 8006aaa:	f7ff fe17 	bl	80066dc <UART_SetConfig>
 8006aae:	2801      	cmp	r0, #1
 8006ab0:	d0e1      	beq.n	8006a76 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	4907      	ldr	r1, [pc, #28]	; (8006ad4 <HAL_UART_Init+0x64>)
 8006ab6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8006ab8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aba:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006abc:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	438a      	bics	r2, r1
 8006ac4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	6819      	ldr	r1, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006ace:	f7ff ff69 	bl	80069a4 <UART_CheckIdleState>
 8006ad2:	e7d1      	b.n	8006a78 <HAL_UART_Init+0x8>
 8006ad4:	ffffb7ff 	.word	0xffffb7ff

08006ad8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ada:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8006adc:	0004      	movs	r4, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d102      	bne.n	8006ae8 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8006ae2:	4b0d      	ldr	r3, [pc, #52]	; (8006b18 <UARTEx_SetNbDataToProcess+0x40>)
 8006ae4:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ae8:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006aea:	4e0c      	ldr	r6, [pc, #48]	; (8006b1c <UARTEx_SetNbDataToProcess+0x44>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006aec:	689f      	ldr	r7, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006aee:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006af0:	4d0b      	ldr	r5, [pc, #44]	; (8006b20 <UARTEx_SetNbDataToProcess+0x48>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006af2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006af4:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006af6:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006af8:	00c0      	lsls	r0, r0, #3
 8006afa:	f7f9 fba7 	bl	800024c <__divsi3>
 8006afe:	0023      	movs	r3, r4
 8006b00:	336a      	adds	r3, #106	; 0x6a
 8006b02:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b04:	013b      	lsls	r3, r7, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b06:	0f5b      	lsrs	r3, r3, #29
 8006b08:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b0a:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b0c:	00c0      	lsls	r0, r0, #3
 8006b0e:	f7f9 fb9d 	bl	800024c <__divsi3>
 8006b12:	3468      	adds	r4, #104	; 0x68
 8006b14:	8020      	strh	r0, [r4, #0]
}
 8006b16:	e7e6      	b.n	8006ae6 <UARTEx_SetNbDataToProcess+0xe>
 8006b18:	00010001 	.word	0x00010001
 8006b1c:	0800f1e0 	.word	0x0800f1e0
 8006b20:	0800f1d8 	.word	0x0800f1d8

08006b24 <HAL_UARTEx_DisableFifoMode>:
{
 8006b24:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8006b26:	0004      	movs	r4, r0
 8006b28:	3484      	adds	r4, #132	; 0x84
 8006b2a:	7822      	ldrb	r2, [r4, #0]
{
 8006b2c:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8006b2e:	2002      	movs	r0, #2
 8006b30:	2a01      	cmp	r2, #1
 8006b32:	d011      	beq.n	8006b58 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8006b34:	001d      	movs	r5, r3
 8006b36:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006b38:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8006b3a:	3588      	adds	r5, #136	; 0x88
 8006b3c:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006b42:	6810      	ldr	r0, [r2, #0]
 8006b44:	43b0      	bics	r0, r6
 8006b46:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b48:	4804      	ldr	r0, [pc, #16]	; (8006b5c <HAL_UARTEx_DisableFifoMode+0x38>)
 8006b4a:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 8006b50:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b52:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006b54:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 8006b56:	7020      	strb	r0, [r4, #0]
}
 8006b58:	bd70      	pop	{r4, r5, r6, pc}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	dfffffff 	.word	0xdfffffff

08006b60 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8006b64:	0025      	movs	r5, r4
 8006b66:	3584      	adds	r5, #132	; 0x84
 8006b68:	782a      	ldrb	r2, [r5, #0]
{
 8006b6a:	0008      	movs	r0, r1
  __HAL_LOCK(huart);
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	2a01      	cmp	r2, #1
 8006b70:	d018      	beq.n	8006ba4 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8006b72:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8006b74:	0026      	movs	r6, r4
  __HAL_LOCK(huart);
 8006b76:	7029      	strb	r1, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b78:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006b7a:	3688      	adds	r6, #136	; 0x88
 8006b7c:	3322      	adds	r3, #34	; 0x22
 8006b7e:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b80:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006b82:	6813      	ldr	r3, [r2, #0]
 8006b84:	438b      	bics	r3, r1
 8006b86:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b88:	6893      	ldr	r3, [r2, #8]
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	08d9      	lsrs	r1, r3, #3
 8006b8e:	4301      	orrs	r1, r0
 8006b90:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006b92:	0020      	movs	r0, r4
 8006b94:	f7ff ffa0 	bl	8006ad8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006b9c:	2320      	movs	r3, #32
 8006b9e:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	702b      	strb	r3, [r5, #0]
}
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ba8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8006baa:	0005      	movs	r5, r0
 8006bac:	3584      	adds	r5, #132	; 0x84
 8006bae:	782b      	ldrb	r3, [r5, #0]
{
 8006bb0:	0004      	movs	r4, r0
 8006bb2:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8006bb4:	2002      	movs	r0, #2
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d018      	beq.n	8006bec <HAL_UARTEx_SetRxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 8006bba:	0026      	movs	r6, r4
 8006bbc:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8006bbe:	3801      	subs	r0, #1
 8006bc0:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006bc2:	3688      	adds	r6, #136	; 0x88
 8006bc4:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006bca:	6819      	ldr	r1, [r3, #0]
 8006bcc:	4381      	bics	r1, r0
 8006bce:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bd0:	6899      	ldr	r1, [r3, #8]
 8006bd2:	4807      	ldr	r0, [pc, #28]	; (8006bf0 <HAL_UARTEx_SetRxFifoThreshold+0x48>)
 8006bd4:	4001      	ands	r1, r0
 8006bd6:	4311      	orrs	r1, r2
  UARTEx_SetNbDataToProcess(huart);
 8006bd8:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bda:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006bdc:	f7ff ff7c 	bl	8006ad8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006be0:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8006be2:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006be4:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006be6:	2320      	movs	r3, #32
 8006be8:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8006bea:	7028      	strb	r0, [r5, #0]
}
 8006bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	f1ffffff 	.word	0xf1ffffff

08006bf4 <__errno>:
 8006bf4:	4b01      	ldr	r3, [pc, #4]	; (8006bfc <__errno+0x8>)
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	4770      	bx	lr
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	200000a8 	.word	0x200000a8

08006c00 <__libc_init_array>:
 8006c00:	b570      	push	{r4, r5, r6, lr}
 8006c02:	2600      	movs	r6, #0
 8006c04:	4d0c      	ldr	r5, [pc, #48]	; (8006c38 <__libc_init_array+0x38>)
 8006c06:	4c0d      	ldr	r4, [pc, #52]	; (8006c3c <__libc_init_array+0x3c>)
 8006c08:	1b64      	subs	r4, r4, r5
 8006c0a:	10a4      	asrs	r4, r4, #2
 8006c0c:	42a6      	cmp	r6, r4
 8006c0e:	d109      	bne.n	8006c24 <__libc_init_array+0x24>
 8006c10:	2600      	movs	r6, #0
 8006c12:	f004 fa13 	bl	800b03c <_init>
 8006c16:	4d0a      	ldr	r5, [pc, #40]	; (8006c40 <__libc_init_array+0x40>)
 8006c18:	4c0a      	ldr	r4, [pc, #40]	; (8006c44 <__libc_init_array+0x44>)
 8006c1a:	1b64      	subs	r4, r4, r5
 8006c1c:	10a4      	asrs	r4, r4, #2
 8006c1e:	42a6      	cmp	r6, r4
 8006c20:	d105      	bne.n	8006c2e <__libc_init_array+0x2e>
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	00b3      	lsls	r3, r6, #2
 8006c26:	58eb      	ldr	r3, [r5, r3]
 8006c28:	4798      	blx	r3
 8006c2a:	3601      	adds	r6, #1
 8006c2c:	e7ee      	b.n	8006c0c <__libc_init_array+0xc>
 8006c2e:	00b3      	lsls	r3, r6, #2
 8006c30:	58eb      	ldr	r3, [r5, r3]
 8006c32:	4798      	blx	r3
 8006c34:	3601      	adds	r6, #1
 8006c36:	e7f2      	b.n	8006c1e <__libc_init_array+0x1e>
 8006c38:	0800f5f8 	.word	0x0800f5f8
 8006c3c:	0800f5f8 	.word	0x0800f5f8
 8006c40:	0800f5f8 	.word	0x0800f5f8
 8006c44:	0800f5fc 	.word	0x0800f5fc

08006c48 <memcpy>:
 8006c48:	2300      	movs	r3, #0
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d100      	bne.n	8006c52 <memcpy+0xa>
 8006c50:	bd10      	pop	{r4, pc}
 8006c52:	5ccc      	ldrb	r4, [r1, r3]
 8006c54:	54c4      	strb	r4, [r0, r3]
 8006c56:	3301      	adds	r3, #1
 8006c58:	e7f8      	b.n	8006c4c <memcpy+0x4>

08006c5a <memset>:
 8006c5a:	0003      	movs	r3, r0
 8006c5c:	1882      	adds	r2, r0, r2
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d100      	bne.n	8006c64 <memset+0xa>
 8006c62:	4770      	bx	lr
 8006c64:	7019      	strb	r1, [r3, #0]
 8006c66:	3301      	adds	r3, #1
 8006c68:	e7f9      	b.n	8006c5e <memset+0x4>

08006c6a <__cvt>:
 8006c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c6c:	001e      	movs	r6, r3
 8006c6e:	2300      	movs	r3, #0
 8006c70:	0014      	movs	r4, r2
 8006c72:	b08b      	sub	sp, #44	; 0x2c
 8006c74:	429e      	cmp	r6, r3
 8006c76:	da04      	bge.n	8006c82 <__cvt+0x18>
 8006c78:	2180      	movs	r1, #128	; 0x80
 8006c7a:	0609      	lsls	r1, r1, #24
 8006c7c:	1873      	adds	r3, r6, r1
 8006c7e:	001e      	movs	r6, r3
 8006c80:	232d      	movs	r3, #45	; 0x2d
 8006c82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c84:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006c86:	7013      	strb	r3, [r2, #0]
 8006c88:	2320      	movs	r3, #32
 8006c8a:	2203      	movs	r2, #3
 8006c8c:	439f      	bics	r7, r3
 8006c8e:	2f46      	cmp	r7, #70	; 0x46
 8006c90:	d007      	beq.n	8006ca2 <__cvt+0x38>
 8006c92:	003b      	movs	r3, r7
 8006c94:	3b45      	subs	r3, #69	; 0x45
 8006c96:	4259      	negs	r1, r3
 8006c98:	414b      	adcs	r3, r1
 8006c9a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006c9c:	3a01      	subs	r2, #1
 8006c9e:	18cb      	adds	r3, r1, r3
 8006ca0:	9310      	str	r3, [sp, #64]	; 0x40
 8006ca2:	ab09      	add	r3, sp, #36	; 0x24
 8006ca4:	9304      	str	r3, [sp, #16]
 8006ca6:	ab08      	add	r3, sp, #32
 8006ca8:	9303      	str	r3, [sp, #12]
 8006caa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006cac:	9200      	str	r2, [sp, #0]
 8006cae:	9302      	str	r3, [sp, #8]
 8006cb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cb2:	0022      	movs	r2, r4
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	0033      	movs	r3, r6
 8006cb8:	f000 fcf2 	bl	80076a0 <_dtoa_r>
 8006cbc:	0005      	movs	r5, r0
 8006cbe:	2f47      	cmp	r7, #71	; 0x47
 8006cc0:	d102      	bne.n	8006cc8 <__cvt+0x5e>
 8006cc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cc4:	07db      	lsls	r3, r3, #31
 8006cc6:	d528      	bpl.n	8006d1a <__cvt+0xb0>
 8006cc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cca:	18eb      	adds	r3, r5, r3
 8006ccc:	9307      	str	r3, [sp, #28]
 8006cce:	2f46      	cmp	r7, #70	; 0x46
 8006cd0:	d114      	bne.n	8006cfc <__cvt+0x92>
 8006cd2:	782b      	ldrb	r3, [r5, #0]
 8006cd4:	2b30      	cmp	r3, #48	; 0x30
 8006cd6:	d10c      	bne.n	8006cf2 <__cvt+0x88>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2300      	movs	r3, #0
 8006cdc:	0020      	movs	r0, r4
 8006cde:	0031      	movs	r1, r6
 8006ce0:	f7f9 fbb0 	bl	8000444 <__aeabi_dcmpeq>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d104      	bne.n	8006cf2 <__cvt+0x88>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cec:	1a9b      	subs	r3, r3, r2
 8006cee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006cf4:	9a07      	ldr	r2, [sp, #28]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	18d3      	adds	r3, r2, r3
 8006cfa:	9307      	str	r3, [sp, #28]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2300      	movs	r3, #0
 8006d00:	0020      	movs	r0, r4
 8006d02:	0031      	movs	r1, r6
 8006d04:	f7f9 fb9e 	bl	8000444 <__aeabi_dcmpeq>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d001      	beq.n	8006d10 <__cvt+0xa6>
 8006d0c:	9b07      	ldr	r3, [sp, #28]
 8006d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d10:	2230      	movs	r2, #48	; 0x30
 8006d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d14:	9907      	ldr	r1, [sp, #28]
 8006d16:	428b      	cmp	r3, r1
 8006d18:	d306      	bcc.n	8006d28 <__cvt+0xbe>
 8006d1a:	0028      	movs	r0, r5
 8006d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d20:	1b5b      	subs	r3, r3, r5
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	b00b      	add	sp, #44	; 0x2c
 8006d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d28:	1c59      	adds	r1, r3, #1
 8006d2a:	9109      	str	r1, [sp, #36]	; 0x24
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	e7f0      	b.n	8006d12 <__cvt+0xa8>

08006d30 <__exponent>:
 8006d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d32:	1c83      	adds	r3, r0, #2
 8006d34:	b087      	sub	sp, #28
 8006d36:	9303      	str	r3, [sp, #12]
 8006d38:	0005      	movs	r5, r0
 8006d3a:	000c      	movs	r4, r1
 8006d3c:	232b      	movs	r3, #43	; 0x2b
 8006d3e:	7002      	strb	r2, [r0, #0]
 8006d40:	2900      	cmp	r1, #0
 8006d42:	da01      	bge.n	8006d48 <__exponent+0x18>
 8006d44:	424c      	negs	r4, r1
 8006d46:	3302      	adds	r3, #2
 8006d48:	706b      	strb	r3, [r5, #1]
 8006d4a:	2c09      	cmp	r4, #9
 8006d4c:	dd31      	ble.n	8006db2 <__exponent+0x82>
 8006d4e:	270a      	movs	r7, #10
 8006d50:	ab04      	add	r3, sp, #16
 8006d52:	1dde      	adds	r6, r3, #7
 8006d54:	0020      	movs	r0, r4
 8006d56:	0039      	movs	r1, r7
 8006d58:	9601      	str	r6, [sp, #4]
 8006d5a:	f7f9 fb5d 	bl	8000418 <__aeabi_idivmod>
 8006d5e:	3e01      	subs	r6, #1
 8006d60:	3130      	adds	r1, #48	; 0x30
 8006d62:	0020      	movs	r0, r4
 8006d64:	7031      	strb	r1, [r6, #0]
 8006d66:	0039      	movs	r1, r7
 8006d68:	9402      	str	r4, [sp, #8]
 8006d6a:	f7f9 fa6f 	bl	800024c <__divsi3>
 8006d6e:	9b02      	ldr	r3, [sp, #8]
 8006d70:	0004      	movs	r4, r0
 8006d72:	2b63      	cmp	r3, #99	; 0x63
 8006d74:	dcee      	bgt.n	8006d54 <__exponent+0x24>
 8006d76:	9b01      	ldr	r3, [sp, #4]
 8006d78:	3430      	adds	r4, #48	; 0x30
 8006d7a:	1e9a      	subs	r2, r3, #2
 8006d7c:	0013      	movs	r3, r2
 8006d7e:	9903      	ldr	r1, [sp, #12]
 8006d80:	7014      	strb	r4, [r2, #0]
 8006d82:	a804      	add	r0, sp, #16
 8006d84:	3007      	adds	r0, #7
 8006d86:	4298      	cmp	r0, r3
 8006d88:	d80e      	bhi.n	8006da8 <__exponent+0x78>
 8006d8a:	ab04      	add	r3, sp, #16
 8006d8c:	3307      	adds	r3, #7
 8006d8e:	2000      	movs	r0, #0
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d804      	bhi.n	8006d9e <__exponent+0x6e>
 8006d94:	ab04      	add	r3, sp, #16
 8006d96:	3009      	adds	r0, #9
 8006d98:	18c0      	adds	r0, r0, r3
 8006d9a:	9b01      	ldr	r3, [sp, #4]
 8006d9c:	1ac0      	subs	r0, r0, r3
 8006d9e:	9b03      	ldr	r3, [sp, #12]
 8006da0:	1818      	adds	r0, r3, r0
 8006da2:	1b40      	subs	r0, r0, r5
 8006da4:	b007      	add	sp, #28
 8006da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006da8:	7818      	ldrb	r0, [r3, #0]
 8006daa:	3301      	adds	r3, #1
 8006dac:	7008      	strb	r0, [r1, #0]
 8006dae:	3101      	adds	r1, #1
 8006db0:	e7e7      	b.n	8006d82 <__exponent+0x52>
 8006db2:	2330      	movs	r3, #48	; 0x30
 8006db4:	18e4      	adds	r4, r4, r3
 8006db6:	70ab      	strb	r3, [r5, #2]
 8006db8:	1d28      	adds	r0, r5, #4
 8006dba:	70ec      	strb	r4, [r5, #3]
 8006dbc:	e7f1      	b.n	8006da2 <__exponent+0x72>
	...

08006dc0 <_printf_float>:
 8006dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dc2:	b095      	sub	sp, #84	; 0x54
 8006dc4:	000c      	movs	r4, r1
 8006dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8006dc8:	001e      	movs	r6, r3
 8006dca:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006dcc:	0007      	movs	r7, r0
 8006dce:	f001 fa81 	bl	80082d4 <_localeconv_r>
 8006dd2:	6803      	ldr	r3, [r0, #0]
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	930c      	str	r3, [sp, #48]	; 0x30
 8006dd8:	f7f9 f992 	bl	8000100 <strlen>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	9312      	str	r3, [sp, #72]	; 0x48
 8006de0:	7e23      	ldrb	r3, [r4, #24]
 8006de2:	2207      	movs	r2, #7
 8006de4:	930a      	str	r3, [sp, #40]	; 0x28
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	900e      	str	r0, [sp, #56]	; 0x38
 8006dea:	930d      	str	r3, [sp, #52]	; 0x34
 8006dec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006dee:	682b      	ldr	r3, [r5, #0]
 8006df0:	05c9      	lsls	r1, r1, #23
 8006df2:	d547      	bpl.n	8006e84 <_printf_float+0xc4>
 8006df4:	189b      	adds	r3, r3, r2
 8006df6:	4393      	bics	r3, r2
 8006df8:	001a      	movs	r2, r3
 8006dfa:	3208      	adds	r2, #8
 8006dfc:	602a      	str	r2, [r5, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	64a2      	str	r2, [r4, #72]	; 0x48
 8006e04:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006e06:	2201      	movs	r2, #1
 8006e08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006e0a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006e0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e0e:	006b      	lsls	r3, r5, #1
 8006e10:	085b      	lsrs	r3, r3, #1
 8006e12:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006e16:	4ba7      	ldr	r3, [pc, #668]	; (80070b4 <_printf_float+0x2f4>)
 8006e18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006e1a:	4252      	negs	r2, r2
 8006e1c:	f7fb ff54 	bl	8002cc8 <__aeabi_dcmpun>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d131      	bne.n	8006e88 <_printf_float+0xc8>
 8006e24:	2201      	movs	r2, #1
 8006e26:	4ba3      	ldr	r3, [pc, #652]	; (80070b4 <_printf_float+0x2f4>)
 8006e28:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006e2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006e2c:	4252      	negs	r2, r2
 8006e2e:	f7f9 fb19 	bl	8000464 <__aeabi_dcmple>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d128      	bne.n	8006e88 <_printf_float+0xc8>
 8006e36:	2200      	movs	r2, #0
 8006e38:	2300      	movs	r3, #0
 8006e3a:	0029      	movs	r1, r5
 8006e3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006e3e:	f7f9 fb07 	bl	8000450 <__aeabi_dcmplt>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d003      	beq.n	8006e4e <_printf_float+0x8e>
 8006e46:	0023      	movs	r3, r4
 8006e48:	222d      	movs	r2, #45	; 0x2d
 8006e4a:	3343      	adds	r3, #67	; 0x43
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e50:	4d99      	ldr	r5, [pc, #612]	; (80070b8 <_printf_float+0x2f8>)
 8006e52:	2b47      	cmp	r3, #71	; 0x47
 8006e54:	d900      	bls.n	8006e58 <_printf_float+0x98>
 8006e56:	4d99      	ldr	r5, [pc, #612]	; (80070bc <_printf_float+0x2fc>)
 8006e58:	2303      	movs	r3, #3
 8006e5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	439a      	bics	r2, r3
 8006e62:	2300      	movs	r3, #0
 8006e64:	6022      	str	r2, [r4, #0]
 8006e66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6a:	0021      	movs	r1, r4
 8006e6c:	0038      	movs	r0, r7
 8006e6e:	9600      	str	r6, [sp, #0]
 8006e70:	aa13      	add	r2, sp, #76	; 0x4c
 8006e72:	f000 f9e7 	bl	8007244 <_printf_common>
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	d000      	beq.n	8006e7c <_printf_float+0xbc>
 8006e7a:	e0a2      	b.n	8006fc2 <_printf_float+0x202>
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	4240      	negs	r0, r0
 8006e80:	b015      	add	sp, #84	; 0x54
 8006e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e84:	3307      	adds	r3, #7
 8006e86:	e7b6      	b.n	8006df6 <_printf_float+0x36>
 8006e88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e8a:	002b      	movs	r3, r5
 8006e8c:	0010      	movs	r0, r2
 8006e8e:	0029      	movs	r1, r5
 8006e90:	f7fb ff1a 	bl	8002cc8 <__aeabi_dcmpun>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d00b      	beq.n	8006eb0 <_printf_float+0xf0>
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	da03      	bge.n	8006ea4 <_printf_float+0xe4>
 8006e9c:	0023      	movs	r3, r4
 8006e9e:	222d      	movs	r2, #45	; 0x2d
 8006ea0:	3343      	adds	r3, #67	; 0x43
 8006ea2:	701a      	strb	r2, [r3, #0]
 8006ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea6:	4d86      	ldr	r5, [pc, #536]	; (80070c0 <_printf_float+0x300>)
 8006ea8:	2b47      	cmp	r3, #71	; 0x47
 8006eaa:	d9d5      	bls.n	8006e58 <_printf_float+0x98>
 8006eac:	4d85      	ldr	r5, [pc, #532]	; (80070c4 <_printf_float+0x304>)
 8006eae:	e7d3      	b.n	8006e58 <_printf_float+0x98>
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006eb4:	6863      	ldr	r3, [r4, #4]
 8006eb6:	4391      	bics	r1, r2
 8006eb8:	910f      	str	r1, [sp, #60]	; 0x3c
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	d149      	bne.n	8006f52 <_printf_float+0x192>
 8006ebe:	3307      	adds	r3, #7
 8006ec0:	6063      	str	r3, [r4, #4]
 8006ec2:	2380      	movs	r3, #128	; 0x80
 8006ec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	9206      	str	r2, [sp, #24]
 8006ece:	aa12      	add	r2, sp, #72	; 0x48
 8006ed0:	9205      	str	r2, [sp, #20]
 8006ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ed4:	a908      	add	r1, sp, #32
 8006ed6:	9204      	str	r2, [sp, #16]
 8006ed8:	aa11      	add	r2, sp, #68	; 0x44
 8006eda:	9203      	str	r2, [sp, #12]
 8006edc:	2223      	movs	r2, #35	; 0x23
 8006ede:	6023      	str	r3, [r4, #0]
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	6863      	ldr	r3, [r4, #4]
 8006ee4:	1852      	adds	r2, r2, r1
 8006ee6:	9202      	str	r2, [sp, #8]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	0038      	movs	r0, r7
 8006eec:	002b      	movs	r3, r5
 8006eee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ef0:	f7ff febb 	bl	8006c6a <__cvt>
 8006ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ef6:	0005      	movs	r5, r0
 8006ef8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006efa:	2b47      	cmp	r3, #71	; 0x47
 8006efc:	d108      	bne.n	8006f10 <_printf_float+0x150>
 8006efe:	1ccb      	adds	r3, r1, #3
 8006f00:	db02      	blt.n	8006f08 <_printf_float+0x148>
 8006f02:	6863      	ldr	r3, [r4, #4]
 8006f04:	4299      	cmp	r1, r3
 8006f06:	dd48      	ble.n	8006f9a <_printf_float+0x1da>
 8006f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0a:	3b02      	subs	r3, #2
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f12:	2b65      	cmp	r3, #101	; 0x65
 8006f14:	d824      	bhi.n	8006f60 <_printf_float+0x1a0>
 8006f16:	0020      	movs	r0, r4
 8006f18:	001a      	movs	r2, r3
 8006f1a:	3901      	subs	r1, #1
 8006f1c:	3050      	adds	r0, #80	; 0x50
 8006f1e:	9111      	str	r1, [sp, #68]	; 0x44
 8006f20:	f7ff ff06 	bl	8006d30 <__exponent>
 8006f24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f26:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f28:	1813      	adds	r3, r2, r0
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	2a01      	cmp	r2, #1
 8006f2e:	dc02      	bgt.n	8006f36 <_printf_float+0x176>
 8006f30:	6822      	ldr	r2, [r4, #0]
 8006f32:	07d2      	lsls	r2, r2, #31
 8006f34:	d501      	bpl.n	8006f3a <_printf_float+0x17a>
 8006f36:	3301      	adds	r3, #1
 8006f38:	6123      	str	r3, [r4, #16]
 8006f3a:	2323      	movs	r3, #35	; 0x23
 8006f3c:	aa08      	add	r2, sp, #32
 8006f3e:	189b      	adds	r3, r3, r2
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d100      	bne.n	8006f48 <_printf_float+0x188>
 8006f46:	e78f      	b.n	8006e68 <_printf_float+0xa8>
 8006f48:	0023      	movs	r3, r4
 8006f4a:	222d      	movs	r2, #45	; 0x2d
 8006f4c:	3343      	adds	r3, #67	; 0x43
 8006f4e:	701a      	strb	r2, [r3, #0]
 8006f50:	e78a      	b.n	8006e68 <_printf_float+0xa8>
 8006f52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f54:	2a47      	cmp	r2, #71	; 0x47
 8006f56:	d1b4      	bne.n	8006ec2 <_printf_float+0x102>
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1b2      	bne.n	8006ec2 <_printf_float+0x102>
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	e7af      	b.n	8006ec0 <_printf_float+0x100>
 8006f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f62:	2b66      	cmp	r3, #102	; 0x66
 8006f64:	d11b      	bne.n	8006f9e <_printf_float+0x1de>
 8006f66:	6863      	ldr	r3, [r4, #4]
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	dd0d      	ble.n	8006f88 <_printf_float+0x1c8>
 8006f6c:	6121      	str	r1, [r4, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <_printf_float+0x1b8>
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	07d2      	lsls	r2, r2, #31
 8006f76:	d502      	bpl.n	8006f7e <_printf_float+0x1be>
 8006f78:	3301      	adds	r3, #1
 8006f7a:	1859      	adds	r1, r3, r1
 8006f7c:	6121      	str	r1, [r4, #16]
 8006f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f80:	65a3      	str	r3, [r4, #88]	; 0x58
 8006f82:	2300      	movs	r3, #0
 8006f84:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f86:	e7d8      	b.n	8006f3a <_printf_float+0x17a>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d103      	bne.n	8006f94 <_printf_float+0x1d4>
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	6821      	ldr	r1, [r4, #0]
 8006f90:	4211      	tst	r1, r2
 8006f92:	d000      	beq.n	8006f96 <_printf_float+0x1d6>
 8006f94:	1c9a      	adds	r2, r3, #2
 8006f96:	6122      	str	r2, [r4, #16]
 8006f98:	e7f1      	b.n	8006f7e <_printf_float+0x1be>
 8006f9a:	2367      	movs	r3, #103	; 0x67
 8006f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8006f9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	db06      	blt.n	8006fb4 <_printf_float+0x1f4>
 8006fa6:	6822      	ldr	r2, [r4, #0]
 8006fa8:	6123      	str	r3, [r4, #16]
 8006faa:	07d2      	lsls	r2, r2, #31
 8006fac:	d5e7      	bpl.n	8006f7e <_printf_float+0x1be>
 8006fae:	3301      	adds	r3, #1
 8006fb0:	6123      	str	r3, [r4, #16]
 8006fb2:	e7e4      	b.n	8006f7e <_printf_float+0x1be>
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	dc01      	bgt.n	8006fbe <_printf_float+0x1fe>
 8006fba:	1849      	adds	r1, r1, r1
 8006fbc:	1ac9      	subs	r1, r1, r3
 8006fbe:	1852      	adds	r2, r2, r1
 8006fc0:	e7e9      	b.n	8006f96 <_printf_float+0x1d6>
 8006fc2:	6822      	ldr	r2, [r4, #0]
 8006fc4:	0553      	lsls	r3, r2, #21
 8006fc6:	d407      	bmi.n	8006fd8 <_printf_float+0x218>
 8006fc8:	6923      	ldr	r3, [r4, #16]
 8006fca:	002a      	movs	r2, r5
 8006fcc:	0038      	movs	r0, r7
 8006fce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fd0:	47b0      	blx	r6
 8006fd2:	1c43      	adds	r3, r0, #1
 8006fd4:	d128      	bne.n	8007028 <_printf_float+0x268>
 8006fd6:	e751      	b.n	8006e7c <_printf_float+0xbc>
 8006fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fda:	2b65      	cmp	r3, #101	; 0x65
 8006fdc:	d800      	bhi.n	8006fe0 <_printf_float+0x220>
 8006fde:	e0e1      	b.n	80071a4 <_printf_float+0x3e4>
 8006fe0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006fe2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f7f9 fa2c 	bl	8000444 <__aeabi_dcmpeq>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d031      	beq.n	8007054 <_printf_float+0x294>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	0038      	movs	r0, r7
 8006ff4:	4a34      	ldr	r2, [pc, #208]	; (80070c8 <_printf_float+0x308>)
 8006ff6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ff8:	47b0      	blx	r6
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d100      	bne.n	8007000 <_printf_float+0x240>
 8006ffe:	e73d      	b.n	8006e7c <_printf_float+0xbc>
 8007000:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007002:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007004:	4293      	cmp	r3, r2
 8007006:	db02      	blt.n	800700e <_printf_float+0x24e>
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	07db      	lsls	r3, r3, #31
 800700c:	d50c      	bpl.n	8007028 <_printf_float+0x268>
 800700e:	0038      	movs	r0, r7
 8007010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007012:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007014:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007016:	47b0      	blx	r6
 8007018:	2500      	movs	r5, #0
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	d100      	bne.n	8007020 <_printf_float+0x260>
 800701e:	e72d      	b.n	8006e7c <_printf_float+0xbc>
 8007020:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007022:	3b01      	subs	r3, #1
 8007024:	42ab      	cmp	r3, r5
 8007026:	dc0a      	bgt.n	800703e <_printf_float+0x27e>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	079b      	lsls	r3, r3, #30
 800702c:	d500      	bpl.n	8007030 <_printf_float+0x270>
 800702e:	e106      	b.n	800723e <_printf_float+0x47e>
 8007030:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007032:	68e0      	ldr	r0, [r4, #12]
 8007034:	4298      	cmp	r0, r3
 8007036:	db00      	blt.n	800703a <_printf_float+0x27a>
 8007038:	e722      	b.n	8006e80 <_printf_float+0xc0>
 800703a:	0018      	movs	r0, r3
 800703c:	e720      	b.n	8006e80 <_printf_float+0xc0>
 800703e:	0022      	movs	r2, r4
 8007040:	2301      	movs	r3, #1
 8007042:	0038      	movs	r0, r7
 8007044:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007046:	321a      	adds	r2, #26
 8007048:	47b0      	blx	r6
 800704a:	1c43      	adds	r3, r0, #1
 800704c:	d100      	bne.n	8007050 <_printf_float+0x290>
 800704e:	e715      	b.n	8006e7c <_printf_float+0xbc>
 8007050:	3501      	adds	r5, #1
 8007052:	e7e5      	b.n	8007020 <_printf_float+0x260>
 8007054:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007056:	2b00      	cmp	r3, #0
 8007058:	dc38      	bgt.n	80070cc <_printf_float+0x30c>
 800705a:	2301      	movs	r3, #1
 800705c:	0038      	movs	r0, r7
 800705e:	4a1a      	ldr	r2, [pc, #104]	; (80070c8 <_printf_float+0x308>)
 8007060:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007062:	47b0      	blx	r6
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d100      	bne.n	800706a <_printf_float+0x2aa>
 8007068:	e708      	b.n	8006e7c <_printf_float+0xbc>
 800706a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800706c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800706e:	4313      	orrs	r3, r2
 8007070:	d102      	bne.n	8007078 <_printf_float+0x2b8>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	07db      	lsls	r3, r3, #31
 8007076:	d5d7      	bpl.n	8007028 <_printf_float+0x268>
 8007078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800707a:	0038      	movs	r0, r7
 800707c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800707e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007080:	47b0      	blx	r6
 8007082:	1c43      	adds	r3, r0, #1
 8007084:	d100      	bne.n	8007088 <_printf_float+0x2c8>
 8007086:	e6f9      	b.n	8006e7c <_printf_float+0xbc>
 8007088:	2300      	movs	r3, #0
 800708a:	930a      	str	r3, [sp, #40]	; 0x28
 800708c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800708e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007090:	425b      	negs	r3, r3
 8007092:	4293      	cmp	r3, r2
 8007094:	dc01      	bgt.n	800709a <_printf_float+0x2da>
 8007096:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007098:	e797      	b.n	8006fca <_printf_float+0x20a>
 800709a:	0022      	movs	r2, r4
 800709c:	2301      	movs	r3, #1
 800709e:	0038      	movs	r0, r7
 80070a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070a2:	321a      	adds	r2, #26
 80070a4:	47b0      	blx	r6
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	d100      	bne.n	80070ac <_printf_float+0x2ec>
 80070aa:	e6e7      	b.n	8006e7c <_printf_float+0xbc>
 80070ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ae:	3301      	adds	r3, #1
 80070b0:	e7eb      	b.n	800708a <_printf_float+0x2ca>
 80070b2:	46c0      	nop			; (mov r8, r8)
 80070b4:	7fefffff 	.word	0x7fefffff
 80070b8:	0800f1ec 	.word	0x0800f1ec
 80070bc:	0800f1f0 	.word	0x0800f1f0
 80070c0:	0800f1f4 	.word	0x0800f1f4
 80070c4:	0800f1f8 	.word	0x0800f1f8
 80070c8:	0800f013 	.word	0x0800f013
 80070cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070d0:	920a      	str	r2, [sp, #40]	; 0x28
 80070d2:	429a      	cmp	r2, r3
 80070d4:	dd00      	ble.n	80070d8 <_printf_float+0x318>
 80070d6:	930a      	str	r3, [sp, #40]	; 0x28
 80070d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070da:	2b00      	cmp	r3, #0
 80070dc:	dc3c      	bgt.n	8007158 <_printf_float+0x398>
 80070de:	2300      	movs	r3, #0
 80070e0:	930d      	str	r3, [sp, #52]	; 0x34
 80070e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e4:	43db      	mvns	r3, r3
 80070e6:	17db      	asrs	r3, r3, #31
 80070e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80070ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80070f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f2:	4013      	ands	r3, r2
 80070f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070fa:	4293      	cmp	r3, r2
 80070fc:	dc34      	bgt.n	8007168 <_printf_float+0x3a8>
 80070fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007100:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007102:	4293      	cmp	r3, r2
 8007104:	db3d      	blt.n	8007182 <_printf_float+0x3c2>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	07db      	lsls	r3, r3, #31
 800710a:	d43a      	bmi.n	8007182 <_printf_float+0x3c2>
 800710c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800710e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007110:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	1a52      	subs	r2, r2, r1
 8007116:	920a      	str	r2, [sp, #40]	; 0x28
 8007118:	429a      	cmp	r2, r3
 800711a:	dd00      	ble.n	800711e <_printf_float+0x35e>
 800711c:	930a      	str	r3, [sp, #40]	; 0x28
 800711e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007120:	2b00      	cmp	r3, #0
 8007122:	dc36      	bgt.n	8007192 <_printf_float+0x3d2>
 8007124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007126:	2500      	movs	r5, #0
 8007128:	43db      	mvns	r3, r3
 800712a:	17db      	asrs	r3, r3, #31
 800712c:	930b      	str	r3, [sp, #44]	; 0x2c
 800712e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007130:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007132:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007138:	400a      	ands	r2, r1
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	42ab      	cmp	r3, r5
 800713e:	dc00      	bgt.n	8007142 <_printf_float+0x382>
 8007140:	e772      	b.n	8007028 <_printf_float+0x268>
 8007142:	0022      	movs	r2, r4
 8007144:	2301      	movs	r3, #1
 8007146:	0038      	movs	r0, r7
 8007148:	9909      	ldr	r1, [sp, #36]	; 0x24
 800714a:	321a      	adds	r2, #26
 800714c:	47b0      	blx	r6
 800714e:	1c43      	adds	r3, r0, #1
 8007150:	d100      	bne.n	8007154 <_printf_float+0x394>
 8007152:	e693      	b.n	8006e7c <_printf_float+0xbc>
 8007154:	3501      	adds	r5, #1
 8007156:	e7ea      	b.n	800712e <_printf_float+0x36e>
 8007158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800715a:	002a      	movs	r2, r5
 800715c:	0038      	movs	r0, r7
 800715e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007160:	47b0      	blx	r6
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	d1bb      	bne.n	80070de <_printf_float+0x31e>
 8007166:	e689      	b.n	8006e7c <_printf_float+0xbc>
 8007168:	0022      	movs	r2, r4
 800716a:	2301      	movs	r3, #1
 800716c:	0038      	movs	r0, r7
 800716e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007170:	321a      	adds	r2, #26
 8007172:	47b0      	blx	r6
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d100      	bne.n	800717a <_printf_float+0x3ba>
 8007178:	e680      	b.n	8006e7c <_printf_float+0xbc>
 800717a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800717c:	3301      	adds	r3, #1
 800717e:	930d      	str	r3, [sp, #52]	; 0x34
 8007180:	e7b3      	b.n	80070ea <_printf_float+0x32a>
 8007182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007184:	0038      	movs	r0, r7
 8007186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007188:	9909      	ldr	r1, [sp, #36]	; 0x24
 800718a:	47b0      	blx	r6
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d1bd      	bne.n	800710c <_printf_float+0x34c>
 8007190:	e674      	b.n	8006e7c <_printf_float+0xbc>
 8007192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007194:	0038      	movs	r0, r7
 8007196:	18ea      	adds	r2, r5, r3
 8007198:	9909      	ldr	r1, [sp, #36]	; 0x24
 800719a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719c:	47b0      	blx	r6
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	d1c0      	bne.n	8007124 <_printf_float+0x364>
 80071a2:	e66b      	b.n	8006e7c <_printf_float+0xbc>
 80071a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	dc02      	bgt.n	80071b0 <_printf_float+0x3f0>
 80071aa:	2301      	movs	r3, #1
 80071ac:	421a      	tst	r2, r3
 80071ae:	d034      	beq.n	800721a <_printf_float+0x45a>
 80071b0:	2301      	movs	r3, #1
 80071b2:	002a      	movs	r2, r5
 80071b4:	0038      	movs	r0, r7
 80071b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071b8:	47b0      	blx	r6
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	d100      	bne.n	80071c0 <_printf_float+0x400>
 80071be:	e65d      	b.n	8006e7c <_printf_float+0xbc>
 80071c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071c2:	0038      	movs	r0, r7
 80071c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071c8:	47b0      	blx	r6
 80071ca:	1c43      	adds	r3, r0, #1
 80071cc:	d100      	bne.n	80071d0 <_printf_float+0x410>
 80071ce:	e655      	b.n	8006e7c <_printf_float+0xbc>
 80071d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80071d2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80071d4:	2200      	movs	r2, #0
 80071d6:	2300      	movs	r3, #0
 80071d8:	f7f9 f934 	bl	8000444 <__aeabi_dcmpeq>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d11a      	bne.n	8007216 <_printf_float+0x456>
 80071e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071e2:	1c6a      	adds	r2, r5, #1
 80071e4:	3b01      	subs	r3, #1
 80071e6:	0038      	movs	r0, r7
 80071e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071ea:	47b0      	blx	r6
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	d10e      	bne.n	800720e <_printf_float+0x44e>
 80071f0:	e644      	b.n	8006e7c <_printf_float+0xbc>
 80071f2:	0022      	movs	r2, r4
 80071f4:	2301      	movs	r3, #1
 80071f6:	0038      	movs	r0, r7
 80071f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071fa:	321a      	adds	r2, #26
 80071fc:	47b0      	blx	r6
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	d100      	bne.n	8007204 <_printf_float+0x444>
 8007202:	e63b      	b.n	8006e7c <_printf_float+0xbc>
 8007204:	3501      	adds	r5, #1
 8007206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007208:	3b01      	subs	r3, #1
 800720a:	42ab      	cmp	r3, r5
 800720c:	dcf1      	bgt.n	80071f2 <_printf_float+0x432>
 800720e:	0022      	movs	r2, r4
 8007210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007212:	3250      	adds	r2, #80	; 0x50
 8007214:	e6da      	b.n	8006fcc <_printf_float+0x20c>
 8007216:	2500      	movs	r5, #0
 8007218:	e7f5      	b.n	8007206 <_printf_float+0x446>
 800721a:	002a      	movs	r2, r5
 800721c:	e7e3      	b.n	80071e6 <_printf_float+0x426>
 800721e:	0022      	movs	r2, r4
 8007220:	2301      	movs	r3, #1
 8007222:	0038      	movs	r0, r7
 8007224:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007226:	3219      	adds	r2, #25
 8007228:	47b0      	blx	r6
 800722a:	1c43      	adds	r3, r0, #1
 800722c:	d100      	bne.n	8007230 <_printf_float+0x470>
 800722e:	e625      	b.n	8006e7c <_printf_float+0xbc>
 8007230:	3501      	adds	r5, #1
 8007232:	68e3      	ldr	r3, [r4, #12]
 8007234:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	42ab      	cmp	r3, r5
 800723a:	dcf0      	bgt.n	800721e <_printf_float+0x45e>
 800723c:	e6f8      	b.n	8007030 <_printf_float+0x270>
 800723e:	2500      	movs	r5, #0
 8007240:	e7f7      	b.n	8007232 <_printf_float+0x472>
 8007242:	46c0      	nop			; (mov r8, r8)

08007244 <_printf_common>:
 8007244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007246:	0015      	movs	r5, r2
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	688a      	ldr	r2, [r1, #8]
 800724c:	690b      	ldr	r3, [r1, #16]
 800724e:	000c      	movs	r4, r1
 8007250:	9000      	str	r0, [sp, #0]
 8007252:	4293      	cmp	r3, r2
 8007254:	da00      	bge.n	8007258 <_printf_common+0x14>
 8007256:	0013      	movs	r3, r2
 8007258:	0022      	movs	r2, r4
 800725a:	602b      	str	r3, [r5, #0]
 800725c:	3243      	adds	r2, #67	; 0x43
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	2a00      	cmp	r2, #0
 8007262:	d001      	beq.n	8007268 <_printf_common+0x24>
 8007264:	3301      	adds	r3, #1
 8007266:	602b      	str	r3, [r5, #0]
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	069b      	lsls	r3, r3, #26
 800726c:	d502      	bpl.n	8007274 <_printf_common+0x30>
 800726e:	682b      	ldr	r3, [r5, #0]
 8007270:	3302      	adds	r3, #2
 8007272:	602b      	str	r3, [r5, #0]
 8007274:	6822      	ldr	r2, [r4, #0]
 8007276:	2306      	movs	r3, #6
 8007278:	0017      	movs	r7, r2
 800727a:	401f      	ands	r7, r3
 800727c:	421a      	tst	r2, r3
 800727e:	d027      	beq.n	80072d0 <_printf_common+0x8c>
 8007280:	0023      	movs	r3, r4
 8007282:	3343      	adds	r3, #67	; 0x43
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	1e5a      	subs	r2, r3, #1
 8007288:	4193      	sbcs	r3, r2
 800728a:	6822      	ldr	r2, [r4, #0]
 800728c:	0692      	lsls	r2, r2, #26
 800728e:	d430      	bmi.n	80072f2 <_printf_common+0xae>
 8007290:	0022      	movs	r2, r4
 8007292:	9901      	ldr	r1, [sp, #4]
 8007294:	9800      	ldr	r0, [sp, #0]
 8007296:	9e08      	ldr	r6, [sp, #32]
 8007298:	3243      	adds	r2, #67	; 0x43
 800729a:	47b0      	blx	r6
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d025      	beq.n	80072ec <_printf_common+0xa8>
 80072a0:	2306      	movs	r3, #6
 80072a2:	6820      	ldr	r0, [r4, #0]
 80072a4:	682a      	ldr	r2, [r5, #0]
 80072a6:	68e1      	ldr	r1, [r4, #12]
 80072a8:	2500      	movs	r5, #0
 80072aa:	4003      	ands	r3, r0
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d103      	bne.n	80072b8 <_printf_common+0x74>
 80072b0:	1a8d      	subs	r5, r1, r2
 80072b2:	43eb      	mvns	r3, r5
 80072b4:	17db      	asrs	r3, r3, #31
 80072b6:	401d      	ands	r5, r3
 80072b8:	68a3      	ldr	r3, [r4, #8]
 80072ba:	6922      	ldr	r2, [r4, #16]
 80072bc:	4293      	cmp	r3, r2
 80072be:	dd01      	ble.n	80072c4 <_printf_common+0x80>
 80072c0:	1a9b      	subs	r3, r3, r2
 80072c2:	18ed      	adds	r5, r5, r3
 80072c4:	2700      	movs	r7, #0
 80072c6:	42bd      	cmp	r5, r7
 80072c8:	d120      	bne.n	800730c <_printf_common+0xc8>
 80072ca:	2000      	movs	r0, #0
 80072cc:	e010      	b.n	80072f0 <_printf_common+0xac>
 80072ce:	3701      	adds	r7, #1
 80072d0:	68e3      	ldr	r3, [r4, #12]
 80072d2:	682a      	ldr	r2, [r5, #0]
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	42bb      	cmp	r3, r7
 80072d8:	ddd2      	ble.n	8007280 <_printf_common+0x3c>
 80072da:	0022      	movs	r2, r4
 80072dc:	2301      	movs	r3, #1
 80072de:	9901      	ldr	r1, [sp, #4]
 80072e0:	9800      	ldr	r0, [sp, #0]
 80072e2:	9e08      	ldr	r6, [sp, #32]
 80072e4:	3219      	adds	r2, #25
 80072e6:	47b0      	blx	r6
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d1f0      	bne.n	80072ce <_printf_common+0x8a>
 80072ec:	2001      	movs	r0, #1
 80072ee:	4240      	negs	r0, r0
 80072f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072f2:	2030      	movs	r0, #48	; 0x30
 80072f4:	18e1      	adds	r1, r4, r3
 80072f6:	3143      	adds	r1, #67	; 0x43
 80072f8:	7008      	strb	r0, [r1, #0]
 80072fa:	0021      	movs	r1, r4
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	3145      	adds	r1, #69	; 0x45
 8007300:	7809      	ldrb	r1, [r1, #0]
 8007302:	18a2      	adds	r2, r4, r2
 8007304:	3243      	adds	r2, #67	; 0x43
 8007306:	3302      	adds	r3, #2
 8007308:	7011      	strb	r1, [r2, #0]
 800730a:	e7c1      	b.n	8007290 <_printf_common+0x4c>
 800730c:	0022      	movs	r2, r4
 800730e:	2301      	movs	r3, #1
 8007310:	9901      	ldr	r1, [sp, #4]
 8007312:	9800      	ldr	r0, [sp, #0]
 8007314:	9e08      	ldr	r6, [sp, #32]
 8007316:	321a      	adds	r2, #26
 8007318:	47b0      	blx	r6
 800731a:	1c43      	adds	r3, r0, #1
 800731c:	d0e6      	beq.n	80072ec <_printf_common+0xa8>
 800731e:	3701      	adds	r7, #1
 8007320:	e7d1      	b.n	80072c6 <_printf_common+0x82>
	...

08007324 <_printf_i>:
 8007324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007326:	b08b      	sub	sp, #44	; 0x2c
 8007328:	9206      	str	r2, [sp, #24]
 800732a:	000a      	movs	r2, r1
 800732c:	3243      	adds	r2, #67	; 0x43
 800732e:	9307      	str	r3, [sp, #28]
 8007330:	9005      	str	r0, [sp, #20]
 8007332:	9204      	str	r2, [sp, #16]
 8007334:	7e0a      	ldrb	r2, [r1, #24]
 8007336:	000c      	movs	r4, r1
 8007338:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800733a:	2a78      	cmp	r2, #120	; 0x78
 800733c:	d807      	bhi.n	800734e <_printf_i+0x2a>
 800733e:	2a62      	cmp	r2, #98	; 0x62
 8007340:	d809      	bhi.n	8007356 <_printf_i+0x32>
 8007342:	2a00      	cmp	r2, #0
 8007344:	d100      	bne.n	8007348 <_printf_i+0x24>
 8007346:	e0c1      	b.n	80074cc <_printf_i+0x1a8>
 8007348:	2a58      	cmp	r2, #88	; 0x58
 800734a:	d100      	bne.n	800734e <_printf_i+0x2a>
 800734c:	e08c      	b.n	8007468 <_printf_i+0x144>
 800734e:	0026      	movs	r6, r4
 8007350:	3642      	adds	r6, #66	; 0x42
 8007352:	7032      	strb	r2, [r6, #0]
 8007354:	e022      	b.n	800739c <_printf_i+0x78>
 8007356:	0010      	movs	r0, r2
 8007358:	3863      	subs	r0, #99	; 0x63
 800735a:	2815      	cmp	r0, #21
 800735c:	d8f7      	bhi.n	800734e <_printf_i+0x2a>
 800735e:	f7f8 fee1 	bl	8000124 <__gnu_thumb1_case_shi>
 8007362:	0016      	.short	0x0016
 8007364:	fff6001f 	.word	0xfff6001f
 8007368:	fff6fff6 	.word	0xfff6fff6
 800736c:	001ffff6 	.word	0x001ffff6
 8007370:	fff6fff6 	.word	0xfff6fff6
 8007374:	fff6fff6 	.word	0xfff6fff6
 8007378:	003600a8 	.word	0x003600a8
 800737c:	fff6009a 	.word	0xfff6009a
 8007380:	00b9fff6 	.word	0x00b9fff6
 8007384:	0036fff6 	.word	0x0036fff6
 8007388:	fff6fff6 	.word	0xfff6fff6
 800738c:	009e      	.short	0x009e
 800738e:	0026      	movs	r6, r4
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	3642      	adds	r6, #66	; 0x42
 8007394:	1d11      	adds	r1, r2, #4
 8007396:	6019      	str	r1, [r3, #0]
 8007398:	6813      	ldr	r3, [r2, #0]
 800739a:	7033      	strb	r3, [r6, #0]
 800739c:	2301      	movs	r3, #1
 800739e:	e0a7      	b.n	80074f0 <_printf_i+0x1cc>
 80073a0:	6808      	ldr	r0, [r1, #0]
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	1d0a      	adds	r2, r1, #4
 80073a6:	0605      	lsls	r5, r0, #24
 80073a8:	d50b      	bpl.n	80073c2 <_printf_i+0x9e>
 80073aa:	680d      	ldr	r5, [r1, #0]
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	2d00      	cmp	r5, #0
 80073b0:	da03      	bge.n	80073ba <_printf_i+0x96>
 80073b2:	232d      	movs	r3, #45	; 0x2d
 80073b4:	9a04      	ldr	r2, [sp, #16]
 80073b6:	426d      	negs	r5, r5
 80073b8:	7013      	strb	r3, [r2, #0]
 80073ba:	4b61      	ldr	r3, [pc, #388]	; (8007540 <_printf_i+0x21c>)
 80073bc:	270a      	movs	r7, #10
 80073be:	9303      	str	r3, [sp, #12]
 80073c0:	e01b      	b.n	80073fa <_printf_i+0xd6>
 80073c2:	680d      	ldr	r5, [r1, #0]
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	0641      	lsls	r1, r0, #25
 80073c8:	d5f1      	bpl.n	80073ae <_printf_i+0x8a>
 80073ca:	b22d      	sxth	r5, r5
 80073cc:	e7ef      	b.n	80073ae <_printf_i+0x8a>
 80073ce:	680d      	ldr	r5, [r1, #0]
 80073d0:	6819      	ldr	r1, [r3, #0]
 80073d2:	1d08      	adds	r0, r1, #4
 80073d4:	6018      	str	r0, [r3, #0]
 80073d6:	062e      	lsls	r6, r5, #24
 80073d8:	d501      	bpl.n	80073de <_printf_i+0xba>
 80073da:	680d      	ldr	r5, [r1, #0]
 80073dc:	e003      	b.n	80073e6 <_printf_i+0xc2>
 80073de:	066d      	lsls	r5, r5, #25
 80073e0:	d5fb      	bpl.n	80073da <_printf_i+0xb6>
 80073e2:	680d      	ldr	r5, [r1, #0]
 80073e4:	b2ad      	uxth	r5, r5
 80073e6:	4b56      	ldr	r3, [pc, #344]	; (8007540 <_printf_i+0x21c>)
 80073e8:	2708      	movs	r7, #8
 80073ea:	9303      	str	r3, [sp, #12]
 80073ec:	2a6f      	cmp	r2, #111	; 0x6f
 80073ee:	d000      	beq.n	80073f2 <_printf_i+0xce>
 80073f0:	3702      	adds	r7, #2
 80073f2:	0023      	movs	r3, r4
 80073f4:	2200      	movs	r2, #0
 80073f6:	3343      	adds	r3, #67	; 0x43
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	6863      	ldr	r3, [r4, #4]
 80073fc:	60a3      	str	r3, [r4, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	db03      	blt.n	800740a <_printf_i+0xe6>
 8007402:	2204      	movs	r2, #4
 8007404:	6821      	ldr	r1, [r4, #0]
 8007406:	4391      	bics	r1, r2
 8007408:	6021      	str	r1, [r4, #0]
 800740a:	2d00      	cmp	r5, #0
 800740c:	d102      	bne.n	8007414 <_printf_i+0xf0>
 800740e:	9e04      	ldr	r6, [sp, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00c      	beq.n	800742e <_printf_i+0x10a>
 8007414:	9e04      	ldr	r6, [sp, #16]
 8007416:	0028      	movs	r0, r5
 8007418:	0039      	movs	r1, r7
 800741a:	f7f8 ff13 	bl	8000244 <__aeabi_uidivmod>
 800741e:	9b03      	ldr	r3, [sp, #12]
 8007420:	3e01      	subs	r6, #1
 8007422:	5c5b      	ldrb	r3, [r3, r1]
 8007424:	7033      	strb	r3, [r6, #0]
 8007426:	002b      	movs	r3, r5
 8007428:	0005      	movs	r5, r0
 800742a:	429f      	cmp	r7, r3
 800742c:	d9f3      	bls.n	8007416 <_printf_i+0xf2>
 800742e:	2f08      	cmp	r7, #8
 8007430:	d109      	bne.n	8007446 <_printf_i+0x122>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	07db      	lsls	r3, r3, #31
 8007436:	d506      	bpl.n	8007446 <_printf_i+0x122>
 8007438:	6863      	ldr	r3, [r4, #4]
 800743a:	6922      	ldr	r2, [r4, #16]
 800743c:	4293      	cmp	r3, r2
 800743e:	dc02      	bgt.n	8007446 <_printf_i+0x122>
 8007440:	2330      	movs	r3, #48	; 0x30
 8007442:	3e01      	subs	r6, #1
 8007444:	7033      	strb	r3, [r6, #0]
 8007446:	9b04      	ldr	r3, [sp, #16]
 8007448:	1b9b      	subs	r3, r3, r6
 800744a:	6123      	str	r3, [r4, #16]
 800744c:	9b07      	ldr	r3, [sp, #28]
 800744e:	0021      	movs	r1, r4
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	9805      	ldr	r0, [sp, #20]
 8007454:	9b06      	ldr	r3, [sp, #24]
 8007456:	aa09      	add	r2, sp, #36	; 0x24
 8007458:	f7ff fef4 	bl	8007244 <_printf_common>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d14c      	bne.n	80074fa <_printf_i+0x1d6>
 8007460:	2001      	movs	r0, #1
 8007462:	4240      	negs	r0, r0
 8007464:	b00b      	add	sp, #44	; 0x2c
 8007466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007468:	3145      	adds	r1, #69	; 0x45
 800746a:	700a      	strb	r2, [r1, #0]
 800746c:	4a34      	ldr	r2, [pc, #208]	; (8007540 <_printf_i+0x21c>)
 800746e:	9203      	str	r2, [sp, #12]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	6821      	ldr	r1, [r4, #0]
 8007474:	ca20      	ldmia	r2!, {r5}
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	0608      	lsls	r0, r1, #24
 800747a:	d516      	bpl.n	80074aa <_printf_i+0x186>
 800747c:	07cb      	lsls	r3, r1, #31
 800747e:	d502      	bpl.n	8007486 <_printf_i+0x162>
 8007480:	2320      	movs	r3, #32
 8007482:	4319      	orrs	r1, r3
 8007484:	6021      	str	r1, [r4, #0]
 8007486:	2710      	movs	r7, #16
 8007488:	2d00      	cmp	r5, #0
 800748a:	d1b2      	bne.n	80073f2 <_printf_i+0xce>
 800748c:	2320      	movs	r3, #32
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	439a      	bics	r2, r3
 8007492:	6022      	str	r2, [r4, #0]
 8007494:	e7ad      	b.n	80073f2 <_printf_i+0xce>
 8007496:	2220      	movs	r2, #32
 8007498:	6809      	ldr	r1, [r1, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	6022      	str	r2, [r4, #0]
 800749e:	0022      	movs	r2, r4
 80074a0:	2178      	movs	r1, #120	; 0x78
 80074a2:	3245      	adds	r2, #69	; 0x45
 80074a4:	7011      	strb	r1, [r2, #0]
 80074a6:	4a27      	ldr	r2, [pc, #156]	; (8007544 <_printf_i+0x220>)
 80074a8:	e7e1      	b.n	800746e <_printf_i+0x14a>
 80074aa:	0648      	lsls	r0, r1, #25
 80074ac:	d5e6      	bpl.n	800747c <_printf_i+0x158>
 80074ae:	b2ad      	uxth	r5, r5
 80074b0:	e7e4      	b.n	800747c <_printf_i+0x158>
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	680d      	ldr	r5, [r1, #0]
 80074b6:	1d10      	adds	r0, r2, #4
 80074b8:	6949      	ldr	r1, [r1, #20]
 80074ba:	6018      	str	r0, [r3, #0]
 80074bc:	6813      	ldr	r3, [r2, #0]
 80074be:	062e      	lsls	r6, r5, #24
 80074c0:	d501      	bpl.n	80074c6 <_printf_i+0x1a2>
 80074c2:	6019      	str	r1, [r3, #0]
 80074c4:	e002      	b.n	80074cc <_printf_i+0x1a8>
 80074c6:	066d      	lsls	r5, r5, #25
 80074c8:	d5fb      	bpl.n	80074c2 <_printf_i+0x19e>
 80074ca:	8019      	strh	r1, [r3, #0]
 80074cc:	2300      	movs	r3, #0
 80074ce:	9e04      	ldr	r6, [sp, #16]
 80074d0:	6123      	str	r3, [r4, #16]
 80074d2:	e7bb      	b.n	800744c <_printf_i+0x128>
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	1d11      	adds	r1, r2, #4
 80074d8:	6019      	str	r1, [r3, #0]
 80074da:	6816      	ldr	r6, [r2, #0]
 80074dc:	2100      	movs	r1, #0
 80074de:	0030      	movs	r0, r6
 80074e0:	6862      	ldr	r2, [r4, #4]
 80074e2:	f000 ff05 	bl	80082f0 <memchr>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d001      	beq.n	80074ee <_printf_i+0x1ca>
 80074ea:	1b80      	subs	r0, r0, r6
 80074ec:	6060      	str	r0, [r4, #4]
 80074ee:	6863      	ldr	r3, [r4, #4]
 80074f0:	6123      	str	r3, [r4, #16]
 80074f2:	2300      	movs	r3, #0
 80074f4:	9a04      	ldr	r2, [sp, #16]
 80074f6:	7013      	strb	r3, [r2, #0]
 80074f8:	e7a8      	b.n	800744c <_printf_i+0x128>
 80074fa:	6923      	ldr	r3, [r4, #16]
 80074fc:	0032      	movs	r2, r6
 80074fe:	9906      	ldr	r1, [sp, #24]
 8007500:	9805      	ldr	r0, [sp, #20]
 8007502:	9d07      	ldr	r5, [sp, #28]
 8007504:	47a8      	blx	r5
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	d0aa      	beq.n	8007460 <_printf_i+0x13c>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	079b      	lsls	r3, r3, #30
 800750e:	d415      	bmi.n	800753c <_printf_i+0x218>
 8007510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007512:	68e0      	ldr	r0, [r4, #12]
 8007514:	4298      	cmp	r0, r3
 8007516:	daa5      	bge.n	8007464 <_printf_i+0x140>
 8007518:	0018      	movs	r0, r3
 800751a:	e7a3      	b.n	8007464 <_printf_i+0x140>
 800751c:	0022      	movs	r2, r4
 800751e:	2301      	movs	r3, #1
 8007520:	9906      	ldr	r1, [sp, #24]
 8007522:	9805      	ldr	r0, [sp, #20]
 8007524:	9e07      	ldr	r6, [sp, #28]
 8007526:	3219      	adds	r2, #25
 8007528:	47b0      	blx	r6
 800752a:	1c43      	adds	r3, r0, #1
 800752c:	d098      	beq.n	8007460 <_printf_i+0x13c>
 800752e:	3501      	adds	r5, #1
 8007530:	68e3      	ldr	r3, [r4, #12]
 8007532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007534:	1a9b      	subs	r3, r3, r2
 8007536:	42ab      	cmp	r3, r5
 8007538:	dcf0      	bgt.n	800751c <_printf_i+0x1f8>
 800753a:	e7e9      	b.n	8007510 <_printf_i+0x1ec>
 800753c:	2500      	movs	r5, #0
 800753e:	e7f7      	b.n	8007530 <_printf_i+0x20c>
 8007540:	0800f1fc 	.word	0x0800f1fc
 8007544:	0800f20d 	.word	0x0800f20d

08007548 <siprintf>:
 8007548:	b40e      	push	{r1, r2, r3}
 800754a:	b500      	push	{lr}
 800754c:	490b      	ldr	r1, [pc, #44]	; (800757c <siprintf+0x34>)
 800754e:	b09c      	sub	sp, #112	; 0x70
 8007550:	ab1d      	add	r3, sp, #116	; 0x74
 8007552:	9002      	str	r0, [sp, #8]
 8007554:	9006      	str	r0, [sp, #24]
 8007556:	9107      	str	r1, [sp, #28]
 8007558:	9104      	str	r1, [sp, #16]
 800755a:	4809      	ldr	r0, [pc, #36]	; (8007580 <siprintf+0x38>)
 800755c:	4909      	ldr	r1, [pc, #36]	; (8007584 <siprintf+0x3c>)
 800755e:	cb04      	ldmia	r3!, {r2}
 8007560:	9105      	str	r1, [sp, #20]
 8007562:	6800      	ldr	r0, [r0, #0]
 8007564:	a902      	add	r1, sp, #8
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	f001 fbda 	bl	8008d20 <_svfiprintf_r>
 800756c:	2300      	movs	r3, #0
 800756e:	9a02      	ldr	r2, [sp, #8]
 8007570:	7013      	strb	r3, [r2, #0]
 8007572:	b01c      	add	sp, #112	; 0x70
 8007574:	bc08      	pop	{r3}
 8007576:	b003      	add	sp, #12
 8007578:	4718      	bx	r3
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	7fffffff 	.word	0x7fffffff
 8007580:	200000a8 	.word	0x200000a8
 8007584:	ffff0208 	.word	0xffff0208

08007588 <quorem>:
 8007588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800758a:	0006      	movs	r6, r0
 800758c:	690b      	ldr	r3, [r1, #16]
 800758e:	6932      	ldr	r2, [r6, #16]
 8007590:	b087      	sub	sp, #28
 8007592:	2000      	movs	r0, #0
 8007594:	9103      	str	r1, [sp, #12]
 8007596:	429a      	cmp	r2, r3
 8007598:	db65      	blt.n	8007666 <quorem+0xde>
 800759a:	3b01      	subs	r3, #1
 800759c:	009c      	lsls	r4, r3, #2
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	000b      	movs	r3, r1
 80075a2:	3314      	adds	r3, #20
 80075a4:	9305      	str	r3, [sp, #20]
 80075a6:	191b      	adds	r3, r3, r4
 80075a8:	9304      	str	r3, [sp, #16]
 80075aa:	0033      	movs	r3, r6
 80075ac:	3314      	adds	r3, #20
 80075ae:	9302      	str	r3, [sp, #8]
 80075b0:	191c      	adds	r4, r3, r4
 80075b2:	9b04      	ldr	r3, [sp, #16]
 80075b4:	6827      	ldr	r7, [r4, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	0038      	movs	r0, r7
 80075ba:	1c5d      	adds	r5, r3, #1
 80075bc:	0029      	movs	r1, r5
 80075be:	9301      	str	r3, [sp, #4]
 80075c0:	f7f8 fdba 	bl	8000138 <__udivsi3>
 80075c4:	9001      	str	r0, [sp, #4]
 80075c6:	42af      	cmp	r7, r5
 80075c8:	d324      	bcc.n	8007614 <quorem+0x8c>
 80075ca:	2500      	movs	r5, #0
 80075cc:	46ac      	mov	ip, r5
 80075ce:	9802      	ldr	r0, [sp, #8]
 80075d0:	9f05      	ldr	r7, [sp, #20]
 80075d2:	cf08      	ldmia	r7!, {r3}
 80075d4:	9a01      	ldr	r2, [sp, #4]
 80075d6:	b299      	uxth	r1, r3
 80075d8:	4351      	muls	r1, r2
 80075da:	0c1b      	lsrs	r3, r3, #16
 80075dc:	4353      	muls	r3, r2
 80075de:	1949      	adds	r1, r1, r5
 80075e0:	0c0a      	lsrs	r2, r1, #16
 80075e2:	189b      	adds	r3, r3, r2
 80075e4:	6802      	ldr	r2, [r0, #0]
 80075e6:	b289      	uxth	r1, r1
 80075e8:	b292      	uxth	r2, r2
 80075ea:	4462      	add	r2, ip
 80075ec:	1a52      	subs	r2, r2, r1
 80075ee:	6801      	ldr	r1, [r0, #0]
 80075f0:	0c1d      	lsrs	r5, r3, #16
 80075f2:	0c09      	lsrs	r1, r1, #16
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	1acb      	subs	r3, r1, r3
 80075f8:	1411      	asrs	r1, r2, #16
 80075fa:	185b      	adds	r3, r3, r1
 80075fc:	1419      	asrs	r1, r3, #16
 80075fe:	b292      	uxth	r2, r2
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	431a      	orrs	r2, r3
 8007604:	9b04      	ldr	r3, [sp, #16]
 8007606:	468c      	mov	ip, r1
 8007608:	c004      	stmia	r0!, {r2}
 800760a:	42bb      	cmp	r3, r7
 800760c:	d2e1      	bcs.n	80075d2 <quorem+0x4a>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d030      	beq.n	8007676 <quorem+0xee>
 8007614:	0030      	movs	r0, r6
 8007616:	9903      	ldr	r1, [sp, #12]
 8007618:	f001 f8fa 	bl	8008810 <__mcmp>
 800761c:	2800      	cmp	r0, #0
 800761e:	db21      	blt.n	8007664 <quorem+0xdc>
 8007620:	0030      	movs	r0, r6
 8007622:	2400      	movs	r4, #0
 8007624:	9b01      	ldr	r3, [sp, #4]
 8007626:	9903      	ldr	r1, [sp, #12]
 8007628:	3301      	adds	r3, #1
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	3014      	adds	r0, #20
 800762e:	3114      	adds	r1, #20
 8007630:	6803      	ldr	r3, [r0, #0]
 8007632:	c920      	ldmia	r1!, {r5}
 8007634:	b29a      	uxth	r2, r3
 8007636:	1914      	adds	r4, r2, r4
 8007638:	b2aa      	uxth	r2, r5
 800763a:	1aa2      	subs	r2, r4, r2
 800763c:	0c1b      	lsrs	r3, r3, #16
 800763e:	0c2d      	lsrs	r5, r5, #16
 8007640:	1414      	asrs	r4, r2, #16
 8007642:	1b5b      	subs	r3, r3, r5
 8007644:	191b      	adds	r3, r3, r4
 8007646:	141c      	asrs	r4, r3, #16
 8007648:	b292      	uxth	r2, r2
 800764a:	041b      	lsls	r3, r3, #16
 800764c:	4313      	orrs	r3, r2
 800764e:	c008      	stmia	r0!, {r3}
 8007650:	9b04      	ldr	r3, [sp, #16]
 8007652:	428b      	cmp	r3, r1
 8007654:	d2ec      	bcs.n	8007630 <quorem+0xa8>
 8007656:	9b00      	ldr	r3, [sp, #0]
 8007658:	9a02      	ldr	r2, [sp, #8]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	18d3      	adds	r3, r2, r3
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	2a00      	cmp	r2, #0
 8007662:	d015      	beq.n	8007690 <quorem+0x108>
 8007664:	9801      	ldr	r0, [sp, #4]
 8007666:	b007      	add	sp, #28
 8007668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d106      	bne.n	800767e <quorem+0xf6>
 8007670:	9b00      	ldr	r3, [sp, #0]
 8007672:	3b01      	subs	r3, #1
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	9b02      	ldr	r3, [sp, #8]
 8007678:	3c04      	subs	r4, #4
 800767a:	42a3      	cmp	r3, r4
 800767c:	d3f5      	bcc.n	800766a <quorem+0xe2>
 800767e:	9b00      	ldr	r3, [sp, #0]
 8007680:	6133      	str	r3, [r6, #16]
 8007682:	e7c7      	b.n	8007614 <quorem+0x8c>
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	2a00      	cmp	r2, #0
 8007688:	d106      	bne.n	8007698 <quorem+0x110>
 800768a:	9a00      	ldr	r2, [sp, #0]
 800768c:	3a01      	subs	r2, #1
 800768e:	9200      	str	r2, [sp, #0]
 8007690:	9a02      	ldr	r2, [sp, #8]
 8007692:	3b04      	subs	r3, #4
 8007694:	429a      	cmp	r2, r3
 8007696:	d3f5      	bcc.n	8007684 <quorem+0xfc>
 8007698:	9b00      	ldr	r3, [sp, #0]
 800769a:	6133      	str	r3, [r6, #16]
 800769c:	e7e2      	b.n	8007664 <quorem+0xdc>
	...

080076a0 <_dtoa_r>:
 80076a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076a2:	b09d      	sub	sp, #116	; 0x74
 80076a4:	9202      	str	r2, [sp, #8]
 80076a6:	9303      	str	r3, [sp, #12]
 80076a8:	9b02      	ldr	r3, [sp, #8]
 80076aa:	9c03      	ldr	r4, [sp, #12]
 80076ac:	9308      	str	r3, [sp, #32]
 80076ae:	9409      	str	r4, [sp, #36]	; 0x24
 80076b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80076b2:	0007      	movs	r7, r0
 80076b4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80076b6:	2c00      	cmp	r4, #0
 80076b8:	d10e      	bne.n	80076d8 <_dtoa_r+0x38>
 80076ba:	2010      	movs	r0, #16
 80076bc:	f000 fe0e 	bl	80082dc <malloc>
 80076c0:	1e02      	subs	r2, r0, #0
 80076c2:	6278      	str	r0, [r7, #36]	; 0x24
 80076c4:	d104      	bne.n	80076d0 <_dtoa_r+0x30>
 80076c6:	21ea      	movs	r1, #234	; 0xea
 80076c8:	4bc7      	ldr	r3, [pc, #796]	; (80079e8 <_dtoa_r+0x348>)
 80076ca:	48c8      	ldr	r0, [pc, #800]	; (80079ec <_dtoa_r+0x34c>)
 80076cc:	f001 fc3a 	bl	8008f44 <__assert_func>
 80076d0:	6044      	str	r4, [r0, #4]
 80076d2:	6084      	str	r4, [r0, #8]
 80076d4:	6004      	str	r4, [r0, #0]
 80076d6:	60c4      	str	r4, [r0, #12]
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	6819      	ldr	r1, [r3, #0]
 80076dc:	2900      	cmp	r1, #0
 80076de:	d00a      	beq.n	80076f6 <_dtoa_r+0x56>
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	2301      	movs	r3, #1
 80076e4:	4093      	lsls	r3, r2
 80076e6:	604a      	str	r2, [r1, #4]
 80076e8:	608b      	str	r3, [r1, #8]
 80076ea:	0038      	movs	r0, r7
 80076ec:	f000 fe50 	bl	8008390 <_Bfree>
 80076f0:	2200      	movs	r2, #0
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	da20      	bge.n	800773e <_dtoa_r+0x9e>
 80076fc:	2301      	movs	r3, #1
 80076fe:	602b      	str	r3, [r5, #0]
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	085b      	lsrs	r3, r3, #1
 8007706:	9309      	str	r3, [sp, #36]	; 0x24
 8007708:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800770a:	4bb9      	ldr	r3, [pc, #740]	; (80079f0 <_dtoa_r+0x350>)
 800770c:	4ab8      	ldr	r2, [pc, #736]	; (80079f0 <_dtoa_r+0x350>)
 800770e:	402b      	ands	r3, r5
 8007710:	4293      	cmp	r3, r2
 8007712:	d117      	bne.n	8007744 <_dtoa_r+0xa4>
 8007714:	4bb7      	ldr	r3, [pc, #732]	; (80079f4 <_dtoa_r+0x354>)
 8007716:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007718:	0328      	lsls	r0, r5, #12
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	9b02      	ldr	r3, [sp, #8]
 800771e:	0b00      	lsrs	r0, r0, #12
 8007720:	4318      	orrs	r0, r3
 8007722:	d101      	bne.n	8007728 <_dtoa_r+0x88>
 8007724:	f000 fdbf 	bl	80082a6 <_dtoa_r+0xc06>
 8007728:	48b3      	ldr	r0, [pc, #716]	; (80079f8 <_dtoa_r+0x358>)
 800772a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800772c:	9006      	str	r0, [sp, #24]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <_dtoa_r+0x98>
 8007732:	4bb2      	ldr	r3, [pc, #712]	; (80079fc <_dtoa_r+0x35c>)
 8007734:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	9806      	ldr	r0, [sp, #24]
 800773a:	b01d      	add	sp, #116	; 0x74
 800773c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800773e:	2300      	movs	r3, #0
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	e7e1      	b.n	8007708 <_dtoa_r+0x68>
 8007744:	9b08      	ldr	r3, [sp, #32]
 8007746:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007748:	9312      	str	r3, [sp, #72]	; 0x48
 800774a:	9413      	str	r4, [sp, #76]	; 0x4c
 800774c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800774e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007750:	2200      	movs	r2, #0
 8007752:	2300      	movs	r3, #0
 8007754:	f7f8 fe76 	bl	8000444 <__aeabi_dcmpeq>
 8007758:	1e04      	subs	r4, r0, #0
 800775a:	d009      	beq.n	8007770 <_dtoa_r+0xd0>
 800775c:	2301      	movs	r3, #1
 800775e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	4ba7      	ldr	r3, [pc, #668]	; (8007a00 <_dtoa_r+0x360>)
 8007764:	9306      	str	r3, [sp, #24]
 8007766:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0e5      	beq.n	8007738 <_dtoa_r+0x98>
 800776c:	4ba5      	ldr	r3, [pc, #660]	; (8007a04 <_dtoa_r+0x364>)
 800776e:	e7e1      	b.n	8007734 <_dtoa_r+0x94>
 8007770:	ab1a      	add	r3, sp, #104	; 0x68
 8007772:	9301      	str	r3, [sp, #4]
 8007774:	ab1b      	add	r3, sp, #108	; 0x6c
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	0038      	movs	r0, r7
 800777a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800777c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800777e:	f001 f8fb 	bl	8008978 <__d2b>
 8007782:	006e      	lsls	r6, r5, #1
 8007784:	9005      	str	r0, [sp, #20]
 8007786:	0d76      	lsrs	r6, r6, #21
 8007788:	d100      	bne.n	800778c <_dtoa_r+0xec>
 800778a:	e07c      	b.n	8007886 <_dtoa_r+0x1e6>
 800778c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800778e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007792:	4a9d      	ldr	r2, [pc, #628]	; (8007a08 <_dtoa_r+0x368>)
 8007794:	031b      	lsls	r3, r3, #12
 8007796:	0b1b      	lsrs	r3, r3, #12
 8007798:	431a      	orrs	r2, r3
 800779a:	0011      	movs	r1, r2
 800779c:	4b9b      	ldr	r3, [pc, #620]	; (8007a0c <_dtoa_r+0x36c>)
 800779e:	9418      	str	r4, [sp, #96]	; 0x60
 80077a0:	18f6      	adds	r6, r6, r3
 80077a2:	2200      	movs	r2, #0
 80077a4:	4b9a      	ldr	r3, [pc, #616]	; (8007a10 <_dtoa_r+0x370>)
 80077a6:	f7fa fefd 	bl	80025a4 <__aeabi_dsub>
 80077aa:	4a9a      	ldr	r2, [pc, #616]	; (8007a14 <_dtoa_r+0x374>)
 80077ac:	4b9a      	ldr	r3, [pc, #616]	; (8007a18 <_dtoa_r+0x378>)
 80077ae:	f7fa fc8d 	bl	80020cc <__aeabi_dmul>
 80077b2:	4a9a      	ldr	r2, [pc, #616]	; (8007a1c <_dtoa_r+0x37c>)
 80077b4:	4b9a      	ldr	r3, [pc, #616]	; (8007a20 <_dtoa_r+0x380>)
 80077b6:	f7f9 fd4b 	bl	8001250 <__aeabi_dadd>
 80077ba:	0004      	movs	r4, r0
 80077bc:	0030      	movs	r0, r6
 80077be:	000d      	movs	r5, r1
 80077c0:	f7fb fad6 	bl	8002d70 <__aeabi_i2d>
 80077c4:	4a97      	ldr	r2, [pc, #604]	; (8007a24 <_dtoa_r+0x384>)
 80077c6:	4b98      	ldr	r3, [pc, #608]	; (8007a28 <_dtoa_r+0x388>)
 80077c8:	f7fa fc80 	bl	80020cc <__aeabi_dmul>
 80077cc:	0002      	movs	r2, r0
 80077ce:	000b      	movs	r3, r1
 80077d0:	0020      	movs	r0, r4
 80077d2:	0029      	movs	r1, r5
 80077d4:	f7f9 fd3c 	bl	8001250 <__aeabi_dadd>
 80077d8:	0004      	movs	r4, r0
 80077da:	000d      	movs	r5, r1
 80077dc:	f7fb fa92 	bl	8002d04 <__aeabi_d2iz>
 80077e0:	2200      	movs	r2, #0
 80077e2:	9002      	str	r0, [sp, #8]
 80077e4:	2300      	movs	r3, #0
 80077e6:	0020      	movs	r0, r4
 80077e8:	0029      	movs	r1, r5
 80077ea:	f7f8 fe31 	bl	8000450 <__aeabi_dcmplt>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d00b      	beq.n	800780a <_dtoa_r+0x16a>
 80077f2:	9802      	ldr	r0, [sp, #8]
 80077f4:	f7fb fabc 	bl	8002d70 <__aeabi_i2d>
 80077f8:	002b      	movs	r3, r5
 80077fa:	0022      	movs	r2, r4
 80077fc:	f7f8 fe22 	bl	8000444 <__aeabi_dcmpeq>
 8007800:	4243      	negs	r3, r0
 8007802:	4158      	adcs	r0, r3
 8007804:	9b02      	ldr	r3, [sp, #8]
 8007806:	1a1b      	subs	r3, r3, r0
 8007808:	9302      	str	r3, [sp, #8]
 800780a:	2301      	movs	r3, #1
 800780c:	9316      	str	r3, [sp, #88]	; 0x58
 800780e:	9b02      	ldr	r3, [sp, #8]
 8007810:	2b16      	cmp	r3, #22
 8007812:	d80f      	bhi.n	8007834 <_dtoa_r+0x194>
 8007814:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007816:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007818:	00da      	lsls	r2, r3, #3
 800781a:	4b84      	ldr	r3, [pc, #528]	; (8007a2c <_dtoa_r+0x38c>)
 800781c:	189b      	adds	r3, r3, r2
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f7f8 fe15 	bl	8000450 <__aeabi_dcmplt>
 8007826:	2800      	cmp	r0, #0
 8007828:	d049      	beq.n	80078be <_dtoa_r+0x21e>
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	3b01      	subs	r3, #1
 800782e:	9302      	str	r3, [sp, #8]
 8007830:	2300      	movs	r3, #0
 8007832:	9316      	str	r3, [sp, #88]	; 0x58
 8007834:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007836:	1b9e      	subs	r6, r3, r6
 8007838:	2300      	movs	r3, #0
 800783a:	930a      	str	r3, [sp, #40]	; 0x28
 800783c:	0033      	movs	r3, r6
 800783e:	3b01      	subs	r3, #1
 8007840:	930d      	str	r3, [sp, #52]	; 0x34
 8007842:	d504      	bpl.n	800784e <_dtoa_r+0x1ae>
 8007844:	2301      	movs	r3, #1
 8007846:	1b9b      	subs	r3, r3, r6
 8007848:	930a      	str	r3, [sp, #40]	; 0x28
 800784a:	2300      	movs	r3, #0
 800784c:	930d      	str	r3, [sp, #52]	; 0x34
 800784e:	9b02      	ldr	r3, [sp, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	db36      	blt.n	80078c2 <_dtoa_r+0x222>
 8007854:	9a02      	ldr	r2, [sp, #8]
 8007856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007858:	4694      	mov	ip, r2
 800785a:	4463      	add	r3, ip
 800785c:	930d      	str	r3, [sp, #52]	; 0x34
 800785e:	2300      	movs	r3, #0
 8007860:	9215      	str	r2, [sp, #84]	; 0x54
 8007862:	930e      	str	r3, [sp, #56]	; 0x38
 8007864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007866:	2401      	movs	r4, #1
 8007868:	2b09      	cmp	r3, #9
 800786a:	d864      	bhi.n	8007936 <_dtoa_r+0x296>
 800786c:	2b05      	cmp	r3, #5
 800786e:	dd02      	ble.n	8007876 <_dtoa_r+0x1d6>
 8007870:	2400      	movs	r4, #0
 8007872:	3b04      	subs	r3, #4
 8007874:	9322      	str	r3, [sp, #136]	; 0x88
 8007876:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007878:	1e98      	subs	r0, r3, #2
 800787a:	2803      	cmp	r0, #3
 800787c:	d864      	bhi.n	8007948 <_dtoa_r+0x2a8>
 800787e:	f7f8 fc47 	bl	8000110 <__gnu_thumb1_case_uqi>
 8007882:	3829      	.short	0x3829
 8007884:	5836      	.short	0x5836
 8007886:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007888:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800788a:	189e      	adds	r6, r3, r2
 800788c:	4b68      	ldr	r3, [pc, #416]	; (8007a30 <_dtoa_r+0x390>)
 800788e:	18f2      	adds	r2, r6, r3
 8007890:	2a20      	cmp	r2, #32
 8007892:	dd0f      	ble.n	80078b4 <_dtoa_r+0x214>
 8007894:	2340      	movs	r3, #64	; 0x40
 8007896:	1a9b      	subs	r3, r3, r2
 8007898:	409d      	lsls	r5, r3
 800789a:	4b66      	ldr	r3, [pc, #408]	; (8007a34 <_dtoa_r+0x394>)
 800789c:	9802      	ldr	r0, [sp, #8]
 800789e:	18f3      	adds	r3, r6, r3
 80078a0:	40d8      	lsrs	r0, r3
 80078a2:	4328      	orrs	r0, r5
 80078a4:	f7fb fa94 	bl	8002dd0 <__aeabi_ui2d>
 80078a8:	2301      	movs	r3, #1
 80078aa:	4c63      	ldr	r4, [pc, #396]	; (8007a38 <_dtoa_r+0x398>)
 80078ac:	3e01      	subs	r6, #1
 80078ae:	1909      	adds	r1, r1, r4
 80078b0:	9318      	str	r3, [sp, #96]	; 0x60
 80078b2:	e776      	b.n	80077a2 <_dtoa_r+0x102>
 80078b4:	2320      	movs	r3, #32
 80078b6:	9802      	ldr	r0, [sp, #8]
 80078b8:	1a9b      	subs	r3, r3, r2
 80078ba:	4098      	lsls	r0, r3
 80078bc:	e7f2      	b.n	80078a4 <_dtoa_r+0x204>
 80078be:	9016      	str	r0, [sp, #88]	; 0x58
 80078c0:	e7b8      	b.n	8007834 <_dtoa_r+0x194>
 80078c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c4:	9a02      	ldr	r2, [sp, #8]
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	930a      	str	r3, [sp, #40]	; 0x28
 80078ca:	4253      	negs	r3, r2
 80078cc:	930e      	str	r3, [sp, #56]	; 0x38
 80078ce:	2300      	movs	r3, #0
 80078d0:	9315      	str	r3, [sp, #84]	; 0x54
 80078d2:	e7c7      	b.n	8007864 <_dtoa_r+0x1c4>
 80078d4:	2300      	movs	r3, #0
 80078d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80078d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078da:	930c      	str	r3, [sp, #48]	; 0x30
 80078dc:	9307      	str	r3, [sp, #28]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	dc13      	bgt.n	800790a <_dtoa_r+0x26a>
 80078e2:	2301      	movs	r3, #1
 80078e4:	001a      	movs	r2, r3
 80078e6:	930c      	str	r3, [sp, #48]	; 0x30
 80078e8:	9307      	str	r3, [sp, #28]
 80078ea:	9223      	str	r2, [sp, #140]	; 0x8c
 80078ec:	e00d      	b.n	800790a <_dtoa_r+0x26a>
 80078ee:	2301      	movs	r3, #1
 80078f0:	e7f1      	b.n	80078d6 <_dtoa_r+0x236>
 80078f2:	2300      	movs	r3, #0
 80078f4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80078f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80078f8:	4694      	mov	ip, r2
 80078fa:	9b02      	ldr	r3, [sp, #8]
 80078fc:	4463      	add	r3, ip
 80078fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007900:	3301      	adds	r3, #1
 8007902:	9307      	str	r3, [sp, #28]
 8007904:	2b00      	cmp	r3, #0
 8007906:	dc00      	bgt.n	800790a <_dtoa_r+0x26a>
 8007908:	2301      	movs	r3, #1
 800790a:	2200      	movs	r2, #0
 800790c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800790e:	6042      	str	r2, [r0, #4]
 8007910:	3204      	adds	r2, #4
 8007912:	0015      	movs	r5, r2
 8007914:	3514      	adds	r5, #20
 8007916:	6841      	ldr	r1, [r0, #4]
 8007918:	429d      	cmp	r5, r3
 800791a:	d919      	bls.n	8007950 <_dtoa_r+0x2b0>
 800791c:	0038      	movs	r0, r7
 800791e:	f000 fcf3 	bl	8008308 <_Balloc>
 8007922:	9006      	str	r0, [sp, #24]
 8007924:	2800      	cmp	r0, #0
 8007926:	d117      	bne.n	8007958 <_dtoa_r+0x2b8>
 8007928:	21d5      	movs	r1, #213	; 0xd5
 800792a:	0002      	movs	r2, r0
 800792c:	4b43      	ldr	r3, [pc, #268]	; (8007a3c <_dtoa_r+0x39c>)
 800792e:	0049      	lsls	r1, r1, #1
 8007930:	e6cb      	b.n	80076ca <_dtoa_r+0x2a>
 8007932:	2301      	movs	r3, #1
 8007934:	e7de      	b.n	80078f4 <_dtoa_r+0x254>
 8007936:	2300      	movs	r3, #0
 8007938:	940f      	str	r4, [sp, #60]	; 0x3c
 800793a:	9322      	str	r3, [sp, #136]	; 0x88
 800793c:	3b01      	subs	r3, #1
 800793e:	930c      	str	r3, [sp, #48]	; 0x30
 8007940:	9307      	str	r3, [sp, #28]
 8007942:	2200      	movs	r2, #0
 8007944:	3313      	adds	r3, #19
 8007946:	e7d0      	b.n	80078ea <_dtoa_r+0x24a>
 8007948:	2301      	movs	r3, #1
 800794a:	930f      	str	r3, [sp, #60]	; 0x3c
 800794c:	3b02      	subs	r3, #2
 800794e:	e7f6      	b.n	800793e <_dtoa_r+0x29e>
 8007950:	3101      	adds	r1, #1
 8007952:	6041      	str	r1, [r0, #4]
 8007954:	0052      	lsls	r2, r2, #1
 8007956:	e7dc      	b.n	8007912 <_dtoa_r+0x272>
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	9a06      	ldr	r2, [sp, #24]
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	9b07      	ldr	r3, [sp, #28]
 8007960:	2b0e      	cmp	r3, #14
 8007962:	d900      	bls.n	8007966 <_dtoa_r+0x2c6>
 8007964:	e0eb      	b.n	8007b3e <_dtoa_r+0x49e>
 8007966:	2c00      	cmp	r4, #0
 8007968:	d100      	bne.n	800796c <_dtoa_r+0x2cc>
 800796a:	e0e8      	b.n	8007b3e <_dtoa_r+0x49e>
 800796c:	9b02      	ldr	r3, [sp, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	dd68      	ble.n	8007a44 <_dtoa_r+0x3a4>
 8007972:	001a      	movs	r2, r3
 8007974:	210f      	movs	r1, #15
 8007976:	4b2d      	ldr	r3, [pc, #180]	; (8007a2c <_dtoa_r+0x38c>)
 8007978:	400a      	ands	r2, r1
 800797a:	00d2      	lsls	r2, r2, #3
 800797c:	189b      	adds	r3, r3, r2
 800797e:	681d      	ldr	r5, [r3, #0]
 8007980:	685e      	ldr	r6, [r3, #4]
 8007982:	9b02      	ldr	r3, [sp, #8]
 8007984:	111c      	asrs	r4, r3, #4
 8007986:	2302      	movs	r3, #2
 8007988:	9310      	str	r3, [sp, #64]	; 0x40
 800798a:	9b02      	ldr	r3, [sp, #8]
 800798c:	05db      	lsls	r3, r3, #23
 800798e:	d50b      	bpl.n	80079a8 <_dtoa_r+0x308>
 8007990:	4b2b      	ldr	r3, [pc, #172]	; (8007a40 <_dtoa_r+0x3a0>)
 8007992:	400c      	ands	r4, r1
 8007994:	6a1a      	ldr	r2, [r3, #32]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	9812      	ldr	r0, [sp, #72]	; 0x48
 800799a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800799c:	f7f9 ff94 	bl	80018c8 <__aeabi_ddiv>
 80079a0:	2303      	movs	r3, #3
 80079a2:	9008      	str	r0, [sp, #32]
 80079a4:	9109      	str	r1, [sp, #36]	; 0x24
 80079a6:	9310      	str	r3, [sp, #64]	; 0x40
 80079a8:	4b25      	ldr	r3, [pc, #148]	; (8007a40 <_dtoa_r+0x3a0>)
 80079aa:	9314      	str	r3, [sp, #80]	; 0x50
 80079ac:	2c00      	cmp	r4, #0
 80079ae:	d108      	bne.n	80079c2 <_dtoa_r+0x322>
 80079b0:	9808      	ldr	r0, [sp, #32]
 80079b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079b4:	002a      	movs	r2, r5
 80079b6:	0033      	movs	r3, r6
 80079b8:	f7f9 ff86 	bl	80018c8 <__aeabi_ddiv>
 80079bc:	9008      	str	r0, [sp, #32]
 80079be:	9109      	str	r1, [sp, #36]	; 0x24
 80079c0:	e05c      	b.n	8007a7c <_dtoa_r+0x3dc>
 80079c2:	2301      	movs	r3, #1
 80079c4:	421c      	tst	r4, r3
 80079c6:	d00b      	beq.n	80079e0 <_dtoa_r+0x340>
 80079c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079ca:	0028      	movs	r0, r5
 80079cc:	3301      	adds	r3, #1
 80079ce:	9310      	str	r3, [sp, #64]	; 0x40
 80079d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079d2:	0031      	movs	r1, r6
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f7fa fb78 	bl	80020cc <__aeabi_dmul>
 80079dc:	0005      	movs	r5, r0
 80079de:	000e      	movs	r6, r1
 80079e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079e2:	1064      	asrs	r4, r4, #1
 80079e4:	3308      	adds	r3, #8
 80079e6:	e7e0      	b.n	80079aa <_dtoa_r+0x30a>
 80079e8:	0800f22b 	.word	0x0800f22b
 80079ec:	0800f242 	.word	0x0800f242
 80079f0:	7ff00000 	.word	0x7ff00000
 80079f4:	0000270f 	.word	0x0000270f
 80079f8:	0800f227 	.word	0x0800f227
 80079fc:	0800f22a 	.word	0x0800f22a
 8007a00:	0800f013 	.word	0x0800f013
 8007a04:	0800f014 	.word	0x0800f014
 8007a08:	3ff00000 	.word	0x3ff00000
 8007a0c:	fffffc01 	.word	0xfffffc01
 8007a10:	3ff80000 	.word	0x3ff80000
 8007a14:	636f4361 	.word	0x636f4361
 8007a18:	3fd287a7 	.word	0x3fd287a7
 8007a1c:	8b60c8b3 	.word	0x8b60c8b3
 8007a20:	3fc68a28 	.word	0x3fc68a28
 8007a24:	509f79fb 	.word	0x509f79fb
 8007a28:	3fd34413 	.word	0x3fd34413
 8007a2c:	0800f338 	.word	0x0800f338
 8007a30:	00000432 	.word	0x00000432
 8007a34:	00000412 	.word	0x00000412
 8007a38:	fe100000 	.word	0xfe100000
 8007a3c:	0800f29d 	.word	0x0800f29d
 8007a40:	0800f310 	.word	0x0800f310
 8007a44:	2302      	movs	r3, #2
 8007a46:	9310      	str	r3, [sp, #64]	; 0x40
 8007a48:	9b02      	ldr	r3, [sp, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d016      	beq.n	8007a7c <_dtoa_r+0x3dc>
 8007a4e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007a50:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007a52:	425c      	negs	r4, r3
 8007a54:	230f      	movs	r3, #15
 8007a56:	4ab6      	ldr	r2, [pc, #728]	; (8007d30 <_dtoa_r+0x690>)
 8007a58:	4023      	ands	r3, r4
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	18d3      	adds	r3, r2, r3
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f7fa fb33 	bl	80020cc <__aeabi_dmul>
 8007a66:	2601      	movs	r6, #1
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9008      	str	r0, [sp, #32]
 8007a6c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a6e:	4db1      	ldr	r5, [pc, #708]	; (8007d34 <_dtoa_r+0x694>)
 8007a70:	1124      	asrs	r4, r4, #4
 8007a72:	2c00      	cmp	r4, #0
 8007a74:	d000      	beq.n	8007a78 <_dtoa_r+0x3d8>
 8007a76:	e094      	b.n	8007ba2 <_dtoa_r+0x502>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d19f      	bne.n	80079bc <_dtoa_r+0x31c>
 8007a7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d100      	bne.n	8007a84 <_dtoa_r+0x3e4>
 8007a82:	e09b      	b.n	8007bbc <_dtoa_r+0x51c>
 8007a84:	9c08      	ldr	r4, [sp, #32]
 8007a86:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a88:	2200      	movs	r2, #0
 8007a8a:	0020      	movs	r0, r4
 8007a8c:	0029      	movs	r1, r5
 8007a8e:	4baa      	ldr	r3, [pc, #680]	; (8007d38 <_dtoa_r+0x698>)
 8007a90:	f7f8 fcde 	bl	8000450 <__aeabi_dcmplt>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d100      	bne.n	8007a9a <_dtoa_r+0x3fa>
 8007a98:	e090      	b.n	8007bbc <_dtoa_r+0x51c>
 8007a9a:	9b07      	ldr	r3, [sp, #28]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d100      	bne.n	8007aa2 <_dtoa_r+0x402>
 8007aa0:	e08c      	b.n	8007bbc <_dtoa_r+0x51c>
 8007aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dd46      	ble.n	8007b36 <_dtoa_r+0x496>
 8007aa8:	9b02      	ldr	r3, [sp, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	0020      	movs	r0, r4
 8007aae:	0029      	movs	r1, r5
 8007ab0:	1e5e      	subs	r6, r3, #1
 8007ab2:	4ba2      	ldr	r3, [pc, #648]	; (8007d3c <_dtoa_r+0x69c>)
 8007ab4:	f7fa fb0a 	bl	80020cc <__aeabi_dmul>
 8007ab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007aba:	9008      	str	r0, [sp, #32]
 8007abc:	9109      	str	r1, [sp, #36]	; 0x24
 8007abe:	3301      	adds	r3, #1
 8007ac0:	9310      	str	r3, [sp, #64]	; 0x40
 8007ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ac4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007ac6:	9c08      	ldr	r4, [sp, #32]
 8007ac8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007aca:	9314      	str	r3, [sp, #80]	; 0x50
 8007acc:	f7fb f950 	bl	8002d70 <__aeabi_i2d>
 8007ad0:	0022      	movs	r2, r4
 8007ad2:	002b      	movs	r3, r5
 8007ad4:	f7fa fafa 	bl	80020cc <__aeabi_dmul>
 8007ad8:	2200      	movs	r2, #0
 8007ada:	4b99      	ldr	r3, [pc, #612]	; (8007d40 <_dtoa_r+0x6a0>)
 8007adc:	f7f9 fbb8 	bl	8001250 <__aeabi_dadd>
 8007ae0:	9010      	str	r0, [sp, #64]	; 0x40
 8007ae2:	9111      	str	r1, [sp, #68]	; 0x44
 8007ae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ae8:	9208      	str	r2, [sp, #32]
 8007aea:	9309      	str	r3, [sp, #36]	; 0x24
 8007aec:	4a95      	ldr	r2, [pc, #596]	; (8007d44 <_dtoa_r+0x6a4>)
 8007aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007af0:	4694      	mov	ip, r2
 8007af2:	4463      	add	r3, ip
 8007af4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007af6:	9309      	str	r3, [sp, #36]	; 0x24
 8007af8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d161      	bne.n	8007bc2 <_dtoa_r+0x522>
 8007afe:	2200      	movs	r2, #0
 8007b00:	0020      	movs	r0, r4
 8007b02:	0029      	movs	r1, r5
 8007b04:	4b90      	ldr	r3, [pc, #576]	; (8007d48 <_dtoa_r+0x6a8>)
 8007b06:	f7fa fd4d 	bl	80025a4 <__aeabi_dsub>
 8007b0a:	9a08      	ldr	r2, [sp, #32]
 8007b0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b0e:	0004      	movs	r4, r0
 8007b10:	000d      	movs	r5, r1
 8007b12:	f7f8 fcb1 	bl	8000478 <__aeabi_dcmpgt>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d000      	beq.n	8007b1c <_dtoa_r+0x47c>
 8007b1a:	e2af      	b.n	800807c <_dtoa_r+0x9dc>
 8007b1c:	488b      	ldr	r0, [pc, #556]	; (8007d4c <_dtoa_r+0x6ac>)
 8007b1e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007b20:	4684      	mov	ip, r0
 8007b22:	4461      	add	r1, ip
 8007b24:	000b      	movs	r3, r1
 8007b26:	0020      	movs	r0, r4
 8007b28:	0029      	movs	r1, r5
 8007b2a:	9a08      	ldr	r2, [sp, #32]
 8007b2c:	f7f8 fc90 	bl	8000450 <__aeabi_dcmplt>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d000      	beq.n	8007b36 <_dtoa_r+0x496>
 8007b34:	e29f      	b.n	8008076 <_dtoa_r+0x9d6>
 8007b36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b38:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007b3a:	9308      	str	r3, [sp, #32]
 8007b3c:	9409      	str	r4, [sp, #36]	; 0x24
 8007b3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	da00      	bge.n	8007b46 <_dtoa_r+0x4a6>
 8007b44:	e172      	b.n	8007e2c <_dtoa_r+0x78c>
 8007b46:	9a02      	ldr	r2, [sp, #8]
 8007b48:	2a0e      	cmp	r2, #14
 8007b4a:	dd00      	ble.n	8007b4e <_dtoa_r+0x4ae>
 8007b4c:	e16e      	b.n	8007e2c <_dtoa_r+0x78c>
 8007b4e:	4b78      	ldr	r3, [pc, #480]	; (8007d30 <_dtoa_r+0x690>)
 8007b50:	00d2      	lsls	r2, r2, #3
 8007b52:	189b      	adds	r3, r3, r2
 8007b54:	685c      	ldr	r4, [r3, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	930a      	str	r3, [sp, #40]	; 0x28
 8007b5a:	940b      	str	r4, [sp, #44]	; 0x2c
 8007b5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	db00      	blt.n	8007b64 <_dtoa_r+0x4c4>
 8007b62:	e0f7      	b.n	8007d54 <_dtoa_r+0x6b4>
 8007b64:	9b07      	ldr	r3, [sp, #28]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	dd00      	ble.n	8007b6c <_dtoa_r+0x4cc>
 8007b6a:	e0f3      	b.n	8007d54 <_dtoa_r+0x6b4>
 8007b6c:	d000      	beq.n	8007b70 <_dtoa_r+0x4d0>
 8007b6e:	e282      	b.n	8008076 <_dtoa_r+0x9d6>
 8007b70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b74:	2200      	movs	r2, #0
 8007b76:	4b74      	ldr	r3, [pc, #464]	; (8007d48 <_dtoa_r+0x6a8>)
 8007b78:	f7fa faa8 	bl	80020cc <__aeabi_dmul>
 8007b7c:	9a08      	ldr	r2, [sp, #32]
 8007b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b80:	f7f8 fc84 	bl	800048c <__aeabi_dcmpge>
 8007b84:	9e07      	ldr	r6, [sp, #28]
 8007b86:	0035      	movs	r5, r6
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d000      	beq.n	8007b8e <_dtoa_r+0x4ee>
 8007b8c:	e259      	b.n	8008042 <_dtoa_r+0x9a2>
 8007b8e:	9b06      	ldr	r3, [sp, #24]
 8007b90:	9a06      	ldr	r2, [sp, #24]
 8007b92:	3301      	adds	r3, #1
 8007b94:	9308      	str	r3, [sp, #32]
 8007b96:	2331      	movs	r3, #49	; 0x31
 8007b98:	7013      	strb	r3, [r2, #0]
 8007b9a:	9b02      	ldr	r3, [sp, #8]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	9302      	str	r3, [sp, #8]
 8007ba0:	e254      	b.n	800804c <_dtoa_r+0x9ac>
 8007ba2:	4234      	tst	r4, r6
 8007ba4:	d007      	beq.n	8007bb6 <_dtoa_r+0x516>
 8007ba6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ba8:	3301      	adds	r3, #1
 8007baa:	9310      	str	r3, [sp, #64]	; 0x40
 8007bac:	682a      	ldr	r2, [r5, #0]
 8007bae:	686b      	ldr	r3, [r5, #4]
 8007bb0:	f7fa fa8c 	bl	80020cc <__aeabi_dmul>
 8007bb4:	0033      	movs	r3, r6
 8007bb6:	1064      	asrs	r4, r4, #1
 8007bb8:	3508      	adds	r5, #8
 8007bba:	e75a      	b.n	8007a72 <_dtoa_r+0x3d2>
 8007bbc:	9e02      	ldr	r6, [sp, #8]
 8007bbe:	9b07      	ldr	r3, [sp, #28]
 8007bc0:	e780      	b.n	8007ac4 <_dtoa_r+0x424>
 8007bc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007bc6:	1e5a      	subs	r2, r3, #1
 8007bc8:	4b59      	ldr	r3, [pc, #356]	; (8007d30 <_dtoa_r+0x690>)
 8007bca:	00d2      	lsls	r2, r2, #3
 8007bcc:	189b      	adds	r3, r3, r2
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2900      	cmp	r1, #0
 8007bd4:	d051      	beq.n	8007c7a <_dtoa_r+0x5da>
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	495d      	ldr	r1, [pc, #372]	; (8007d50 <_dtoa_r+0x6b0>)
 8007bda:	f7f9 fe75 	bl	80018c8 <__aeabi_ddiv>
 8007bde:	9a08      	ldr	r2, [sp, #32]
 8007be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be2:	f7fa fcdf 	bl	80025a4 <__aeabi_dsub>
 8007be6:	9a06      	ldr	r2, [sp, #24]
 8007be8:	9b06      	ldr	r3, [sp, #24]
 8007bea:	4694      	mov	ip, r2
 8007bec:	9317      	str	r3, [sp, #92]	; 0x5c
 8007bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bf0:	9010      	str	r0, [sp, #64]	; 0x40
 8007bf2:	9111      	str	r1, [sp, #68]	; 0x44
 8007bf4:	4463      	add	r3, ip
 8007bf6:	9319      	str	r3, [sp, #100]	; 0x64
 8007bf8:	0029      	movs	r1, r5
 8007bfa:	0020      	movs	r0, r4
 8007bfc:	f7fb f882 	bl	8002d04 <__aeabi_d2iz>
 8007c00:	9014      	str	r0, [sp, #80]	; 0x50
 8007c02:	f7fb f8b5 	bl	8002d70 <__aeabi_i2d>
 8007c06:	0002      	movs	r2, r0
 8007c08:	000b      	movs	r3, r1
 8007c0a:	0020      	movs	r0, r4
 8007c0c:	0029      	movs	r1, r5
 8007c0e:	f7fa fcc9 	bl	80025a4 <__aeabi_dsub>
 8007c12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c16:	3301      	adds	r3, #1
 8007c18:	9308      	str	r3, [sp, #32]
 8007c1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c1c:	0004      	movs	r4, r0
 8007c1e:	3330      	adds	r3, #48	; 0x30
 8007c20:	7013      	strb	r3, [r2, #0]
 8007c22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c26:	000d      	movs	r5, r1
 8007c28:	f7f8 fc12 	bl	8000450 <__aeabi_dcmplt>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d175      	bne.n	8007d1c <_dtoa_r+0x67c>
 8007c30:	0022      	movs	r2, r4
 8007c32:	002b      	movs	r3, r5
 8007c34:	2000      	movs	r0, #0
 8007c36:	4940      	ldr	r1, [pc, #256]	; (8007d38 <_dtoa_r+0x698>)
 8007c38:	f7fa fcb4 	bl	80025a4 <__aeabi_dsub>
 8007c3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c40:	f7f8 fc06 	bl	8000450 <__aeabi_dcmplt>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d000      	beq.n	8007c4a <_dtoa_r+0x5aa>
 8007c48:	e0d2      	b.n	8007df0 <_dtoa_r+0x750>
 8007c4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c4c:	9a08      	ldr	r2, [sp, #32]
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d100      	bne.n	8007c54 <_dtoa_r+0x5b4>
 8007c52:	e770      	b.n	8007b36 <_dtoa_r+0x496>
 8007c54:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007c56:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007c58:	2200      	movs	r2, #0
 8007c5a:	4b38      	ldr	r3, [pc, #224]	; (8007d3c <_dtoa_r+0x69c>)
 8007c5c:	f7fa fa36 	bl	80020cc <__aeabi_dmul>
 8007c60:	4b36      	ldr	r3, [pc, #216]	; (8007d3c <_dtoa_r+0x69c>)
 8007c62:	9010      	str	r0, [sp, #64]	; 0x40
 8007c64:	9111      	str	r1, [sp, #68]	; 0x44
 8007c66:	2200      	movs	r2, #0
 8007c68:	0020      	movs	r0, r4
 8007c6a:	0029      	movs	r1, r5
 8007c6c:	f7fa fa2e 	bl	80020cc <__aeabi_dmul>
 8007c70:	9b08      	ldr	r3, [sp, #32]
 8007c72:	0004      	movs	r4, r0
 8007c74:	000d      	movs	r5, r1
 8007c76:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c78:	e7be      	b.n	8007bf8 <_dtoa_r+0x558>
 8007c7a:	9808      	ldr	r0, [sp, #32]
 8007c7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c7e:	f7fa fa25 	bl	80020cc <__aeabi_dmul>
 8007c82:	9a06      	ldr	r2, [sp, #24]
 8007c84:	9b06      	ldr	r3, [sp, #24]
 8007c86:	4694      	mov	ip, r2
 8007c88:	9308      	str	r3, [sp, #32]
 8007c8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c8c:	9010      	str	r0, [sp, #64]	; 0x40
 8007c8e:	9111      	str	r1, [sp, #68]	; 0x44
 8007c90:	4463      	add	r3, ip
 8007c92:	9319      	str	r3, [sp, #100]	; 0x64
 8007c94:	0029      	movs	r1, r5
 8007c96:	0020      	movs	r0, r4
 8007c98:	f7fb f834 	bl	8002d04 <__aeabi_d2iz>
 8007c9c:	9017      	str	r0, [sp, #92]	; 0x5c
 8007c9e:	f7fb f867 	bl	8002d70 <__aeabi_i2d>
 8007ca2:	0002      	movs	r2, r0
 8007ca4:	000b      	movs	r3, r1
 8007ca6:	0020      	movs	r0, r4
 8007ca8:	0029      	movs	r1, r5
 8007caa:	f7fa fc7b 	bl	80025a4 <__aeabi_dsub>
 8007cae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cb0:	9a08      	ldr	r2, [sp, #32]
 8007cb2:	3330      	adds	r3, #48	; 0x30
 8007cb4:	7013      	strb	r3, [r2, #0]
 8007cb6:	0013      	movs	r3, r2
 8007cb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cba:	3301      	adds	r3, #1
 8007cbc:	0004      	movs	r4, r0
 8007cbe:	000d      	movs	r5, r1
 8007cc0:	9308      	str	r3, [sp, #32]
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d12c      	bne.n	8007d20 <_dtoa_r+0x680>
 8007cc6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007cc8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007cca:	9a06      	ldr	r2, [sp, #24]
 8007ccc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cce:	4694      	mov	ip, r2
 8007cd0:	4463      	add	r3, ip
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	9308      	str	r3, [sp, #32]
 8007cd6:	4b1e      	ldr	r3, [pc, #120]	; (8007d50 <_dtoa_r+0x6b0>)
 8007cd8:	f7f9 faba 	bl	8001250 <__aeabi_dadd>
 8007cdc:	0002      	movs	r2, r0
 8007cde:	000b      	movs	r3, r1
 8007ce0:	0020      	movs	r0, r4
 8007ce2:	0029      	movs	r1, r5
 8007ce4:	f7f8 fbc8 	bl	8000478 <__aeabi_dcmpgt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d000      	beq.n	8007cee <_dtoa_r+0x64e>
 8007cec:	e080      	b.n	8007df0 <_dtoa_r+0x750>
 8007cee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	4916      	ldr	r1, [pc, #88]	; (8007d50 <_dtoa_r+0x6b0>)
 8007cf6:	f7fa fc55 	bl	80025a4 <__aeabi_dsub>
 8007cfa:	0002      	movs	r2, r0
 8007cfc:	000b      	movs	r3, r1
 8007cfe:	0020      	movs	r0, r4
 8007d00:	0029      	movs	r1, r5
 8007d02:	f7f8 fba5 	bl	8000450 <__aeabi_dcmplt>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d100      	bne.n	8007d0c <_dtoa_r+0x66c>
 8007d0a:	e714      	b.n	8007b36 <_dtoa_r+0x496>
 8007d0c:	9b08      	ldr	r3, [sp, #32]
 8007d0e:	001a      	movs	r2, r3
 8007d10:	3a01      	subs	r2, #1
 8007d12:	9208      	str	r2, [sp, #32]
 8007d14:	7812      	ldrb	r2, [r2, #0]
 8007d16:	2a30      	cmp	r2, #48	; 0x30
 8007d18:	d0f8      	beq.n	8007d0c <_dtoa_r+0x66c>
 8007d1a:	9308      	str	r3, [sp, #32]
 8007d1c:	9602      	str	r6, [sp, #8]
 8007d1e:	e055      	b.n	8007dcc <_dtoa_r+0x72c>
 8007d20:	2200      	movs	r2, #0
 8007d22:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <_dtoa_r+0x69c>)
 8007d24:	f7fa f9d2 	bl	80020cc <__aeabi_dmul>
 8007d28:	0004      	movs	r4, r0
 8007d2a:	000d      	movs	r5, r1
 8007d2c:	e7b2      	b.n	8007c94 <_dtoa_r+0x5f4>
 8007d2e:	46c0      	nop			; (mov r8, r8)
 8007d30:	0800f338 	.word	0x0800f338
 8007d34:	0800f310 	.word	0x0800f310
 8007d38:	3ff00000 	.word	0x3ff00000
 8007d3c:	40240000 	.word	0x40240000
 8007d40:	401c0000 	.word	0x401c0000
 8007d44:	fcc00000 	.word	0xfcc00000
 8007d48:	40140000 	.word	0x40140000
 8007d4c:	7cc00000 	.word	0x7cc00000
 8007d50:	3fe00000 	.word	0x3fe00000
 8007d54:	9b07      	ldr	r3, [sp, #28]
 8007d56:	9e06      	ldr	r6, [sp, #24]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	199b      	adds	r3, r3, r6
 8007d5c:	930c      	str	r3, [sp, #48]	; 0x30
 8007d5e:	9c08      	ldr	r4, [sp, #32]
 8007d60:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007d62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d66:	0020      	movs	r0, r4
 8007d68:	0029      	movs	r1, r5
 8007d6a:	f7f9 fdad 	bl	80018c8 <__aeabi_ddiv>
 8007d6e:	f7fa ffc9 	bl	8002d04 <__aeabi_d2iz>
 8007d72:	9007      	str	r0, [sp, #28]
 8007d74:	f7fa fffc 	bl	8002d70 <__aeabi_i2d>
 8007d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d7c:	f7fa f9a6 	bl	80020cc <__aeabi_dmul>
 8007d80:	0002      	movs	r2, r0
 8007d82:	000b      	movs	r3, r1
 8007d84:	0020      	movs	r0, r4
 8007d86:	0029      	movs	r1, r5
 8007d88:	f7fa fc0c 	bl	80025a4 <__aeabi_dsub>
 8007d8c:	0033      	movs	r3, r6
 8007d8e:	9a07      	ldr	r2, [sp, #28]
 8007d90:	3601      	adds	r6, #1
 8007d92:	3230      	adds	r2, #48	; 0x30
 8007d94:	701a      	strb	r2, [r3, #0]
 8007d96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d98:	9608      	str	r6, [sp, #32]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d139      	bne.n	8007e12 <_dtoa_r+0x772>
 8007d9e:	0002      	movs	r2, r0
 8007da0:	000b      	movs	r3, r1
 8007da2:	f7f9 fa55 	bl	8001250 <__aeabi_dadd>
 8007da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007daa:	0004      	movs	r4, r0
 8007dac:	000d      	movs	r5, r1
 8007dae:	f7f8 fb63 	bl	8000478 <__aeabi_dcmpgt>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d11b      	bne.n	8007dee <_dtoa_r+0x74e>
 8007db6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dba:	0020      	movs	r0, r4
 8007dbc:	0029      	movs	r1, r5
 8007dbe:	f7f8 fb41 	bl	8000444 <__aeabi_dcmpeq>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d002      	beq.n	8007dcc <_dtoa_r+0x72c>
 8007dc6:	9b07      	ldr	r3, [sp, #28]
 8007dc8:	07db      	lsls	r3, r3, #31
 8007dca:	d410      	bmi.n	8007dee <_dtoa_r+0x74e>
 8007dcc:	0038      	movs	r0, r7
 8007dce:	9905      	ldr	r1, [sp, #20]
 8007dd0:	f000 fade 	bl	8008390 <_Bfree>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	9a08      	ldr	r2, [sp, #32]
 8007dd8:	9802      	ldr	r0, [sp, #8]
 8007dda:	7013      	strb	r3, [r2, #0]
 8007ddc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007dde:	3001      	adds	r0, #1
 8007de0:	6018      	str	r0, [r3, #0]
 8007de2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d100      	bne.n	8007dea <_dtoa_r+0x74a>
 8007de8:	e4a6      	b.n	8007738 <_dtoa_r+0x98>
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	e4a4      	b.n	8007738 <_dtoa_r+0x98>
 8007dee:	9e02      	ldr	r6, [sp, #8]
 8007df0:	9b08      	ldr	r3, [sp, #32]
 8007df2:	9308      	str	r3, [sp, #32]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	781a      	ldrb	r2, [r3, #0]
 8007df8:	2a39      	cmp	r2, #57	; 0x39
 8007dfa:	d106      	bne.n	8007e0a <_dtoa_r+0x76a>
 8007dfc:	9a06      	ldr	r2, [sp, #24]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d1f7      	bne.n	8007df2 <_dtoa_r+0x752>
 8007e02:	2230      	movs	r2, #48	; 0x30
 8007e04:	9906      	ldr	r1, [sp, #24]
 8007e06:	3601      	adds	r6, #1
 8007e08:	700a      	strb	r2, [r1, #0]
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	3201      	adds	r2, #1
 8007e0e:	701a      	strb	r2, [r3, #0]
 8007e10:	e784      	b.n	8007d1c <_dtoa_r+0x67c>
 8007e12:	2200      	movs	r2, #0
 8007e14:	4baa      	ldr	r3, [pc, #680]	; (80080c0 <_dtoa_r+0xa20>)
 8007e16:	f7fa f959 	bl	80020cc <__aeabi_dmul>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	0004      	movs	r4, r0
 8007e20:	000d      	movs	r5, r1
 8007e22:	f7f8 fb0f 	bl	8000444 <__aeabi_dcmpeq>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d09b      	beq.n	8007d62 <_dtoa_r+0x6c2>
 8007e2a:	e7cf      	b.n	8007dcc <_dtoa_r+0x72c>
 8007e2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e2e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007e30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e32:	2d00      	cmp	r5, #0
 8007e34:	d012      	beq.n	8007e5c <_dtoa_r+0x7bc>
 8007e36:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e38:	2a01      	cmp	r2, #1
 8007e3a:	dc66      	bgt.n	8007f0a <_dtoa_r+0x86a>
 8007e3c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e3e:	2a00      	cmp	r2, #0
 8007e40:	d05d      	beq.n	8007efe <_dtoa_r+0x85e>
 8007e42:	4aa0      	ldr	r2, [pc, #640]	; (80080c4 <_dtoa_r+0xa24>)
 8007e44:	189b      	adds	r3, r3, r2
 8007e46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e48:	2101      	movs	r1, #1
 8007e4a:	18d2      	adds	r2, r2, r3
 8007e4c:	920a      	str	r2, [sp, #40]	; 0x28
 8007e4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e50:	0038      	movs	r0, r7
 8007e52:	18d3      	adds	r3, r2, r3
 8007e54:	930d      	str	r3, [sp, #52]	; 0x34
 8007e56:	f000 fb4b 	bl	80084f0 <__i2b>
 8007e5a:	0005      	movs	r5, r0
 8007e5c:	2c00      	cmp	r4, #0
 8007e5e:	dd0e      	ble.n	8007e7e <_dtoa_r+0x7de>
 8007e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	dd0b      	ble.n	8007e7e <_dtoa_r+0x7de>
 8007e66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e68:	0023      	movs	r3, r4
 8007e6a:	4294      	cmp	r4, r2
 8007e6c:	dd00      	ble.n	8007e70 <_dtoa_r+0x7d0>
 8007e6e:	0013      	movs	r3, r2
 8007e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e72:	1ae4      	subs	r4, r4, r3
 8007e74:	1ad2      	subs	r2, r2, r3
 8007e76:	920a      	str	r2, [sp, #40]	; 0x28
 8007e78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	930d      	str	r3, [sp, #52]	; 0x34
 8007e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d01f      	beq.n	8007ec4 <_dtoa_r+0x824>
 8007e84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d054      	beq.n	8007f34 <_dtoa_r+0x894>
 8007e8a:	2e00      	cmp	r6, #0
 8007e8c:	dd11      	ble.n	8007eb2 <_dtoa_r+0x812>
 8007e8e:	0029      	movs	r1, r5
 8007e90:	0032      	movs	r2, r6
 8007e92:	0038      	movs	r0, r7
 8007e94:	f000 fbf2 	bl	800867c <__pow5mult>
 8007e98:	9a05      	ldr	r2, [sp, #20]
 8007e9a:	0001      	movs	r1, r0
 8007e9c:	0005      	movs	r5, r0
 8007e9e:	0038      	movs	r0, r7
 8007ea0:	f000 fb3c 	bl	800851c <__multiply>
 8007ea4:	9905      	ldr	r1, [sp, #20]
 8007ea6:	9014      	str	r0, [sp, #80]	; 0x50
 8007ea8:	0038      	movs	r0, r7
 8007eaa:	f000 fa71 	bl	8008390 <_Bfree>
 8007eae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007eb0:	9305      	str	r3, [sp, #20]
 8007eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eb4:	1b9a      	subs	r2, r3, r6
 8007eb6:	42b3      	cmp	r3, r6
 8007eb8:	d004      	beq.n	8007ec4 <_dtoa_r+0x824>
 8007eba:	0038      	movs	r0, r7
 8007ebc:	9905      	ldr	r1, [sp, #20]
 8007ebe:	f000 fbdd 	bl	800867c <__pow5mult>
 8007ec2:	9005      	str	r0, [sp, #20]
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	0038      	movs	r0, r7
 8007ec8:	f000 fb12 	bl	80084f0 <__i2b>
 8007ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ece:	0006      	movs	r6, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	dd31      	ble.n	8007f38 <_dtoa_r+0x898>
 8007ed4:	001a      	movs	r2, r3
 8007ed6:	0001      	movs	r1, r0
 8007ed8:	0038      	movs	r0, r7
 8007eda:	f000 fbcf 	bl	800867c <__pow5mult>
 8007ede:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ee0:	0006      	movs	r6, r0
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	dd2d      	ble.n	8007f42 <_dtoa_r+0x8a2>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	930e      	str	r3, [sp, #56]	; 0x38
 8007eea:	6933      	ldr	r3, [r6, #16]
 8007eec:	3303      	adds	r3, #3
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	18f3      	adds	r3, r6, r3
 8007ef2:	6858      	ldr	r0, [r3, #4]
 8007ef4:	f000 fab4 	bl	8008460 <__hi0bits>
 8007ef8:	2320      	movs	r3, #32
 8007efa:	1a18      	subs	r0, r3, r0
 8007efc:	e039      	b.n	8007f72 <_dtoa_r+0x8d2>
 8007efe:	2336      	movs	r3, #54	; 0x36
 8007f00:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f02:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007f04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f06:	1a9b      	subs	r3, r3, r2
 8007f08:	e79d      	b.n	8007e46 <_dtoa_r+0x7a6>
 8007f0a:	9b07      	ldr	r3, [sp, #28]
 8007f0c:	1e5e      	subs	r6, r3, #1
 8007f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f10:	42b3      	cmp	r3, r6
 8007f12:	db07      	blt.n	8007f24 <_dtoa_r+0x884>
 8007f14:	1b9e      	subs	r6, r3, r6
 8007f16:	9b07      	ldr	r3, [sp, #28]
 8007f18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da93      	bge.n	8007e46 <_dtoa_r+0x7a6>
 8007f1e:	1ae4      	subs	r4, r4, r3
 8007f20:	2300      	movs	r3, #0
 8007f22:	e790      	b.n	8007e46 <_dtoa_r+0x7a6>
 8007f24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f28:	1af3      	subs	r3, r6, r3
 8007f2a:	18d3      	adds	r3, r2, r3
 8007f2c:	960e      	str	r6, [sp, #56]	; 0x38
 8007f2e:	9315      	str	r3, [sp, #84]	; 0x54
 8007f30:	2600      	movs	r6, #0
 8007f32:	e7f0      	b.n	8007f16 <_dtoa_r+0x876>
 8007f34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f36:	e7c0      	b.n	8007eba <_dtoa_r+0x81a>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	dc13      	bgt.n	8007f6a <_dtoa_r+0x8ca>
 8007f42:	2300      	movs	r3, #0
 8007f44:	930e      	str	r3, [sp, #56]	; 0x38
 8007f46:	9b08      	ldr	r3, [sp, #32]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10e      	bne.n	8007f6a <_dtoa_r+0x8ca>
 8007f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4e:	031b      	lsls	r3, r3, #12
 8007f50:	d10b      	bne.n	8007f6a <_dtoa_r+0x8ca>
 8007f52:	4b5d      	ldr	r3, [pc, #372]	; (80080c8 <_dtoa_r+0xa28>)
 8007f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f56:	4213      	tst	r3, r2
 8007f58:	d007      	beq.n	8007f6a <_dtoa_r+0x8ca>
 8007f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f62:	3301      	adds	r3, #1
 8007f64:	930d      	str	r3, [sp, #52]	; 0x34
 8007f66:	2301      	movs	r3, #1
 8007f68:	930e      	str	r3, [sp, #56]	; 0x38
 8007f6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f6c:	2001      	movs	r0, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1bb      	bne.n	8007eea <_dtoa_r+0x84a>
 8007f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f74:	221f      	movs	r2, #31
 8007f76:	1818      	adds	r0, r3, r0
 8007f78:	0003      	movs	r3, r0
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	4210      	tst	r0, r2
 8007f7e:	d046      	beq.n	800800e <_dtoa_r+0x96e>
 8007f80:	3201      	adds	r2, #1
 8007f82:	1ad2      	subs	r2, r2, r3
 8007f84:	2a04      	cmp	r2, #4
 8007f86:	dd3f      	ble.n	8008008 <_dtoa_r+0x968>
 8007f88:	221c      	movs	r2, #28
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f8e:	18e4      	adds	r4, r4, r3
 8007f90:	18d2      	adds	r2, r2, r3
 8007f92:	920a      	str	r2, [sp, #40]	; 0x28
 8007f94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f96:	18d3      	adds	r3, r2, r3
 8007f98:	930d      	str	r3, [sp, #52]	; 0x34
 8007f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dd05      	ble.n	8007fac <_dtoa_r+0x90c>
 8007fa0:	001a      	movs	r2, r3
 8007fa2:	0038      	movs	r0, r7
 8007fa4:	9905      	ldr	r1, [sp, #20]
 8007fa6:	f000 fbc5 	bl	8008734 <__lshift>
 8007faa:	9005      	str	r0, [sp, #20]
 8007fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	dd05      	ble.n	8007fbe <_dtoa_r+0x91e>
 8007fb2:	0031      	movs	r1, r6
 8007fb4:	001a      	movs	r2, r3
 8007fb6:	0038      	movs	r0, r7
 8007fb8:	f000 fbbc 	bl	8008734 <__lshift>
 8007fbc:	0006      	movs	r6, r0
 8007fbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d026      	beq.n	8008012 <_dtoa_r+0x972>
 8007fc4:	0031      	movs	r1, r6
 8007fc6:	9805      	ldr	r0, [sp, #20]
 8007fc8:	f000 fc22 	bl	8008810 <__mcmp>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	da20      	bge.n	8008012 <_dtoa_r+0x972>
 8007fd0:	9b02      	ldr	r3, [sp, #8]
 8007fd2:	220a      	movs	r2, #10
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	9302      	str	r3, [sp, #8]
 8007fd8:	0038      	movs	r0, r7
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9905      	ldr	r1, [sp, #20]
 8007fde:	f000 f9fb 	bl	80083d8 <__multadd>
 8007fe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fe4:	9005      	str	r0, [sp, #20]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d100      	bne.n	8007fec <_dtoa_r+0x94c>
 8007fea:	e166      	b.n	80082ba <_dtoa_r+0xc1a>
 8007fec:	2300      	movs	r3, #0
 8007fee:	0029      	movs	r1, r5
 8007ff0:	220a      	movs	r2, #10
 8007ff2:	0038      	movs	r0, r7
 8007ff4:	f000 f9f0 	bl	80083d8 <__multadd>
 8007ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ffa:	0005      	movs	r5, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dc47      	bgt.n	8008090 <_dtoa_r+0x9f0>
 8008000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008002:	2b02      	cmp	r3, #2
 8008004:	dc0d      	bgt.n	8008022 <_dtoa_r+0x982>
 8008006:	e043      	b.n	8008090 <_dtoa_r+0x9f0>
 8008008:	2a04      	cmp	r2, #4
 800800a:	d0c6      	beq.n	8007f9a <_dtoa_r+0x8fa>
 800800c:	0013      	movs	r3, r2
 800800e:	331c      	adds	r3, #28
 8008010:	e7bc      	b.n	8007f8c <_dtoa_r+0x8ec>
 8008012:	9b07      	ldr	r3, [sp, #28]
 8008014:	2b00      	cmp	r3, #0
 8008016:	dc35      	bgt.n	8008084 <_dtoa_r+0x9e4>
 8008018:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800801a:	2b02      	cmp	r3, #2
 800801c:	dd32      	ble.n	8008084 <_dtoa_r+0x9e4>
 800801e:	9b07      	ldr	r3, [sp, #28]
 8008020:	930c      	str	r3, [sp, #48]	; 0x30
 8008022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10c      	bne.n	8008042 <_dtoa_r+0x9a2>
 8008028:	0031      	movs	r1, r6
 800802a:	2205      	movs	r2, #5
 800802c:	0038      	movs	r0, r7
 800802e:	f000 f9d3 	bl	80083d8 <__multadd>
 8008032:	0006      	movs	r6, r0
 8008034:	0001      	movs	r1, r0
 8008036:	9805      	ldr	r0, [sp, #20]
 8008038:	f000 fbea 	bl	8008810 <__mcmp>
 800803c:	2800      	cmp	r0, #0
 800803e:	dd00      	ble.n	8008042 <_dtoa_r+0x9a2>
 8008040:	e5a5      	b.n	8007b8e <_dtoa_r+0x4ee>
 8008042:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008044:	43db      	mvns	r3, r3
 8008046:	9302      	str	r3, [sp, #8]
 8008048:	9b06      	ldr	r3, [sp, #24]
 800804a:	9308      	str	r3, [sp, #32]
 800804c:	2400      	movs	r4, #0
 800804e:	0031      	movs	r1, r6
 8008050:	0038      	movs	r0, r7
 8008052:	f000 f99d 	bl	8008390 <_Bfree>
 8008056:	2d00      	cmp	r5, #0
 8008058:	d100      	bne.n	800805c <_dtoa_r+0x9bc>
 800805a:	e6b7      	b.n	8007dcc <_dtoa_r+0x72c>
 800805c:	2c00      	cmp	r4, #0
 800805e:	d005      	beq.n	800806c <_dtoa_r+0x9cc>
 8008060:	42ac      	cmp	r4, r5
 8008062:	d003      	beq.n	800806c <_dtoa_r+0x9cc>
 8008064:	0021      	movs	r1, r4
 8008066:	0038      	movs	r0, r7
 8008068:	f000 f992 	bl	8008390 <_Bfree>
 800806c:	0029      	movs	r1, r5
 800806e:	0038      	movs	r0, r7
 8008070:	f000 f98e 	bl	8008390 <_Bfree>
 8008074:	e6aa      	b.n	8007dcc <_dtoa_r+0x72c>
 8008076:	2600      	movs	r6, #0
 8008078:	0035      	movs	r5, r6
 800807a:	e7e2      	b.n	8008042 <_dtoa_r+0x9a2>
 800807c:	9602      	str	r6, [sp, #8]
 800807e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008080:	0035      	movs	r5, r6
 8008082:	e584      	b.n	8007b8e <_dtoa_r+0x4ee>
 8008084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d100      	bne.n	800808c <_dtoa_r+0x9ec>
 800808a:	e0ce      	b.n	800822a <_dtoa_r+0xb8a>
 800808c:	9b07      	ldr	r3, [sp, #28]
 800808e:	930c      	str	r3, [sp, #48]	; 0x30
 8008090:	2c00      	cmp	r4, #0
 8008092:	dd05      	ble.n	80080a0 <_dtoa_r+0xa00>
 8008094:	0029      	movs	r1, r5
 8008096:	0022      	movs	r2, r4
 8008098:	0038      	movs	r0, r7
 800809a:	f000 fb4b 	bl	8008734 <__lshift>
 800809e:	0005      	movs	r5, r0
 80080a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080a2:	0028      	movs	r0, r5
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d022      	beq.n	80080ee <_dtoa_r+0xa4e>
 80080a8:	0038      	movs	r0, r7
 80080aa:	6869      	ldr	r1, [r5, #4]
 80080ac:	f000 f92c 	bl	8008308 <_Balloc>
 80080b0:	1e04      	subs	r4, r0, #0
 80080b2:	d10f      	bne.n	80080d4 <_dtoa_r+0xa34>
 80080b4:	0002      	movs	r2, r0
 80080b6:	4b05      	ldr	r3, [pc, #20]	; (80080cc <_dtoa_r+0xa2c>)
 80080b8:	4905      	ldr	r1, [pc, #20]	; (80080d0 <_dtoa_r+0xa30>)
 80080ba:	f7ff fb06 	bl	80076ca <_dtoa_r+0x2a>
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	40240000 	.word	0x40240000
 80080c4:	00000433 	.word	0x00000433
 80080c8:	7ff00000 	.word	0x7ff00000
 80080cc:	0800f29d 	.word	0x0800f29d
 80080d0:	000002ea 	.word	0x000002ea
 80080d4:	0029      	movs	r1, r5
 80080d6:	692b      	ldr	r3, [r5, #16]
 80080d8:	310c      	adds	r1, #12
 80080da:	1c9a      	adds	r2, r3, #2
 80080dc:	0092      	lsls	r2, r2, #2
 80080de:	300c      	adds	r0, #12
 80080e0:	f7fe fdb2 	bl	8006c48 <memcpy>
 80080e4:	2201      	movs	r2, #1
 80080e6:	0021      	movs	r1, r4
 80080e8:	0038      	movs	r0, r7
 80080ea:	f000 fb23 	bl	8008734 <__lshift>
 80080ee:	9b06      	ldr	r3, [sp, #24]
 80080f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080f2:	930a      	str	r3, [sp, #40]	; 0x28
 80080f4:	3b01      	subs	r3, #1
 80080f6:	189b      	adds	r3, r3, r2
 80080f8:	2201      	movs	r2, #1
 80080fa:	002c      	movs	r4, r5
 80080fc:	0005      	movs	r5, r0
 80080fe:	9314      	str	r3, [sp, #80]	; 0x50
 8008100:	9b08      	ldr	r3, [sp, #32]
 8008102:	4013      	ands	r3, r2
 8008104:	930f      	str	r3, [sp, #60]	; 0x3c
 8008106:	0031      	movs	r1, r6
 8008108:	9805      	ldr	r0, [sp, #20]
 800810a:	f7ff fa3d 	bl	8007588 <quorem>
 800810e:	0003      	movs	r3, r0
 8008110:	0021      	movs	r1, r4
 8008112:	3330      	adds	r3, #48	; 0x30
 8008114:	900d      	str	r0, [sp, #52]	; 0x34
 8008116:	9805      	ldr	r0, [sp, #20]
 8008118:	9307      	str	r3, [sp, #28]
 800811a:	f000 fb79 	bl	8008810 <__mcmp>
 800811e:	002a      	movs	r2, r5
 8008120:	900e      	str	r0, [sp, #56]	; 0x38
 8008122:	0031      	movs	r1, r6
 8008124:	0038      	movs	r0, r7
 8008126:	f000 fb8f 	bl	8008848 <__mdiff>
 800812a:	68c3      	ldr	r3, [r0, #12]
 800812c:	9008      	str	r0, [sp, #32]
 800812e:	9310      	str	r3, [sp, #64]	; 0x40
 8008130:	2301      	movs	r3, #1
 8008132:	930c      	str	r3, [sp, #48]	; 0x30
 8008134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	d104      	bne.n	8008144 <_dtoa_r+0xaa4>
 800813a:	0001      	movs	r1, r0
 800813c:	9805      	ldr	r0, [sp, #20]
 800813e:	f000 fb67 	bl	8008810 <__mcmp>
 8008142:	900c      	str	r0, [sp, #48]	; 0x30
 8008144:	0038      	movs	r0, r7
 8008146:	9908      	ldr	r1, [sp, #32]
 8008148:	f000 f922 	bl	8008390 <_Bfree>
 800814c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800814e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008150:	3301      	adds	r3, #1
 8008152:	9308      	str	r3, [sp, #32]
 8008154:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008156:	4313      	orrs	r3, r2
 8008158:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800815a:	4313      	orrs	r3, r2
 800815c:	d10c      	bne.n	8008178 <_dtoa_r+0xad8>
 800815e:	9b07      	ldr	r3, [sp, #28]
 8008160:	2b39      	cmp	r3, #57	; 0x39
 8008162:	d026      	beq.n	80081b2 <_dtoa_r+0xb12>
 8008164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008166:	2b00      	cmp	r3, #0
 8008168:	dd02      	ble.n	8008170 <_dtoa_r+0xad0>
 800816a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800816c:	3331      	adds	r3, #49	; 0x31
 800816e:	9307      	str	r3, [sp, #28]
 8008170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008172:	9a07      	ldr	r2, [sp, #28]
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	e76a      	b.n	800804e <_dtoa_r+0x9ae>
 8008178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800817a:	2b00      	cmp	r3, #0
 800817c:	db04      	blt.n	8008188 <_dtoa_r+0xae8>
 800817e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008180:	4313      	orrs	r3, r2
 8008182:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008184:	4313      	orrs	r3, r2
 8008186:	d11f      	bne.n	80081c8 <_dtoa_r+0xb28>
 8008188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800818a:	2b00      	cmp	r3, #0
 800818c:	ddf0      	ble.n	8008170 <_dtoa_r+0xad0>
 800818e:	9905      	ldr	r1, [sp, #20]
 8008190:	2201      	movs	r2, #1
 8008192:	0038      	movs	r0, r7
 8008194:	f000 face 	bl	8008734 <__lshift>
 8008198:	0031      	movs	r1, r6
 800819a:	9005      	str	r0, [sp, #20]
 800819c:	f000 fb38 	bl	8008810 <__mcmp>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	dc03      	bgt.n	80081ac <_dtoa_r+0xb0c>
 80081a4:	d1e4      	bne.n	8008170 <_dtoa_r+0xad0>
 80081a6:	9b07      	ldr	r3, [sp, #28]
 80081a8:	07db      	lsls	r3, r3, #31
 80081aa:	d5e1      	bpl.n	8008170 <_dtoa_r+0xad0>
 80081ac:	9b07      	ldr	r3, [sp, #28]
 80081ae:	2b39      	cmp	r3, #57	; 0x39
 80081b0:	d1db      	bne.n	800816a <_dtoa_r+0xaca>
 80081b2:	2339      	movs	r3, #57	; 0x39
 80081b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081b6:	7013      	strb	r3, [r2, #0]
 80081b8:	9b08      	ldr	r3, [sp, #32]
 80081ba:	9308      	str	r3, [sp, #32]
 80081bc:	3b01      	subs	r3, #1
 80081be:	781a      	ldrb	r2, [r3, #0]
 80081c0:	2a39      	cmp	r2, #57	; 0x39
 80081c2:	d068      	beq.n	8008296 <_dtoa_r+0xbf6>
 80081c4:	3201      	adds	r2, #1
 80081c6:	e7d5      	b.n	8008174 <_dtoa_r+0xad4>
 80081c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	dd07      	ble.n	80081de <_dtoa_r+0xb3e>
 80081ce:	9b07      	ldr	r3, [sp, #28]
 80081d0:	2b39      	cmp	r3, #57	; 0x39
 80081d2:	d0ee      	beq.n	80081b2 <_dtoa_r+0xb12>
 80081d4:	9b07      	ldr	r3, [sp, #28]
 80081d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081d8:	3301      	adds	r3, #1
 80081da:	7013      	strb	r3, [r2, #0]
 80081dc:	e737      	b.n	800804e <_dtoa_r+0x9ae>
 80081de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e0:	9a07      	ldr	r2, [sp, #28]
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d03e      	beq.n	800826a <_dtoa_r+0xbca>
 80081ec:	2300      	movs	r3, #0
 80081ee:	220a      	movs	r2, #10
 80081f0:	9905      	ldr	r1, [sp, #20]
 80081f2:	0038      	movs	r0, r7
 80081f4:	f000 f8f0 	bl	80083d8 <__multadd>
 80081f8:	2300      	movs	r3, #0
 80081fa:	9005      	str	r0, [sp, #20]
 80081fc:	220a      	movs	r2, #10
 80081fe:	0021      	movs	r1, r4
 8008200:	0038      	movs	r0, r7
 8008202:	42ac      	cmp	r4, r5
 8008204:	d106      	bne.n	8008214 <_dtoa_r+0xb74>
 8008206:	f000 f8e7 	bl	80083d8 <__multadd>
 800820a:	0004      	movs	r4, r0
 800820c:	0005      	movs	r5, r0
 800820e:	9b08      	ldr	r3, [sp, #32]
 8008210:	930a      	str	r3, [sp, #40]	; 0x28
 8008212:	e778      	b.n	8008106 <_dtoa_r+0xa66>
 8008214:	f000 f8e0 	bl	80083d8 <__multadd>
 8008218:	0029      	movs	r1, r5
 800821a:	0004      	movs	r4, r0
 800821c:	2300      	movs	r3, #0
 800821e:	220a      	movs	r2, #10
 8008220:	0038      	movs	r0, r7
 8008222:	f000 f8d9 	bl	80083d8 <__multadd>
 8008226:	0005      	movs	r5, r0
 8008228:	e7f1      	b.n	800820e <_dtoa_r+0xb6e>
 800822a:	9b07      	ldr	r3, [sp, #28]
 800822c:	930c      	str	r3, [sp, #48]	; 0x30
 800822e:	2400      	movs	r4, #0
 8008230:	0031      	movs	r1, r6
 8008232:	9805      	ldr	r0, [sp, #20]
 8008234:	f7ff f9a8 	bl	8007588 <quorem>
 8008238:	9b06      	ldr	r3, [sp, #24]
 800823a:	3030      	adds	r0, #48	; 0x30
 800823c:	5518      	strb	r0, [r3, r4]
 800823e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008240:	3401      	adds	r4, #1
 8008242:	9007      	str	r0, [sp, #28]
 8008244:	42a3      	cmp	r3, r4
 8008246:	dd07      	ble.n	8008258 <_dtoa_r+0xbb8>
 8008248:	2300      	movs	r3, #0
 800824a:	220a      	movs	r2, #10
 800824c:	0038      	movs	r0, r7
 800824e:	9905      	ldr	r1, [sp, #20]
 8008250:	f000 f8c2 	bl	80083d8 <__multadd>
 8008254:	9005      	str	r0, [sp, #20]
 8008256:	e7eb      	b.n	8008230 <_dtoa_r+0xb90>
 8008258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800825a:	2001      	movs	r0, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	dd00      	ble.n	8008262 <_dtoa_r+0xbc2>
 8008260:	0018      	movs	r0, r3
 8008262:	2400      	movs	r4, #0
 8008264:	9b06      	ldr	r3, [sp, #24]
 8008266:	181b      	adds	r3, r3, r0
 8008268:	9308      	str	r3, [sp, #32]
 800826a:	9905      	ldr	r1, [sp, #20]
 800826c:	2201      	movs	r2, #1
 800826e:	0038      	movs	r0, r7
 8008270:	f000 fa60 	bl	8008734 <__lshift>
 8008274:	0031      	movs	r1, r6
 8008276:	9005      	str	r0, [sp, #20]
 8008278:	f000 faca 	bl	8008810 <__mcmp>
 800827c:	2800      	cmp	r0, #0
 800827e:	dc9b      	bgt.n	80081b8 <_dtoa_r+0xb18>
 8008280:	d102      	bne.n	8008288 <_dtoa_r+0xbe8>
 8008282:	9b07      	ldr	r3, [sp, #28]
 8008284:	07db      	lsls	r3, r3, #31
 8008286:	d497      	bmi.n	80081b8 <_dtoa_r+0xb18>
 8008288:	9b08      	ldr	r3, [sp, #32]
 800828a:	9308      	str	r3, [sp, #32]
 800828c:	3b01      	subs	r3, #1
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	2a30      	cmp	r2, #48	; 0x30
 8008292:	d0fa      	beq.n	800828a <_dtoa_r+0xbea>
 8008294:	e6db      	b.n	800804e <_dtoa_r+0x9ae>
 8008296:	9a06      	ldr	r2, [sp, #24]
 8008298:	429a      	cmp	r2, r3
 800829a:	d18e      	bne.n	80081ba <_dtoa_r+0xb1a>
 800829c:	9b02      	ldr	r3, [sp, #8]
 800829e:	3301      	adds	r3, #1
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	2331      	movs	r3, #49	; 0x31
 80082a4:	e799      	b.n	80081da <_dtoa_r+0xb3a>
 80082a6:	4b09      	ldr	r3, [pc, #36]	; (80082cc <_dtoa_r+0xc2c>)
 80082a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80082aa:	9306      	str	r3, [sp, #24]
 80082ac:	4b08      	ldr	r3, [pc, #32]	; (80082d0 <_dtoa_r+0xc30>)
 80082ae:	2a00      	cmp	r2, #0
 80082b0:	d001      	beq.n	80082b6 <_dtoa_r+0xc16>
 80082b2:	f7ff fa3f 	bl	8007734 <_dtoa_r+0x94>
 80082b6:	f7ff fa3f 	bl	8007738 <_dtoa_r+0x98>
 80082ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dcb6      	bgt.n	800822e <_dtoa_r+0xb8e>
 80082c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	dd00      	ble.n	80082c8 <_dtoa_r+0xc28>
 80082c6:	e6ac      	b.n	8008022 <_dtoa_r+0x982>
 80082c8:	e7b1      	b.n	800822e <_dtoa_r+0xb8e>
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	0800f21e 	.word	0x0800f21e
 80082d0:	0800f226 	.word	0x0800f226

080082d4 <_localeconv_r>:
 80082d4:	4800      	ldr	r0, [pc, #0]	; (80082d8 <_localeconv_r+0x4>)
 80082d6:	4770      	bx	lr
 80082d8:	200001fc 	.word	0x200001fc

080082dc <malloc>:
 80082dc:	b510      	push	{r4, lr}
 80082de:	4b03      	ldr	r3, [pc, #12]	; (80082ec <malloc+0x10>)
 80082e0:	0001      	movs	r1, r0
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	f000 fc44 	bl	8008b70 <_malloc_r>
 80082e8:	bd10      	pop	{r4, pc}
 80082ea:	46c0      	nop			; (mov r8, r8)
 80082ec:	200000a8 	.word	0x200000a8

080082f0 <memchr>:
 80082f0:	b2c9      	uxtb	r1, r1
 80082f2:	1882      	adds	r2, r0, r2
 80082f4:	4290      	cmp	r0, r2
 80082f6:	d101      	bne.n	80082fc <memchr+0xc>
 80082f8:	2000      	movs	r0, #0
 80082fa:	4770      	bx	lr
 80082fc:	7803      	ldrb	r3, [r0, #0]
 80082fe:	428b      	cmp	r3, r1
 8008300:	d0fb      	beq.n	80082fa <memchr+0xa>
 8008302:	3001      	adds	r0, #1
 8008304:	e7f6      	b.n	80082f4 <memchr+0x4>
	...

08008308 <_Balloc>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800830c:	0006      	movs	r6, r0
 800830e:	000c      	movs	r4, r1
 8008310:	2d00      	cmp	r5, #0
 8008312:	d10e      	bne.n	8008332 <_Balloc+0x2a>
 8008314:	2010      	movs	r0, #16
 8008316:	f7ff ffe1 	bl	80082dc <malloc>
 800831a:	1e02      	subs	r2, r0, #0
 800831c:	6270      	str	r0, [r6, #36]	; 0x24
 800831e:	d104      	bne.n	800832a <_Balloc+0x22>
 8008320:	2166      	movs	r1, #102	; 0x66
 8008322:	4b19      	ldr	r3, [pc, #100]	; (8008388 <_Balloc+0x80>)
 8008324:	4819      	ldr	r0, [pc, #100]	; (800838c <_Balloc+0x84>)
 8008326:	f000 fe0d 	bl	8008f44 <__assert_func>
 800832a:	6045      	str	r5, [r0, #4]
 800832c:	6085      	str	r5, [r0, #8]
 800832e:	6005      	str	r5, [r0, #0]
 8008330:	60c5      	str	r5, [r0, #12]
 8008332:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008334:	68eb      	ldr	r3, [r5, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d013      	beq.n	8008362 <_Balloc+0x5a>
 800833a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800833c:	00a2      	lsls	r2, r4, #2
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	189b      	adds	r3, r3, r2
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	2800      	cmp	r0, #0
 8008346:	d118      	bne.n	800837a <_Balloc+0x72>
 8008348:	2101      	movs	r1, #1
 800834a:	000d      	movs	r5, r1
 800834c:	40a5      	lsls	r5, r4
 800834e:	1d6a      	adds	r2, r5, #5
 8008350:	0030      	movs	r0, r6
 8008352:	0092      	lsls	r2, r2, #2
 8008354:	f000 fb74 	bl	8008a40 <_calloc_r>
 8008358:	2800      	cmp	r0, #0
 800835a:	d00c      	beq.n	8008376 <_Balloc+0x6e>
 800835c:	6044      	str	r4, [r0, #4]
 800835e:	6085      	str	r5, [r0, #8]
 8008360:	e00d      	b.n	800837e <_Balloc+0x76>
 8008362:	2221      	movs	r2, #33	; 0x21
 8008364:	2104      	movs	r1, #4
 8008366:	0030      	movs	r0, r6
 8008368:	f000 fb6a 	bl	8008a40 <_calloc_r>
 800836c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800836e:	60e8      	str	r0, [r5, #12]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e1      	bne.n	800833a <_Balloc+0x32>
 8008376:	2000      	movs	r0, #0
 8008378:	bd70      	pop	{r4, r5, r6, pc}
 800837a:	6802      	ldr	r2, [r0, #0]
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	2300      	movs	r3, #0
 8008380:	6103      	str	r3, [r0, #16]
 8008382:	60c3      	str	r3, [r0, #12]
 8008384:	e7f8      	b.n	8008378 <_Balloc+0x70>
 8008386:	46c0      	nop			; (mov r8, r8)
 8008388:	0800f22b 	.word	0x0800f22b
 800838c:	0800f2ae 	.word	0x0800f2ae

08008390 <_Bfree>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008394:	0005      	movs	r5, r0
 8008396:	000c      	movs	r4, r1
 8008398:	2e00      	cmp	r6, #0
 800839a:	d10e      	bne.n	80083ba <_Bfree+0x2a>
 800839c:	2010      	movs	r0, #16
 800839e:	f7ff ff9d 	bl	80082dc <malloc>
 80083a2:	1e02      	subs	r2, r0, #0
 80083a4:	6268      	str	r0, [r5, #36]	; 0x24
 80083a6:	d104      	bne.n	80083b2 <_Bfree+0x22>
 80083a8:	218a      	movs	r1, #138	; 0x8a
 80083aa:	4b09      	ldr	r3, [pc, #36]	; (80083d0 <_Bfree+0x40>)
 80083ac:	4809      	ldr	r0, [pc, #36]	; (80083d4 <_Bfree+0x44>)
 80083ae:	f000 fdc9 	bl	8008f44 <__assert_func>
 80083b2:	6046      	str	r6, [r0, #4]
 80083b4:	6086      	str	r6, [r0, #8]
 80083b6:	6006      	str	r6, [r0, #0]
 80083b8:	60c6      	str	r6, [r0, #12]
 80083ba:	2c00      	cmp	r4, #0
 80083bc:	d007      	beq.n	80083ce <_Bfree+0x3e>
 80083be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083c0:	6862      	ldr	r2, [r4, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	0092      	lsls	r2, r2, #2
 80083c6:	189b      	adds	r3, r3, r2
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	6022      	str	r2, [r4, #0]
 80083cc:	601c      	str	r4, [r3, #0]
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	0800f22b 	.word	0x0800f22b
 80083d4:	0800f2ae 	.word	0x0800f2ae

080083d8 <__multadd>:
 80083d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083da:	000e      	movs	r6, r1
 80083dc:	9001      	str	r0, [sp, #4]
 80083de:	000c      	movs	r4, r1
 80083e0:	001d      	movs	r5, r3
 80083e2:	2000      	movs	r0, #0
 80083e4:	690f      	ldr	r7, [r1, #16]
 80083e6:	3614      	adds	r6, #20
 80083e8:	6833      	ldr	r3, [r6, #0]
 80083ea:	3001      	adds	r0, #1
 80083ec:	b299      	uxth	r1, r3
 80083ee:	4351      	muls	r1, r2
 80083f0:	0c1b      	lsrs	r3, r3, #16
 80083f2:	4353      	muls	r3, r2
 80083f4:	1949      	adds	r1, r1, r5
 80083f6:	0c0d      	lsrs	r5, r1, #16
 80083f8:	195b      	adds	r3, r3, r5
 80083fa:	0c1d      	lsrs	r5, r3, #16
 80083fc:	b289      	uxth	r1, r1
 80083fe:	041b      	lsls	r3, r3, #16
 8008400:	185b      	adds	r3, r3, r1
 8008402:	c608      	stmia	r6!, {r3}
 8008404:	4287      	cmp	r7, r0
 8008406:	dcef      	bgt.n	80083e8 <__multadd+0x10>
 8008408:	2d00      	cmp	r5, #0
 800840a:	d022      	beq.n	8008452 <__multadd+0x7a>
 800840c:	68a3      	ldr	r3, [r4, #8]
 800840e:	42bb      	cmp	r3, r7
 8008410:	dc19      	bgt.n	8008446 <__multadd+0x6e>
 8008412:	6863      	ldr	r3, [r4, #4]
 8008414:	9801      	ldr	r0, [sp, #4]
 8008416:	1c59      	adds	r1, r3, #1
 8008418:	f7ff ff76 	bl	8008308 <_Balloc>
 800841c:	1e06      	subs	r6, r0, #0
 800841e:	d105      	bne.n	800842c <__multadd+0x54>
 8008420:	0002      	movs	r2, r0
 8008422:	21b5      	movs	r1, #181	; 0xb5
 8008424:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <__multadd+0x80>)
 8008426:	480d      	ldr	r0, [pc, #52]	; (800845c <__multadd+0x84>)
 8008428:	f000 fd8c 	bl	8008f44 <__assert_func>
 800842c:	0021      	movs	r1, r4
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	310c      	adds	r1, #12
 8008432:	1c9a      	adds	r2, r3, #2
 8008434:	0092      	lsls	r2, r2, #2
 8008436:	300c      	adds	r0, #12
 8008438:	f7fe fc06 	bl	8006c48 <memcpy>
 800843c:	0021      	movs	r1, r4
 800843e:	9801      	ldr	r0, [sp, #4]
 8008440:	f7ff ffa6 	bl	8008390 <_Bfree>
 8008444:	0034      	movs	r4, r6
 8008446:	1d3b      	adds	r3, r7, #4
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	18e3      	adds	r3, r4, r3
 800844c:	605d      	str	r5, [r3, #4]
 800844e:	1c7b      	adds	r3, r7, #1
 8008450:	6123      	str	r3, [r4, #16]
 8008452:	0020      	movs	r0, r4
 8008454:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008456:	46c0      	nop			; (mov r8, r8)
 8008458:	0800f29d 	.word	0x0800f29d
 800845c:	0800f2ae 	.word	0x0800f2ae

08008460 <__hi0bits>:
 8008460:	0003      	movs	r3, r0
 8008462:	0c02      	lsrs	r2, r0, #16
 8008464:	2000      	movs	r0, #0
 8008466:	4282      	cmp	r2, r0
 8008468:	d101      	bne.n	800846e <__hi0bits+0xe>
 800846a:	041b      	lsls	r3, r3, #16
 800846c:	3010      	adds	r0, #16
 800846e:	0e1a      	lsrs	r2, r3, #24
 8008470:	d101      	bne.n	8008476 <__hi0bits+0x16>
 8008472:	3008      	adds	r0, #8
 8008474:	021b      	lsls	r3, r3, #8
 8008476:	0f1a      	lsrs	r2, r3, #28
 8008478:	d101      	bne.n	800847e <__hi0bits+0x1e>
 800847a:	3004      	adds	r0, #4
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	0f9a      	lsrs	r2, r3, #30
 8008480:	d101      	bne.n	8008486 <__hi0bits+0x26>
 8008482:	3002      	adds	r0, #2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	db03      	blt.n	8008492 <__hi0bits+0x32>
 800848a:	3001      	adds	r0, #1
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	d400      	bmi.n	8008492 <__hi0bits+0x32>
 8008490:	2020      	movs	r0, #32
 8008492:	4770      	bx	lr

08008494 <__lo0bits>:
 8008494:	6803      	ldr	r3, [r0, #0]
 8008496:	0002      	movs	r2, r0
 8008498:	2107      	movs	r1, #7
 800849a:	0018      	movs	r0, r3
 800849c:	4008      	ands	r0, r1
 800849e:	420b      	tst	r3, r1
 80084a0:	d00d      	beq.n	80084be <__lo0bits+0x2a>
 80084a2:	3906      	subs	r1, #6
 80084a4:	2000      	movs	r0, #0
 80084a6:	420b      	tst	r3, r1
 80084a8:	d105      	bne.n	80084b6 <__lo0bits+0x22>
 80084aa:	3002      	adds	r0, #2
 80084ac:	4203      	tst	r3, r0
 80084ae:	d003      	beq.n	80084b8 <__lo0bits+0x24>
 80084b0:	40cb      	lsrs	r3, r1
 80084b2:	0008      	movs	r0, r1
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	4770      	bx	lr
 80084b8:	089b      	lsrs	r3, r3, #2
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	e7fb      	b.n	80084b6 <__lo0bits+0x22>
 80084be:	b299      	uxth	r1, r3
 80084c0:	2900      	cmp	r1, #0
 80084c2:	d101      	bne.n	80084c8 <__lo0bits+0x34>
 80084c4:	2010      	movs	r0, #16
 80084c6:	0c1b      	lsrs	r3, r3, #16
 80084c8:	b2d9      	uxtb	r1, r3
 80084ca:	2900      	cmp	r1, #0
 80084cc:	d101      	bne.n	80084d2 <__lo0bits+0x3e>
 80084ce:	3008      	adds	r0, #8
 80084d0:	0a1b      	lsrs	r3, r3, #8
 80084d2:	0719      	lsls	r1, r3, #28
 80084d4:	d101      	bne.n	80084da <__lo0bits+0x46>
 80084d6:	3004      	adds	r0, #4
 80084d8:	091b      	lsrs	r3, r3, #4
 80084da:	0799      	lsls	r1, r3, #30
 80084dc:	d101      	bne.n	80084e2 <__lo0bits+0x4e>
 80084de:	3002      	adds	r0, #2
 80084e0:	089b      	lsrs	r3, r3, #2
 80084e2:	07d9      	lsls	r1, r3, #31
 80084e4:	d4e9      	bmi.n	80084ba <__lo0bits+0x26>
 80084e6:	3001      	adds	r0, #1
 80084e8:	085b      	lsrs	r3, r3, #1
 80084ea:	d1e6      	bne.n	80084ba <__lo0bits+0x26>
 80084ec:	2020      	movs	r0, #32
 80084ee:	e7e2      	b.n	80084b6 <__lo0bits+0x22>

080084f0 <__i2b>:
 80084f0:	b510      	push	{r4, lr}
 80084f2:	000c      	movs	r4, r1
 80084f4:	2101      	movs	r1, #1
 80084f6:	f7ff ff07 	bl	8008308 <_Balloc>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d106      	bne.n	800850c <__i2b+0x1c>
 80084fe:	21a0      	movs	r1, #160	; 0xa0
 8008500:	0002      	movs	r2, r0
 8008502:	4b04      	ldr	r3, [pc, #16]	; (8008514 <__i2b+0x24>)
 8008504:	4804      	ldr	r0, [pc, #16]	; (8008518 <__i2b+0x28>)
 8008506:	0049      	lsls	r1, r1, #1
 8008508:	f000 fd1c 	bl	8008f44 <__assert_func>
 800850c:	2301      	movs	r3, #1
 800850e:	6144      	str	r4, [r0, #20]
 8008510:	6103      	str	r3, [r0, #16]
 8008512:	bd10      	pop	{r4, pc}
 8008514:	0800f29d 	.word	0x0800f29d
 8008518:	0800f2ae 	.word	0x0800f2ae

0800851c <__multiply>:
 800851c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800851e:	690b      	ldr	r3, [r1, #16]
 8008520:	0014      	movs	r4, r2
 8008522:	6912      	ldr	r2, [r2, #16]
 8008524:	000d      	movs	r5, r1
 8008526:	b089      	sub	sp, #36	; 0x24
 8008528:	4293      	cmp	r3, r2
 800852a:	da01      	bge.n	8008530 <__multiply+0x14>
 800852c:	0025      	movs	r5, r4
 800852e:	000c      	movs	r4, r1
 8008530:	692f      	ldr	r7, [r5, #16]
 8008532:	6926      	ldr	r6, [r4, #16]
 8008534:	6869      	ldr	r1, [r5, #4]
 8008536:	19bb      	adds	r3, r7, r6
 8008538:	9302      	str	r3, [sp, #8]
 800853a:	68ab      	ldr	r3, [r5, #8]
 800853c:	19ba      	adds	r2, r7, r6
 800853e:	4293      	cmp	r3, r2
 8008540:	da00      	bge.n	8008544 <__multiply+0x28>
 8008542:	3101      	adds	r1, #1
 8008544:	f7ff fee0 	bl	8008308 <_Balloc>
 8008548:	9001      	str	r0, [sp, #4]
 800854a:	2800      	cmp	r0, #0
 800854c:	d106      	bne.n	800855c <__multiply+0x40>
 800854e:	215e      	movs	r1, #94	; 0x5e
 8008550:	0002      	movs	r2, r0
 8008552:	4b48      	ldr	r3, [pc, #288]	; (8008674 <__multiply+0x158>)
 8008554:	4848      	ldr	r0, [pc, #288]	; (8008678 <__multiply+0x15c>)
 8008556:	31ff      	adds	r1, #255	; 0xff
 8008558:	f000 fcf4 	bl	8008f44 <__assert_func>
 800855c:	9b01      	ldr	r3, [sp, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	3314      	adds	r3, #20
 8008562:	469c      	mov	ip, r3
 8008564:	19bb      	adds	r3, r7, r6
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4463      	add	r3, ip
 800856a:	9303      	str	r3, [sp, #12]
 800856c:	4663      	mov	r3, ip
 800856e:	9903      	ldr	r1, [sp, #12]
 8008570:	428b      	cmp	r3, r1
 8008572:	d32c      	bcc.n	80085ce <__multiply+0xb2>
 8008574:	002b      	movs	r3, r5
 8008576:	0022      	movs	r2, r4
 8008578:	3314      	adds	r3, #20
 800857a:	00bf      	lsls	r7, r7, #2
 800857c:	3214      	adds	r2, #20
 800857e:	9306      	str	r3, [sp, #24]
 8008580:	00b6      	lsls	r6, r6, #2
 8008582:	19db      	adds	r3, r3, r7
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	1993      	adds	r3, r2, r6
 8008588:	9307      	str	r3, [sp, #28]
 800858a:	2304      	movs	r3, #4
 800858c:	9305      	str	r3, [sp, #20]
 800858e:	002b      	movs	r3, r5
 8008590:	9904      	ldr	r1, [sp, #16]
 8008592:	3315      	adds	r3, #21
 8008594:	9200      	str	r2, [sp, #0]
 8008596:	4299      	cmp	r1, r3
 8008598:	d305      	bcc.n	80085a6 <__multiply+0x8a>
 800859a:	1b4b      	subs	r3, r1, r5
 800859c:	3b15      	subs	r3, #21
 800859e:	089b      	lsrs	r3, r3, #2
 80085a0:	3301      	adds	r3, #1
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	9305      	str	r3, [sp, #20]
 80085a6:	9b07      	ldr	r3, [sp, #28]
 80085a8:	9a00      	ldr	r2, [sp, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d311      	bcc.n	80085d2 <__multiply+0xb6>
 80085ae:	9b02      	ldr	r3, [sp, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dd06      	ble.n	80085c2 <__multiply+0xa6>
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	3b04      	subs	r3, #4
 80085b8:	9303      	str	r3, [sp, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d053      	beq.n	800866a <__multiply+0x14e>
 80085c2:	9b01      	ldr	r3, [sp, #4]
 80085c4:	9a02      	ldr	r2, [sp, #8]
 80085c6:	0018      	movs	r0, r3
 80085c8:	611a      	str	r2, [r3, #16]
 80085ca:	b009      	add	sp, #36	; 0x24
 80085cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ce:	c304      	stmia	r3!, {r2}
 80085d0:	e7cd      	b.n	800856e <__multiply+0x52>
 80085d2:	9b00      	ldr	r3, [sp, #0]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	b298      	uxth	r0, r3
 80085d8:	2800      	cmp	r0, #0
 80085da:	d01b      	beq.n	8008614 <__multiply+0xf8>
 80085dc:	4667      	mov	r7, ip
 80085de:	2400      	movs	r4, #0
 80085e0:	9e06      	ldr	r6, [sp, #24]
 80085e2:	ce02      	ldmia	r6!, {r1}
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	b28b      	uxth	r3, r1
 80085e8:	4343      	muls	r3, r0
 80085ea:	b292      	uxth	r2, r2
 80085ec:	189b      	adds	r3, r3, r2
 80085ee:	191b      	adds	r3, r3, r4
 80085f0:	0c0c      	lsrs	r4, r1, #16
 80085f2:	4344      	muls	r4, r0
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	0c11      	lsrs	r1, r2, #16
 80085f8:	1861      	adds	r1, r4, r1
 80085fa:	0c1c      	lsrs	r4, r3, #16
 80085fc:	1909      	adds	r1, r1, r4
 80085fe:	0c0c      	lsrs	r4, r1, #16
 8008600:	b29b      	uxth	r3, r3
 8008602:	0409      	lsls	r1, r1, #16
 8008604:	430b      	orrs	r3, r1
 8008606:	c708      	stmia	r7!, {r3}
 8008608:	9b04      	ldr	r3, [sp, #16]
 800860a:	42b3      	cmp	r3, r6
 800860c:	d8e9      	bhi.n	80085e2 <__multiply+0xc6>
 800860e:	4663      	mov	r3, ip
 8008610:	9a05      	ldr	r2, [sp, #20]
 8008612:	509c      	str	r4, [r3, r2]
 8008614:	9b00      	ldr	r3, [sp, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	0c1e      	lsrs	r6, r3, #16
 800861a:	d020      	beq.n	800865e <__multiply+0x142>
 800861c:	4663      	mov	r3, ip
 800861e:	002c      	movs	r4, r5
 8008620:	4660      	mov	r0, ip
 8008622:	2700      	movs	r7, #0
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3414      	adds	r4, #20
 8008628:	6822      	ldr	r2, [r4, #0]
 800862a:	b29b      	uxth	r3, r3
 800862c:	b291      	uxth	r1, r2
 800862e:	4371      	muls	r1, r6
 8008630:	6802      	ldr	r2, [r0, #0]
 8008632:	0c12      	lsrs	r2, r2, #16
 8008634:	1889      	adds	r1, r1, r2
 8008636:	19cf      	adds	r7, r1, r7
 8008638:	0439      	lsls	r1, r7, #16
 800863a:	430b      	orrs	r3, r1
 800863c:	6003      	str	r3, [r0, #0]
 800863e:	cc02      	ldmia	r4!, {r1}
 8008640:	6843      	ldr	r3, [r0, #4]
 8008642:	0c09      	lsrs	r1, r1, #16
 8008644:	4371      	muls	r1, r6
 8008646:	b29b      	uxth	r3, r3
 8008648:	0c3f      	lsrs	r7, r7, #16
 800864a:	18cb      	adds	r3, r1, r3
 800864c:	9a04      	ldr	r2, [sp, #16]
 800864e:	19db      	adds	r3, r3, r7
 8008650:	0c1f      	lsrs	r7, r3, #16
 8008652:	3004      	adds	r0, #4
 8008654:	42a2      	cmp	r2, r4
 8008656:	d8e7      	bhi.n	8008628 <__multiply+0x10c>
 8008658:	4662      	mov	r2, ip
 800865a:	9905      	ldr	r1, [sp, #20]
 800865c:	5053      	str	r3, [r2, r1]
 800865e:	9b00      	ldr	r3, [sp, #0]
 8008660:	3304      	adds	r3, #4
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	2304      	movs	r3, #4
 8008666:	449c      	add	ip, r3
 8008668:	e79d      	b.n	80085a6 <__multiply+0x8a>
 800866a:	9b02      	ldr	r3, [sp, #8]
 800866c:	3b01      	subs	r3, #1
 800866e:	9302      	str	r3, [sp, #8]
 8008670:	e79d      	b.n	80085ae <__multiply+0x92>
 8008672:	46c0      	nop			; (mov r8, r8)
 8008674:	0800f29d 	.word	0x0800f29d
 8008678:	0800f2ae 	.word	0x0800f2ae

0800867c <__pow5mult>:
 800867c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800867e:	2303      	movs	r3, #3
 8008680:	0015      	movs	r5, r2
 8008682:	0007      	movs	r7, r0
 8008684:	000e      	movs	r6, r1
 8008686:	401a      	ands	r2, r3
 8008688:	421d      	tst	r5, r3
 800868a:	d008      	beq.n	800869e <__pow5mult+0x22>
 800868c:	4925      	ldr	r1, [pc, #148]	; (8008724 <__pow5mult+0xa8>)
 800868e:	3a01      	subs	r2, #1
 8008690:	0092      	lsls	r2, r2, #2
 8008692:	5852      	ldr	r2, [r2, r1]
 8008694:	2300      	movs	r3, #0
 8008696:	0031      	movs	r1, r6
 8008698:	f7ff fe9e 	bl	80083d8 <__multadd>
 800869c:	0006      	movs	r6, r0
 800869e:	10ad      	asrs	r5, r5, #2
 80086a0:	d03d      	beq.n	800871e <__pow5mult+0xa2>
 80086a2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80086a4:	2c00      	cmp	r4, #0
 80086a6:	d10f      	bne.n	80086c8 <__pow5mult+0x4c>
 80086a8:	2010      	movs	r0, #16
 80086aa:	f7ff fe17 	bl	80082dc <malloc>
 80086ae:	1e02      	subs	r2, r0, #0
 80086b0:	6278      	str	r0, [r7, #36]	; 0x24
 80086b2:	d105      	bne.n	80086c0 <__pow5mult+0x44>
 80086b4:	21d7      	movs	r1, #215	; 0xd7
 80086b6:	4b1c      	ldr	r3, [pc, #112]	; (8008728 <__pow5mult+0xac>)
 80086b8:	481c      	ldr	r0, [pc, #112]	; (800872c <__pow5mult+0xb0>)
 80086ba:	0049      	lsls	r1, r1, #1
 80086bc:	f000 fc42 	bl	8008f44 <__assert_func>
 80086c0:	6044      	str	r4, [r0, #4]
 80086c2:	6084      	str	r4, [r0, #8]
 80086c4:	6004      	str	r4, [r0, #0]
 80086c6:	60c4      	str	r4, [r0, #12]
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	689c      	ldr	r4, [r3, #8]
 80086cc:	9301      	str	r3, [sp, #4]
 80086ce:	2c00      	cmp	r4, #0
 80086d0:	d108      	bne.n	80086e4 <__pow5mult+0x68>
 80086d2:	0038      	movs	r0, r7
 80086d4:	4916      	ldr	r1, [pc, #88]	; (8008730 <__pow5mult+0xb4>)
 80086d6:	f7ff ff0b 	bl	80084f0 <__i2b>
 80086da:	9b01      	ldr	r3, [sp, #4]
 80086dc:	0004      	movs	r4, r0
 80086de:	6098      	str	r0, [r3, #8]
 80086e0:	2300      	movs	r3, #0
 80086e2:	6003      	str	r3, [r0, #0]
 80086e4:	2301      	movs	r3, #1
 80086e6:	421d      	tst	r5, r3
 80086e8:	d00a      	beq.n	8008700 <__pow5mult+0x84>
 80086ea:	0031      	movs	r1, r6
 80086ec:	0022      	movs	r2, r4
 80086ee:	0038      	movs	r0, r7
 80086f0:	f7ff ff14 	bl	800851c <__multiply>
 80086f4:	0031      	movs	r1, r6
 80086f6:	9001      	str	r0, [sp, #4]
 80086f8:	0038      	movs	r0, r7
 80086fa:	f7ff fe49 	bl	8008390 <_Bfree>
 80086fe:	9e01      	ldr	r6, [sp, #4]
 8008700:	106d      	asrs	r5, r5, #1
 8008702:	d00c      	beq.n	800871e <__pow5mult+0xa2>
 8008704:	6820      	ldr	r0, [r4, #0]
 8008706:	2800      	cmp	r0, #0
 8008708:	d107      	bne.n	800871a <__pow5mult+0x9e>
 800870a:	0022      	movs	r2, r4
 800870c:	0021      	movs	r1, r4
 800870e:	0038      	movs	r0, r7
 8008710:	f7ff ff04 	bl	800851c <__multiply>
 8008714:	2300      	movs	r3, #0
 8008716:	6020      	str	r0, [r4, #0]
 8008718:	6003      	str	r3, [r0, #0]
 800871a:	0004      	movs	r4, r0
 800871c:	e7e2      	b.n	80086e4 <__pow5mult+0x68>
 800871e:	0030      	movs	r0, r6
 8008720:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008722:	46c0      	nop			; (mov r8, r8)
 8008724:	0800f400 	.word	0x0800f400
 8008728:	0800f22b 	.word	0x0800f22b
 800872c:	0800f2ae 	.word	0x0800f2ae
 8008730:	00000271 	.word	0x00000271

08008734 <__lshift>:
 8008734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008736:	000c      	movs	r4, r1
 8008738:	0017      	movs	r7, r2
 800873a:	6923      	ldr	r3, [r4, #16]
 800873c:	1155      	asrs	r5, r2, #5
 800873e:	b087      	sub	sp, #28
 8008740:	18eb      	adds	r3, r5, r3
 8008742:	9302      	str	r3, [sp, #8]
 8008744:	3301      	adds	r3, #1
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	6849      	ldr	r1, [r1, #4]
 800874a:	68a3      	ldr	r3, [r4, #8]
 800874c:	9004      	str	r0, [sp, #16]
 800874e:	9a01      	ldr	r2, [sp, #4]
 8008750:	4293      	cmp	r3, r2
 8008752:	db10      	blt.n	8008776 <__lshift+0x42>
 8008754:	9804      	ldr	r0, [sp, #16]
 8008756:	f7ff fdd7 	bl	8008308 <_Balloc>
 800875a:	2300      	movs	r3, #0
 800875c:	0002      	movs	r2, r0
 800875e:	0006      	movs	r6, r0
 8008760:	0019      	movs	r1, r3
 8008762:	3214      	adds	r2, #20
 8008764:	4298      	cmp	r0, r3
 8008766:	d10c      	bne.n	8008782 <__lshift+0x4e>
 8008768:	21da      	movs	r1, #218	; 0xda
 800876a:	0002      	movs	r2, r0
 800876c:	4b26      	ldr	r3, [pc, #152]	; (8008808 <__lshift+0xd4>)
 800876e:	4827      	ldr	r0, [pc, #156]	; (800880c <__lshift+0xd8>)
 8008770:	31ff      	adds	r1, #255	; 0xff
 8008772:	f000 fbe7 	bl	8008f44 <__assert_func>
 8008776:	3101      	adds	r1, #1
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	e7e8      	b.n	800874e <__lshift+0x1a>
 800877c:	0098      	lsls	r0, r3, #2
 800877e:	5011      	str	r1, [r2, r0]
 8008780:	3301      	adds	r3, #1
 8008782:	42ab      	cmp	r3, r5
 8008784:	dbfa      	blt.n	800877c <__lshift+0x48>
 8008786:	43eb      	mvns	r3, r5
 8008788:	17db      	asrs	r3, r3, #31
 800878a:	401d      	ands	r5, r3
 800878c:	211f      	movs	r1, #31
 800878e:	0023      	movs	r3, r4
 8008790:	0038      	movs	r0, r7
 8008792:	00ad      	lsls	r5, r5, #2
 8008794:	1955      	adds	r5, r2, r5
 8008796:	6922      	ldr	r2, [r4, #16]
 8008798:	3314      	adds	r3, #20
 800879a:	0092      	lsls	r2, r2, #2
 800879c:	4008      	ands	r0, r1
 800879e:	4684      	mov	ip, r0
 80087a0:	189a      	adds	r2, r3, r2
 80087a2:	420f      	tst	r7, r1
 80087a4:	d02a      	beq.n	80087fc <__lshift+0xc8>
 80087a6:	3101      	adds	r1, #1
 80087a8:	1a09      	subs	r1, r1, r0
 80087aa:	9105      	str	r1, [sp, #20]
 80087ac:	2100      	movs	r1, #0
 80087ae:	9503      	str	r5, [sp, #12]
 80087b0:	4667      	mov	r7, ip
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	40b8      	lsls	r0, r7
 80087b6:	4301      	orrs	r1, r0
 80087b8:	9803      	ldr	r0, [sp, #12]
 80087ba:	c002      	stmia	r0!, {r1}
 80087bc:	cb02      	ldmia	r3!, {r1}
 80087be:	9003      	str	r0, [sp, #12]
 80087c0:	9805      	ldr	r0, [sp, #20]
 80087c2:	40c1      	lsrs	r1, r0
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d8f3      	bhi.n	80087b0 <__lshift+0x7c>
 80087c8:	0020      	movs	r0, r4
 80087ca:	3015      	adds	r0, #21
 80087cc:	2304      	movs	r3, #4
 80087ce:	4282      	cmp	r2, r0
 80087d0:	d304      	bcc.n	80087dc <__lshift+0xa8>
 80087d2:	1b13      	subs	r3, r2, r4
 80087d4:	3b15      	subs	r3, #21
 80087d6:	089b      	lsrs	r3, r3, #2
 80087d8:	3301      	adds	r3, #1
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	50e9      	str	r1, [r5, r3]
 80087de:	2900      	cmp	r1, #0
 80087e0:	d002      	beq.n	80087e8 <__lshift+0xb4>
 80087e2:	9b02      	ldr	r3, [sp, #8]
 80087e4:	3302      	adds	r3, #2
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	9b01      	ldr	r3, [sp, #4]
 80087ea:	9804      	ldr	r0, [sp, #16]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	0021      	movs	r1, r4
 80087f0:	6133      	str	r3, [r6, #16]
 80087f2:	f7ff fdcd 	bl	8008390 <_Bfree>
 80087f6:	0030      	movs	r0, r6
 80087f8:	b007      	add	sp, #28
 80087fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087fc:	cb02      	ldmia	r3!, {r1}
 80087fe:	c502      	stmia	r5!, {r1}
 8008800:	429a      	cmp	r2, r3
 8008802:	d8fb      	bhi.n	80087fc <__lshift+0xc8>
 8008804:	e7f0      	b.n	80087e8 <__lshift+0xb4>
 8008806:	46c0      	nop			; (mov r8, r8)
 8008808:	0800f29d 	.word	0x0800f29d
 800880c:	0800f2ae 	.word	0x0800f2ae

08008810 <__mcmp>:
 8008810:	6902      	ldr	r2, [r0, #16]
 8008812:	690b      	ldr	r3, [r1, #16]
 8008814:	b530      	push	{r4, r5, lr}
 8008816:	0004      	movs	r4, r0
 8008818:	1ad0      	subs	r0, r2, r3
 800881a:	429a      	cmp	r2, r3
 800881c:	d10d      	bne.n	800883a <__mcmp+0x2a>
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	3414      	adds	r4, #20
 8008822:	3114      	adds	r1, #20
 8008824:	18e2      	adds	r2, r4, r3
 8008826:	18c9      	adds	r1, r1, r3
 8008828:	3a04      	subs	r2, #4
 800882a:	3904      	subs	r1, #4
 800882c:	6815      	ldr	r5, [r2, #0]
 800882e:	680b      	ldr	r3, [r1, #0]
 8008830:	429d      	cmp	r5, r3
 8008832:	d003      	beq.n	800883c <__mcmp+0x2c>
 8008834:	2001      	movs	r0, #1
 8008836:	429d      	cmp	r5, r3
 8008838:	d303      	bcc.n	8008842 <__mcmp+0x32>
 800883a:	bd30      	pop	{r4, r5, pc}
 800883c:	4294      	cmp	r4, r2
 800883e:	d3f3      	bcc.n	8008828 <__mcmp+0x18>
 8008840:	e7fb      	b.n	800883a <__mcmp+0x2a>
 8008842:	4240      	negs	r0, r0
 8008844:	e7f9      	b.n	800883a <__mcmp+0x2a>
	...

08008848 <__mdiff>:
 8008848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800884a:	000e      	movs	r6, r1
 800884c:	0007      	movs	r7, r0
 800884e:	0011      	movs	r1, r2
 8008850:	0030      	movs	r0, r6
 8008852:	b087      	sub	sp, #28
 8008854:	0014      	movs	r4, r2
 8008856:	f7ff ffdb 	bl	8008810 <__mcmp>
 800885a:	1e05      	subs	r5, r0, #0
 800885c:	d110      	bne.n	8008880 <__mdiff+0x38>
 800885e:	0001      	movs	r1, r0
 8008860:	0038      	movs	r0, r7
 8008862:	f7ff fd51 	bl	8008308 <_Balloc>
 8008866:	1e02      	subs	r2, r0, #0
 8008868:	d104      	bne.n	8008874 <__mdiff+0x2c>
 800886a:	4b40      	ldr	r3, [pc, #256]	; (800896c <__mdiff+0x124>)
 800886c:	4940      	ldr	r1, [pc, #256]	; (8008970 <__mdiff+0x128>)
 800886e:	4841      	ldr	r0, [pc, #260]	; (8008974 <__mdiff+0x12c>)
 8008870:	f000 fb68 	bl	8008f44 <__assert_func>
 8008874:	2301      	movs	r3, #1
 8008876:	6145      	str	r5, [r0, #20]
 8008878:	6103      	str	r3, [r0, #16]
 800887a:	0010      	movs	r0, r2
 800887c:	b007      	add	sp, #28
 800887e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008880:	2301      	movs	r3, #1
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	2800      	cmp	r0, #0
 8008886:	db04      	blt.n	8008892 <__mdiff+0x4a>
 8008888:	0023      	movs	r3, r4
 800888a:	0034      	movs	r4, r6
 800888c:	001e      	movs	r6, r3
 800888e:	2300      	movs	r3, #0
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	0038      	movs	r0, r7
 8008894:	6861      	ldr	r1, [r4, #4]
 8008896:	f7ff fd37 	bl	8008308 <_Balloc>
 800889a:	1e02      	subs	r2, r0, #0
 800889c:	d103      	bne.n	80088a6 <__mdiff+0x5e>
 800889e:	2190      	movs	r1, #144	; 0x90
 80088a0:	4b32      	ldr	r3, [pc, #200]	; (800896c <__mdiff+0x124>)
 80088a2:	0089      	lsls	r1, r1, #2
 80088a4:	e7e3      	b.n	800886e <__mdiff+0x26>
 80088a6:	9b01      	ldr	r3, [sp, #4]
 80088a8:	2700      	movs	r7, #0
 80088aa:	60c3      	str	r3, [r0, #12]
 80088ac:	6920      	ldr	r0, [r4, #16]
 80088ae:	3414      	adds	r4, #20
 80088b0:	9401      	str	r4, [sp, #4]
 80088b2:	9b01      	ldr	r3, [sp, #4]
 80088b4:	0084      	lsls	r4, r0, #2
 80088b6:	191b      	adds	r3, r3, r4
 80088b8:	0034      	movs	r4, r6
 80088ba:	9302      	str	r3, [sp, #8]
 80088bc:	6933      	ldr	r3, [r6, #16]
 80088be:	3414      	adds	r4, #20
 80088c0:	0099      	lsls	r1, r3, #2
 80088c2:	1863      	adds	r3, r4, r1
 80088c4:	9303      	str	r3, [sp, #12]
 80088c6:	0013      	movs	r3, r2
 80088c8:	3314      	adds	r3, #20
 80088ca:	469c      	mov	ip, r3
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	9b01      	ldr	r3, [sp, #4]
 80088d0:	9304      	str	r3, [sp, #16]
 80088d2:	9b04      	ldr	r3, [sp, #16]
 80088d4:	cc02      	ldmia	r4!, {r1}
 80088d6:	cb20      	ldmia	r3!, {r5}
 80088d8:	9304      	str	r3, [sp, #16]
 80088da:	b2ab      	uxth	r3, r5
 80088dc:	19df      	adds	r7, r3, r7
 80088de:	b28b      	uxth	r3, r1
 80088e0:	1afb      	subs	r3, r7, r3
 80088e2:	0c09      	lsrs	r1, r1, #16
 80088e4:	0c2d      	lsrs	r5, r5, #16
 80088e6:	1a6d      	subs	r5, r5, r1
 80088e8:	1419      	asrs	r1, r3, #16
 80088ea:	186d      	adds	r5, r5, r1
 80088ec:	4661      	mov	r1, ip
 80088ee:	142f      	asrs	r7, r5, #16
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	042d      	lsls	r5, r5, #16
 80088f4:	432b      	orrs	r3, r5
 80088f6:	c108      	stmia	r1!, {r3}
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	468c      	mov	ip, r1
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	d8e8      	bhi.n	80088d2 <__mdiff+0x8a>
 8008900:	0031      	movs	r1, r6
 8008902:	9c03      	ldr	r4, [sp, #12]
 8008904:	3115      	adds	r1, #21
 8008906:	2304      	movs	r3, #4
 8008908:	428c      	cmp	r4, r1
 800890a:	d304      	bcc.n	8008916 <__mdiff+0xce>
 800890c:	1ba3      	subs	r3, r4, r6
 800890e:	3b15      	subs	r3, #21
 8008910:	089b      	lsrs	r3, r3, #2
 8008912:	3301      	adds	r3, #1
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	9901      	ldr	r1, [sp, #4]
 8008918:	18cc      	adds	r4, r1, r3
 800891a:	9905      	ldr	r1, [sp, #20]
 800891c:	0026      	movs	r6, r4
 800891e:	18cb      	adds	r3, r1, r3
 8008920:	469c      	mov	ip, r3
 8008922:	9902      	ldr	r1, [sp, #8]
 8008924:	428e      	cmp	r6, r1
 8008926:	d310      	bcc.n	800894a <__mdiff+0x102>
 8008928:	9e02      	ldr	r6, [sp, #8]
 800892a:	1ee1      	subs	r1, r4, #3
 800892c:	2500      	movs	r5, #0
 800892e:	428e      	cmp	r6, r1
 8008930:	d304      	bcc.n	800893c <__mdiff+0xf4>
 8008932:	0031      	movs	r1, r6
 8008934:	3103      	adds	r1, #3
 8008936:	1b0c      	subs	r4, r1, r4
 8008938:	08a4      	lsrs	r4, r4, #2
 800893a:	00a5      	lsls	r5, r4, #2
 800893c:	195b      	adds	r3, r3, r5
 800893e:	3b04      	subs	r3, #4
 8008940:	6819      	ldr	r1, [r3, #0]
 8008942:	2900      	cmp	r1, #0
 8008944:	d00f      	beq.n	8008966 <__mdiff+0x11e>
 8008946:	6110      	str	r0, [r2, #16]
 8008948:	e797      	b.n	800887a <__mdiff+0x32>
 800894a:	ce02      	ldmia	r6!, {r1}
 800894c:	b28d      	uxth	r5, r1
 800894e:	19ed      	adds	r5, r5, r7
 8008950:	0c0f      	lsrs	r7, r1, #16
 8008952:	1429      	asrs	r1, r5, #16
 8008954:	1879      	adds	r1, r7, r1
 8008956:	140f      	asrs	r7, r1, #16
 8008958:	b2ad      	uxth	r5, r5
 800895a:	0409      	lsls	r1, r1, #16
 800895c:	430d      	orrs	r5, r1
 800895e:	4661      	mov	r1, ip
 8008960:	c120      	stmia	r1!, {r5}
 8008962:	468c      	mov	ip, r1
 8008964:	e7dd      	b.n	8008922 <__mdiff+0xda>
 8008966:	3801      	subs	r0, #1
 8008968:	e7e9      	b.n	800893e <__mdiff+0xf6>
 800896a:	46c0      	nop			; (mov r8, r8)
 800896c:	0800f29d 	.word	0x0800f29d
 8008970:	00000232 	.word	0x00000232
 8008974:	0800f2ae 	.word	0x0800f2ae

08008978 <__d2b>:
 8008978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800897a:	2101      	movs	r1, #1
 800897c:	0014      	movs	r4, r2
 800897e:	001e      	movs	r6, r3
 8008980:	9f08      	ldr	r7, [sp, #32]
 8008982:	f7ff fcc1 	bl	8008308 <_Balloc>
 8008986:	1e05      	subs	r5, r0, #0
 8008988:	d105      	bne.n	8008996 <__d2b+0x1e>
 800898a:	0002      	movs	r2, r0
 800898c:	4b26      	ldr	r3, [pc, #152]	; (8008a28 <__d2b+0xb0>)
 800898e:	4927      	ldr	r1, [pc, #156]	; (8008a2c <__d2b+0xb4>)
 8008990:	4827      	ldr	r0, [pc, #156]	; (8008a30 <__d2b+0xb8>)
 8008992:	f000 fad7 	bl	8008f44 <__assert_func>
 8008996:	0333      	lsls	r3, r6, #12
 8008998:	0076      	lsls	r6, r6, #1
 800899a:	0b1b      	lsrs	r3, r3, #12
 800899c:	0d76      	lsrs	r6, r6, #21
 800899e:	d124      	bne.n	80089ea <__d2b+0x72>
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	2c00      	cmp	r4, #0
 80089a4:	d027      	beq.n	80089f6 <__d2b+0x7e>
 80089a6:	4668      	mov	r0, sp
 80089a8:	9400      	str	r4, [sp, #0]
 80089aa:	f7ff fd73 	bl	8008494 <__lo0bits>
 80089ae:	9c00      	ldr	r4, [sp, #0]
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d01e      	beq.n	80089f2 <__d2b+0x7a>
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	2120      	movs	r1, #32
 80089b8:	001a      	movs	r2, r3
 80089ba:	1a09      	subs	r1, r1, r0
 80089bc:	408a      	lsls	r2, r1
 80089be:	40c3      	lsrs	r3, r0
 80089c0:	4322      	orrs	r2, r4
 80089c2:	616a      	str	r2, [r5, #20]
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	9c01      	ldr	r4, [sp, #4]
 80089c8:	61ac      	str	r4, [r5, #24]
 80089ca:	1e63      	subs	r3, r4, #1
 80089cc:	419c      	sbcs	r4, r3
 80089ce:	3401      	adds	r4, #1
 80089d0:	612c      	str	r4, [r5, #16]
 80089d2:	2e00      	cmp	r6, #0
 80089d4:	d018      	beq.n	8008a08 <__d2b+0x90>
 80089d6:	4b17      	ldr	r3, [pc, #92]	; (8008a34 <__d2b+0xbc>)
 80089d8:	18f6      	adds	r6, r6, r3
 80089da:	2335      	movs	r3, #53	; 0x35
 80089dc:	1836      	adds	r6, r6, r0
 80089de:	1a18      	subs	r0, r3, r0
 80089e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e2:	603e      	str	r6, [r7, #0]
 80089e4:	6018      	str	r0, [r3, #0]
 80089e6:	0028      	movs	r0, r5
 80089e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089ea:	2280      	movs	r2, #128	; 0x80
 80089ec:	0352      	lsls	r2, r2, #13
 80089ee:	4313      	orrs	r3, r2
 80089f0:	e7d6      	b.n	80089a0 <__d2b+0x28>
 80089f2:	616c      	str	r4, [r5, #20]
 80089f4:	e7e7      	b.n	80089c6 <__d2b+0x4e>
 80089f6:	a801      	add	r0, sp, #4
 80089f8:	f7ff fd4c 	bl	8008494 <__lo0bits>
 80089fc:	2401      	movs	r4, #1
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	612c      	str	r4, [r5, #16]
 8008a02:	616b      	str	r3, [r5, #20]
 8008a04:	3020      	adds	r0, #32
 8008a06:	e7e4      	b.n	80089d2 <__d2b+0x5a>
 8008a08:	4b0b      	ldr	r3, [pc, #44]	; (8008a38 <__d2b+0xc0>)
 8008a0a:	18c0      	adds	r0, r0, r3
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <__d2b+0xc4>)
 8008a0e:	6038      	str	r0, [r7, #0]
 8008a10:	18e3      	adds	r3, r4, r3
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	18eb      	adds	r3, r5, r3
 8008a16:	6958      	ldr	r0, [r3, #20]
 8008a18:	f7ff fd22 	bl	8008460 <__hi0bits>
 8008a1c:	0164      	lsls	r4, r4, #5
 8008a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a20:	1a24      	subs	r4, r4, r0
 8008a22:	601c      	str	r4, [r3, #0]
 8008a24:	e7df      	b.n	80089e6 <__d2b+0x6e>
 8008a26:	46c0      	nop			; (mov r8, r8)
 8008a28:	0800f29d 	.word	0x0800f29d
 8008a2c:	0000030a 	.word	0x0000030a
 8008a30:	0800f2ae 	.word	0x0800f2ae
 8008a34:	fffffbcd 	.word	0xfffffbcd
 8008a38:	fffffbce 	.word	0xfffffbce
 8008a3c:	3fffffff 	.word	0x3fffffff

08008a40 <_calloc_r>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	0c13      	lsrs	r3, r2, #16
 8008a44:	0c0d      	lsrs	r5, r1, #16
 8008a46:	d11e      	bne.n	8008a86 <_calloc_r+0x46>
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10c      	bne.n	8008a66 <_calloc_r+0x26>
 8008a4c:	b289      	uxth	r1, r1
 8008a4e:	b294      	uxth	r4, r2
 8008a50:	434c      	muls	r4, r1
 8008a52:	0021      	movs	r1, r4
 8008a54:	f000 f88c 	bl	8008b70 <_malloc_r>
 8008a58:	1e05      	subs	r5, r0, #0
 8008a5a:	d01b      	beq.n	8008a94 <_calloc_r+0x54>
 8008a5c:	0022      	movs	r2, r4
 8008a5e:	2100      	movs	r1, #0
 8008a60:	f7fe f8fb 	bl	8006c5a <memset>
 8008a64:	e016      	b.n	8008a94 <_calloc_r+0x54>
 8008a66:	1c1d      	adds	r5, r3, #0
 8008a68:	1c0b      	adds	r3, r1, #0
 8008a6a:	b292      	uxth	r2, r2
 8008a6c:	b289      	uxth	r1, r1
 8008a6e:	b29c      	uxth	r4, r3
 8008a70:	4351      	muls	r1, r2
 8008a72:	b2ab      	uxth	r3, r5
 8008a74:	4363      	muls	r3, r4
 8008a76:	0c0c      	lsrs	r4, r1, #16
 8008a78:	191c      	adds	r4, r3, r4
 8008a7a:	0c22      	lsrs	r2, r4, #16
 8008a7c:	d107      	bne.n	8008a8e <_calloc_r+0x4e>
 8008a7e:	0424      	lsls	r4, r4, #16
 8008a80:	b289      	uxth	r1, r1
 8008a82:	430c      	orrs	r4, r1
 8008a84:	e7e5      	b.n	8008a52 <_calloc_r+0x12>
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <_calloc_r+0x4e>
 8008a8a:	1c13      	adds	r3, r2, #0
 8008a8c:	e7ed      	b.n	8008a6a <_calloc_r+0x2a>
 8008a8e:	230c      	movs	r3, #12
 8008a90:	2500      	movs	r5, #0
 8008a92:	6003      	str	r3, [r0, #0]
 8008a94:	0028      	movs	r0, r5
 8008a96:	bd70      	pop	{r4, r5, r6, pc}

08008a98 <_free_r>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	0005      	movs	r5, r0
 8008a9c:	2900      	cmp	r1, #0
 8008a9e:	d010      	beq.n	8008ac2 <_free_r+0x2a>
 8008aa0:	1f0c      	subs	r4, r1, #4
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da00      	bge.n	8008aaa <_free_r+0x12>
 8008aa8:	18e4      	adds	r4, r4, r3
 8008aaa:	0028      	movs	r0, r5
 8008aac:	f000 fa9e 	bl	8008fec <__malloc_lock>
 8008ab0:	4a1d      	ldr	r2, [pc, #116]	; (8008b28 <_free_r+0x90>)
 8008ab2:	6813      	ldr	r3, [r2, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d105      	bne.n	8008ac4 <_free_r+0x2c>
 8008ab8:	6063      	str	r3, [r4, #4]
 8008aba:	6014      	str	r4, [r2, #0]
 8008abc:	0028      	movs	r0, r5
 8008abe:	f000 fa9d 	bl	8008ffc <__malloc_unlock>
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	d908      	bls.n	8008ada <_free_r+0x42>
 8008ac8:	6821      	ldr	r1, [r4, #0]
 8008aca:	1860      	adds	r0, r4, r1
 8008acc:	4283      	cmp	r3, r0
 8008ace:	d1f3      	bne.n	8008ab8 <_free_r+0x20>
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	1841      	adds	r1, r0, r1
 8008ad6:	6021      	str	r1, [r4, #0]
 8008ad8:	e7ee      	b.n	8008ab8 <_free_r+0x20>
 8008ada:	001a      	movs	r2, r3
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <_free_r+0x4e>
 8008ae2:	42a3      	cmp	r3, r4
 8008ae4:	d9f9      	bls.n	8008ada <_free_r+0x42>
 8008ae6:	6811      	ldr	r1, [r2, #0]
 8008ae8:	1850      	adds	r0, r2, r1
 8008aea:	42a0      	cmp	r0, r4
 8008aec:	d10b      	bne.n	8008b06 <_free_r+0x6e>
 8008aee:	6820      	ldr	r0, [r4, #0]
 8008af0:	1809      	adds	r1, r1, r0
 8008af2:	1850      	adds	r0, r2, r1
 8008af4:	6011      	str	r1, [r2, #0]
 8008af6:	4283      	cmp	r3, r0
 8008af8:	d1e0      	bne.n	8008abc <_free_r+0x24>
 8008afa:	6818      	ldr	r0, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	1841      	adds	r1, r0, r1
 8008b00:	6011      	str	r1, [r2, #0]
 8008b02:	6053      	str	r3, [r2, #4]
 8008b04:	e7da      	b.n	8008abc <_free_r+0x24>
 8008b06:	42a0      	cmp	r0, r4
 8008b08:	d902      	bls.n	8008b10 <_free_r+0x78>
 8008b0a:	230c      	movs	r3, #12
 8008b0c:	602b      	str	r3, [r5, #0]
 8008b0e:	e7d5      	b.n	8008abc <_free_r+0x24>
 8008b10:	6821      	ldr	r1, [r4, #0]
 8008b12:	1860      	adds	r0, r4, r1
 8008b14:	4283      	cmp	r3, r0
 8008b16:	d103      	bne.n	8008b20 <_free_r+0x88>
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	1841      	adds	r1, r0, r1
 8008b1e:	6021      	str	r1, [r4, #0]
 8008b20:	6063      	str	r3, [r4, #4]
 8008b22:	6054      	str	r4, [r2, #4]
 8008b24:	e7ca      	b.n	8008abc <_free_r+0x24>
 8008b26:	46c0      	nop			; (mov r8, r8)
 8008b28:	20000d20 	.word	0x20000d20

08008b2c <sbrk_aligned>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	4e0f      	ldr	r6, [pc, #60]	; (8008b6c <sbrk_aligned+0x40>)
 8008b30:	000d      	movs	r5, r1
 8008b32:	6831      	ldr	r1, [r6, #0]
 8008b34:	0004      	movs	r4, r0
 8008b36:	2900      	cmp	r1, #0
 8008b38:	d102      	bne.n	8008b40 <sbrk_aligned+0x14>
 8008b3a:	f000 f9f1 	bl	8008f20 <_sbrk_r>
 8008b3e:	6030      	str	r0, [r6, #0]
 8008b40:	0029      	movs	r1, r5
 8008b42:	0020      	movs	r0, r4
 8008b44:	f000 f9ec 	bl	8008f20 <_sbrk_r>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d00a      	beq.n	8008b62 <sbrk_aligned+0x36>
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	1cc5      	adds	r5, r0, #3
 8008b50:	439d      	bics	r5, r3
 8008b52:	42a8      	cmp	r0, r5
 8008b54:	d007      	beq.n	8008b66 <sbrk_aligned+0x3a>
 8008b56:	1a29      	subs	r1, r5, r0
 8008b58:	0020      	movs	r0, r4
 8008b5a:	f000 f9e1 	bl	8008f20 <_sbrk_r>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	d101      	bne.n	8008b66 <sbrk_aligned+0x3a>
 8008b62:	2501      	movs	r5, #1
 8008b64:	426d      	negs	r5, r5
 8008b66:	0028      	movs	r0, r5
 8008b68:	bd70      	pop	{r4, r5, r6, pc}
 8008b6a:	46c0      	nop			; (mov r8, r8)
 8008b6c:	20000d24 	.word	0x20000d24

08008b70 <_malloc_r>:
 8008b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b72:	2203      	movs	r2, #3
 8008b74:	1ccb      	adds	r3, r1, #3
 8008b76:	4393      	bics	r3, r2
 8008b78:	3308      	adds	r3, #8
 8008b7a:	0006      	movs	r6, r0
 8008b7c:	001f      	movs	r7, r3
 8008b7e:	2b0c      	cmp	r3, #12
 8008b80:	d232      	bcs.n	8008be8 <_malloc_r+0x78>
 8008b82:	270c      	movs	r7, #12
 8008b84:	42b9      	cmp	r1, r7
 8008b86:	d831      	bhi.n	8008bec <_malloc_r+0x7c>
 8008b88:	0030      	movs	r0, r6
 8008b8a:	f000 fa2f 	bl	8008fec <__malloc_lock>
 8008b8e:	4d32      	ldr	r5, [pc, #200]	; (8008c58 <_malloc_r+0xe8>)
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	001c      	movs	r4, r3
 8008b94:	2c00      	cmp	r4, #0
 8008b96:	d12e      	bne.n	8008bf6 <_malloc_r+0x86>
 8008b98:	0039      	movs	r1, r7
 8008b9a:	0030      	movs	r0, r6
 8008b9c:	f7ff ffc6 	bl	8008b2c <sbrk_aligned>
 8008ba0:	0004      	movs	r4, r0
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d11e      	bne.n	8008be4 <_malloc_r+0x74>
 8008ba6:	682c      	ldr	r4, [r5, #0]
 8008ba8:	0025      	movs	r5, r4
 8008baa:	2d00      	cmp	r5, #0
 8008bac:	d14a      	bne.n	8008c44 <_malloc_r+0xd4>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	0029      	movs	r1, r5
 8008bb2:	18e3      	adds	r3, r4, r3
 8008bb4:	0030      	movs	r0, r6
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	f000 f9b2 	bl	8008f20 <_sbrk_r>
 8008bbc:	9b01      	ldr	r3, [sp, #4]
 8008bbe:	4283      	cmp	r3, r0
 8008bc0:	d143      	bne.n	8008c4a <_malloc_r+0xda>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	3703      	adds	r7, #3
 8008bc6:	1aff      	subs	r7, r7, r3
 8008bc8:	2303      	movs	r3, #3
 8008bca:	439f      	bics	r7, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	2f0c      	cmp	r7, #12
 8008bd0:	d200      	bcs.n	8008bd4 <_malloc_r+0x64>
 8008bd2:	270c      	movs	r7, #12
 8008bd4:	0039      	movs	r1, r7
 8008bd6:	0030      	movs	r0, r6
 8008bd8:	f7ff ffa8 	bl	8008b2c <sbrk_aligned>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d034      	beq.n	8008c4a <_malloc_r+0xda>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	19df      	adds	r7, r3, r7
 8008be4:	6027      	str	r7, [r4, #0]
 8008be6:	e013      	b.n	8008c10 <_malloc_r+0xa0>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dacb      	bge.n	8008b84 <_malloc_r+0x14>
 8008bec:	230c      	movs	r3, #12
 8008bee:	2500      	movs	r5, #0
 8008bf0:	6033      	str	r3, [r6, #0]
 8008bf2:	0028      	movs	r0, r5
 8008bf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bf6:	6822      	ldr	r2, [r4, #0]
 8008bf8:	1bd1      	subs	r1, r2, r7
 8008bfa:	d420      	bmi.n	8008c3e <_malloc_r+0xce>
 8008bfc:	290b      	cmp	r1, #11
 8008bfe:	d917      	bls.n	8008c30 <_malloc_r+0xc0>
 8008c00:	19e2      	adds	r2, r4, r7
 8008c02:	6027      	str	r7, [r4, #0]
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	d111      	bne.n	8008c2c <_malloc_r+0xbc>
 8008c08:	602a      	str	r2, [r5, #0]
 8008c0a:	6863      	ldr	r3, [r4, #4]
 8008c0c:	6011      	str	r1, [r2, #0]
 8008c0e:	6053      	str	r3, [r2, #4]
 8008c10:	0030      	movs	r0, r6
 8008c12:	0025      	movs	r5, r4
 8008c14:	f000 f9f2 	bl	8008ffc <__malloc_unlock>
 8008c18:	2207      	movs	r2, #7
 8008c1a:	350b      	adds	r5, #11
 8008c1c:	1d23      	adds	r3, r4, #4
 8008c1e:	4395      	bics	r5, r2
 8008c20:	1aea      	subs	r2, r5, r3
 8008c22:	429d      	cmp	r5, r3
 8008c24:	d0e5      	beq.n	8008bf2 <_malloc_r+0x82>
 8008c26:	1b5b      	subs	r3, r3, r5
 8008c28:	50a3      	str	r3, [r4, r2]
 8008c2a:	e7e2      	b.n	8008bf2 <_malloc_r+0x82>
 8008c2c:	605a      	str	r2, [r3, #4]
 8008c2e:	e7ec      	b.n	8008c0a <_malloc_r+0x9a>
 8008c30:	6862      	ldr	r2, [r4, #4]
 8008c32:	42a3      	cmp	r3, r4
 8008c34:	d101      	bne.n	8008c3a <_malloc_r+0xca>
 8008c36:	602a      	str	r2, [r5, #0]
 8008c38:	e7ea      	b.n	8008c10 <_malloc_r+0xa0>
 8008c3a:	605a      	str	r2, [r3, #4]
 8008c3c:	e7e8      	b.n	8008c10 <_malloc_r+0xa0>
 8008c3e:	0023      	movs	r3, r4
 8008c40:	6864      	ldr	r4, [r4, #4]
 8008c42:	e7a7      	b.n	8008b94 <_malloc_r+0x24>
 8008c44:	002c      	movs	r4, r5
 8008c46:	686d      	ldr	r5, [r5, #4]
 8008c48:	e7af      	b.n	8008baa <_malloc_r+0x3a>
 8008c4a:	230c      	movs	r3, #12
 8008c4c:	0030      	movs	r0, r6
 8008c4e:	6033      	str	r3, [r6, #0]
 8008c50:	f000 f9d4 	bl	8008ffc <__malloc_unlock>
 8008c54:	e7cd      	b.n	8008bf2 <_malloc_r+0x82>
 8008c56:	46c0      	nop			; (mov r8, r8)
 8008c58:	20000d20 	.word	0x20000d20

08008c5c <__ssputs_r>:
 8008c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c5e:	688e      	ldr	r6, [r1, #8]
 8008c60:	b085      	sub	sp, #20
 8008c62:	0007      	movs	r7, r0
 8008c64:	000c      	movs	r4, r1
 8008c66:	9203      	str	r2, [sp, #12]
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	429e      	cmp	r6, r3
 8008c6c:	d83c      	bhi.n	8008ce8 <__ssputs_r+0x8c>
 8008c6e:	2390      	movs	r3, #144	; 0x90
 8008c70:	898a      	ldrh	r2, [r1, #12]
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	421a      	tst	r2, r3
 8008c76:	d034      	beq.n	8008ce2 <__ssputs_r+0x86>
 8008c78:	6909      	ldr	r1, [r1, #16]
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	6960      	ldr	r0, [r4, #20]
 8008c7e:	1a5b      	subs	r3, r3, r1
 8008c80:	9302      	str	r3, [sp, #8]
 8008c82:	2303      	movs	r3, #3
 8008c84:	4343      	muls	r3, r0
 8008c86:	0fdd      	lsrs	r5, r3, #31
 8008c88:	18ed      	adds	r5, r5, r3
 8008c8a:	9b01      	ldr	r3, [sp, #4]
 8008c8c:	9802      	ldr	r0, [sp, #8]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	181b      	adds	r3, r3, r0
 8008c92:	106d      	asrs	r5, r5, #1
 8008c94:	42ab      	cmp	r3, r5
 8008c96:	d900      	bls.n	8008c9a <__ssputs_r+0x3e>
 8008c98:	001d      	movs	r5, r3
 8008c9a:	0553      	lsls	r3, r2, #21
 8008c9c:	d532      	bpl.n	8008d04 <__ssputs_r+0xa8>
 8008c9e:	0029      	movs	r1, r5
 8008ca0:	0038      	movs	r0, r7
 8008ca2:	f7ff ff65 	bl	8008b70 <_malloc_r>
 8008ca6:	1e06      	subs	r6, r0, #0
 8008ca8:	d109      	bne.n	8008cbe <__ssputs_r+0x62>
 8008caa:	230c      	movs	r3, #12
 8008cac:	603b      	str	r3, [r7, #0]
 8008cae:	2340      	movs	r3, #64	; 0x40
 8008cb0:	2001      	movs	r0, #1
 8008cb2:	89a2      	ldrh	r2, [r4, #12]
 8008cb4:	4240      	negs	r0, r0
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	81a3      	strh	r3, [r4, #12]
 8008cba:	b005      	add	sp, #20
 8008cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cbe:	9a02      	ldr	r2, [sp, #8]
 8008cc0:	6921      	ldr	r1, [r4, #16]
 8008cc2:	f7fd ffc1 	bl	8006c48 <memcpy>
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	4a14      	ldr	r2, [pc, #80]	; (8008d1c <__ssputs_r+0xc0>)
 8008cca:	401a      	ands	r2, r3
 8008ccc:	2380      	movs	r3, #128	; 0x80
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	81a3      	strh	r3, [r4, #12]
 8008cd2:	9b02      	ldr	r3, [sp, #8]
 8008cd4:	6126      	str	r6, [r4, #16]
 8008cd6:	18f6      	adds	r6, r6, r3
 8008cd8:	6026      	str	r6, [r4, #0]
 8008cda:	6165      	str	r5, [r4, #20]
 8008cdc:	9e01      	ldr	r6, [sp, #4]
 8008cde:	1aed      	subs	r5, r5, r3
 8008ce0:	60a5      	str	r5, [r4, #8]
 8008ce2:	9b01      	ldr	r3, [sp, #4]
 8008ce4:	429e      	cmp	r6, r3
 8008ce6:	d900      	bls.n	8008cea <__ssputs_r+0x8e>
 8008ce8:	9e01      	ldr	r6, [sp, #4]
 8008cea:	0032      	movs	r2, r6
 8008cec:	9903      	ldr	r1, [sp, #12]
 8008cee:	6820      	ldr	r0, [r4, #0]
 8008cf0:	f000 f968 	bl	8008fc4 <memmove>
 8008cf4:	68a3      	ldr	r3, [r4, #8]
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	1b9b      	subs	r3, r3, r6
 8008cfa:	60a3      	str	r3, [r4, #8]
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	199e      	adds	r6, r3, r6
 8008d00:	6026      	str	r6, [r4, #0]
 8008d02:	e7da      	b.n	8008cba <__ssputs_r+0x5e>
 8008d04:	002a      	movs	r2, r5
 8008d06:	0038      	movs	r0, r7
 8008d08:	f000 f980 	bl	800900c <_realloc_r>
 8008d0c:	1e06      	subs	r6, r0, #0
 8008d0e:	d1e0      	bne.n	8008cd2 <__ssputs_r+0x76>
 8008d10:	0038      	movs	r0, r7
 8008d12:	6921      	ldr	r1, [r4, #16]
 8008d14:	f7ff fec0 	bl	8008a98 <_free_r>
 8008d18:	e7c7      	b.n	8008caa <__ssputs_r+0x4e>
 8008d1a:	46c0      	nop			; (mov r8, r8)
 8008d1c:	fffffb7f 	.word	0xfffffb7f

08008d20 <_svfiprintf_r>:
 8008d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d22:	b0a1      	sub	sp, #132	; 0x84
 8008d24:	9003      	str	r0, [sp, #12]
 8008d26:	001d      	movs	r5, r3
 8008d28:	898b      	ldrh	r3, [r1, #12]
 8008d2a:	000f      	movs	r7, r1
 8008d2c:	0016      	movs	r6, r2
 8008d2e:	061b      	lsls	r3, r3, #24
 8008d30:	d511      	bpl.n	8008d56 <_svfiprintf_r+0x36>
 8008d32:	690b      	ldr	r3, [r1, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10e      	bne.n	8008d56 <_svfiprintf_r+0x36>
 8008d38:	2140      	movs	r1, #64	; 0x40
 8008d3a:	f7ff ff19 	bl	8008b70 <_malloc_r>
 8008d3e:	6038      	str	r0, [r7, #0]
 8008d40:	6138      	str	r0, [r7, #16]
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d105      	bne.n	8008d52 <_svfiprintf_r+0x32>
 8008d46:	230c      	movs	r3, #12
 8008d48:	9a03      	ldr	r2, [sp, #12]
 8008d4a:	3801      	subs	r0, #1
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	b021      	add	sp, #132	; 0x84
 8008d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d52:	2340      	movs	r3, #64	; 0x40
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	2300      	movs	r3, #0
 8008d58:	ac08      	add	r4, sp, #32
 8008d5a:	6163      	str	r3, [r4, #20]
 8008d5c:	3320      	adds	r3, #32
 8008d5e:	7663      	strb	r3, [r4, #25]
 8008d60:	3310      	adds	r3, #16
 8008d62:	76a3      	strb	r3, [r4, #26]
 8008d64:	9507      	str	r5, [sp, #28]
 8008d66:	0035      	movs	r5, r6
 8008d68:	782b      	ldrb	r3, [r5, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <_svfiprintf_r+0x52>
 8008d6e:	2b25      	cmp	r3, #37	; 0x25
 8008d70:	d147      	bne.n	8008e02 <_svfiprintf_r+0xe2>
 8008d72:	1bab      	subs	r3, r5, r6
 8008d74:	9305      	str	r3, [sp, #20]
 8008d76:	42b5      	cmp	r5, r6
 8008d78:	d00c      	beq.n	8008d94 <_svfiprintf_r+0x74>
 8008d7a:	0032      	movs	r2, r6
 8008d7c:	0039      	movs	r1, r7
 8008d7e:	9803      	ldr	r0, [sp, #12]
 8008d80:	f7ff ff6c 	bl	8008c5c <__ssputs_r>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d100      	bne.n	8008d8a <_svfiprintf_r+0x6a>
 8008d88:	e0ae      	b.n	8008ee8 <_svfiprintf_r+0x1c8>
 8008d8a:	6962      	ldr	r2, [r4, #20]
 8008d8c:	9b05      	ldr	r3, [sp, #20]
 8008d8e:	4694      	mov	ip, r2
 8008d90:	4463      	add	r3, ip
 8008d92:	6163      	str	r3, [r4, #20]
 8008d94:	782b      	ldrb	r3, [r5, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d100      	bne.n	8008d9c <_svfiprintf_r+0x7c>
 8008d9a:	e0a5      	b.n	8008ee8 <_svfiprintf_r+0x1c8>
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	2300      	movs	r3, #0
 8008da0:	4252      	negs	r2, r2
 8008da2:	6062      	str	r2, [r4, #4]
 8008da4:	a904      	add	r1, sp, #16
 8008da6:	3254      	adds	r2, #84	; 0x54
 8008da8:	1852      	adds	r2, r2, r1
 8008daa:	1c6e      	adds	r6, r5, #1
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	60e3      	str	r3, [r4, #12]
 8008db0:	60a3      	str	r3, [r4, #8]
 8008db2:	7013      	strb	r3, [r2, #0]
 8008db4:	65a3      	str	r3, [r4, #88]	; 0x58
 8008db6:	2205      	movs	r2, #5
 8008db8:	7831      	ldrb	r1, [r6, #0]
 8008dba:	4854      	ldr	r0, [pc, #336]	; (8008f0c <_svfiprintf_r+0x1ec>)
 8008dbc:	f7ff fa98 	bl	80082f0 <memchr>
 8008dc0:	1c75      	adds	r5, r6, #1
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d11f      	bne.n	8008e06 <_svfiprintf_r+0xe6>
 8008dc6:	6822      	ldr	r2, [r4, #0]
 8008dc8:	06d3      	lsls	r3, r2, #27
 8008dca:	d504      	bpl.n	8008dd6 <_svfiprintf_r+0xb6>
 8008dcc:	2353      	movs	r3, #83	; 0x53
 8008dce:	a904      	add	r1, sp, #16
 8008dd0:	185b      	adds	r3, r3, r1
 8008dd2:	2120      	movs	r1, #32
 8008dd4:	7019      	strb	r1, [r3, #0]
 8008dd6:	0713      	lsls	r3, r2, #28
 8008dd8:	d504      	bpl.n	8008de4 <_svfiprintf_r+0xc4>
 8008dda:	2353      	movs	r3, #83	; 0x53
 8008ddc:	a904      	add	r1, sp, #16
 8008dde:	185b      	adds	r3, r3, r1
 8008de0:	212b      	movs	r1, #43	; 0x2b
 8008de2:	7019      	strb	r1, [r3, #0]
 8008de4:	7833      	ldrb	r3, [r6, #0]
 8008de6:	2b2a      	cmp	r3, #42	; 0x2a
 8008de8:	d016      	beq.n	8008e18 <_svfiprintf_r+0xf8>
 8008dea:	0035      	movs	r5, r6
 8008dec:	2100      	movs	r1, #0
 8008dee:	200a      	movs	r0, #10
 8008df0:	68e3      	ldr	r3, [r4, #12]
 8008df2:	782a      	ldrb	r2, [r5, #0]
 8008df4:	1c6e      	adds	r6, r5, #1
 8008df6:	3a30      	subs	r2, #48	; 0x30
 8008df8:	2a09      	cmp	r2, #9
 8008dfa:	d94e      	bls.n	8008e9a <_svfiprintf_r+0x17a>
 8008dfc:	2900      	cmp	r1, #0
 8008dfe:	d111      	bne.n	8008e24 <_svfiprintf_r+0x104>
 8008e00:	e017      	b.n	8008e32 <_svfiprintf_r+0x112>
 8008e02:	3501      	adds	r5, #1
 8008e04:	e7b0      	b.n	8008d68 <_svfiprintf_r+0x48>
 8008e06:	4b41      	ldr	r3, [pc, #260]	; (8008f0c <_svfiprintf_r+0x1ec>)
 8008e08:	6822      	ldr	r2, [r4, #0]
 8008e0a:	1ac0      	subs	r0, r0, r3
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	4083      	lsls	r3, r0
 8008e10:	4313      	orrs	r3, r2
 8008e12:	002e      	movs	r6, r5
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	e7ce      	b.n	8008db6 <_svfiprintf_r+0x96>
 8008e18:	9b07      	ldr	r3, [sp, #28]
 8008e1a:	1d19      	adds	r1, r3, #4
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	9107      	str	r1, [sp, #28]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	db01      	blt.n	8008e28 <_svfiprintf_r+0x108>
 8008e24:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e26:	e004      	b.n	8008e32 <_svfiprintf_r+0x112>
 8008e28:	425b      	negs	r3, r3
 8008e2a:	60e3      	str	r3, [r4, #12]
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	782b      	ldrb	r3, [r5, #0]
 8008e34:	2b2e      	cmp	r3, #46	; 0x2e
 8008e36:	d10a      	bne.n	8008e4e <_svfiprintf_r+0x12e>
 8008e38:	786b      	ldrb	r3, [r5, #1]
 8008e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e3c:	d135      	bne.n	8008eaa <_svfiprintf_r+0x18a>
 8008e3e:	9b07      	ldr	r3, [sp, #28]
 8008e40:	3502      	adds	r5, #2
 8008e42:	1d1a      	adds	r2, r3, #4
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	9207      	str	r2, [sp, #28]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	db2b      	blt.n	8008ea4 <_svfiprintf_r+0x184>
 8008e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e4e:	4e30      	ldr	r6, [pc, #192]	; (8008f10 <_svfiprintf_r+0x1f0>)
 8008e50:	2203      	movs	r2, #3
 8008e52:	0030      	movs	r0, r6
 8008e54:	7829      	ldrb	r1, [r5, #0]
 8008e56:	f7ff fa4b 	bl	80082f0 <memchr>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d006      	beq.n	8008e6c <_svfiprintf_r+0x14c>
 8008e5e:	2340      	movs	r3, #64	; 0x40
 8008e60:	1b80      	subs	r0, r0, r6
 8008e62:	4083      	lsls	r3, r0
 8008e64:	6822      	ldr	r2, [r4, #0]
 8008e66:	3501      	adds	r5, #1
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	6023      	str	r3, [r4, #0]
 8008e6c:	7829      	ldrb	r1, [r5, #0]
 8008e6e:	2206      	movs	r2, #6
 8008e70:	4828      	ldr	r0, [pc, #160]	; (8008f14 <_svfiprintf_r+0x1f4>)
 8008e72:	1c6e      	adds	r6, r5, #1
 8008e74:	7621      	strb	r1, [r4, #24]
 8008e76:	f7ff fa3b 	bl	80082f0 <memchr>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d03c      	beq.n	8008ef8 <_svfiprintf_r+0x1d8>
 8008e7e:	4b26      	ldr	r3, [pc, #152]	; (8008f18 <_svfiprintf_r+0x1f8>)
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d125      	bne.n	8008ed0 <_svfiprintf_r+0x1b0>
 8008e84:	2207      	movs	r2, #7
 8008e86:	9b07      	ldr	r3, [sp, #28]
 8008e88:	3307      	adds	r3, #7
 8008e8a:	4393      	bics	r3, r2
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	9307      	str	r3, [sp, #28]
 8008e90:	6963      	ldr	r3, [r4, #20]
 8008e92:	9a04      	ldr	r2, [sp, #16]
 8008e94:	189b      	adds	r3, r3, r2
 8008e96:	6163      	str	r3, [r4, #20]
 8008e98:	e765      	b.n	8008d66 <_svfiprintf_r+0x46>
 8008e9a:	4343      	muls	r3, r0
 8008e9c:	0035      	movs	r5, r6
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	189b      	adds	r3, r3, r2
 8008ea2:	e7a6      	b.n	8008df2 <_svfiprintf_r+0xd2>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	425b      	negs	r3, r3
 8008ea8:	e7d0      	b.n	8008e4c <_svfiprintf_r+0x12c>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	200a      	movs	r0, #10
 8008eae:	001a      	movs	r2, r3
 8008eb0:	3501      	adds	r5, #1
 8008eb2:	6063      	str	r3, [r4, #4]
 8008eb4:	7829      	ldrb	r1, [r5, #0]
 8008eb6:	1c6e      	adds	r6, r5, #1
 8008eb8:	3930      	subs	r1, #48	; 0x30
 8008eba:	2909      	cmp	r1, #9
 8008ebc:	d903      	bls.n	8008ec6 <_svfiprintf_r+0x1a6>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0c5      	beq.n	8008e4e <_svfiprintf_r+0x12e>
 8008ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ec4:	e7c3      	b.n	8008e4e <_svfiprintf_r+0x12e>
 8008ec6:	4342      	muls	r2, r0
 8008ec8:	0035      	movs	r5, r6
 8008eca:	2301      	movs	r3, #1
 8008ecc:	1852      	adds	r2, r2, r1
 8008ece:	e7f1      	b.n	8008eb4 <_svfiprintf_r+0x194>
 8008ed0:	ab07      	add	r3, sp, #28
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	003a      	movs	r2, r7
 8008ed6:	0021      	movs	r1, r4
 8008ed8:	4b10      	ldr	r3, [pc, #64]	; (8008f1c <_svfiprintf_r+0x1fc>)
 8008eda:	9803      	ldr	r0, [sp, #12]
 8008edc:	f7fd ff70 	bl	8006dc0 <_printf_float>
 8008ee0:	9004      	str	r0, [sp, #16]
 8008ee2:	9b04      	ldr	r3, [sp, #16]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	d1d3      	bne.n	8008e90 <_svfiprintf_r+0x170>
 8008ee8:	89bb      	ldrh	r3, [r7, #12]
 8008eea:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008eec:	065b      	lsls	r3, r3, #25
 8008eee:	d400      	bmi.n	8008ef2 <_svfiprintf_r+0x1d2>
 8008ef0:	e72d      	b.n	8008d4e <_svfiprintf_r+0x2e>
 8008ef2:	2001      	movs	r0, #1
 8008ef4:	4240      	negs	r0, r0
 8008ef6:	e72a      	b.n	8008d4e <_svfiprintf_r+0x2e>
 8008ef8:	ab07      	add	r3, sp, #28
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	003a      	movs	r2, r7
 8008efe:	0021      	movs	r1, r4
 8008f00:	4b06      	ldr	r3, [pc, #24]	; (8008f1c <_svfiprintf_r+0x1fc>)
 8008f02:	9803      	ldr	r0, [sp, #12]
 8008f04:	f7fe fa0e 	bl	8007324 <_printf_i>
 8008f08:	e7ea      	b.n	8008ee0 <_svfiprintf_r+0x1c0>
 8008f0a:	46c0      	nop			; (mov r8, r8)
 8008f0c:	0800f40c 	.word	0x0800f40c
 8008f10:	0800f412 	.word	0x0800f412
 8008f14:	0800f416 	.word	0x0800f416
 8008f18:	08006dc1 	.word	0x08006dc1
 8008f1c:	08008c5d 	.word	0x08008c5d

08008f20 <_sbrk_r>:
 8008f20:	2300      	movs	r3, #0
 8008f22:	b570      	push	{r4, r5, r6, lr}
 8008f24:	4d06      	ldr	r5, [pc, #24]	; (8008f40 <_sbrk_r+0x20>)
 8008f26:	0004      	movs	r4, r0
 8008f28:	0008      	movs	r0, r1
 8008f2a:	602b      	str	r3, [r5, #0]
 8008f2c:	f7fb ff5e 	bl	8004dec <_sbrk>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d103      	bne.n	8008f3c <_sbrk_r+0x1c>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d000      	beq.n	8008f3c <_sbrk_r+0x1c>
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	bd70      	pop	{r4, r5, r6, pc}
 8008f3e:	46c0      	nop			; (mov r8, r8)
 8008f40:	20000d28 	.word	0x20000d28

08008f44 <__assert_func>:
 8008f44:	b530      	push	{r4, r5, lr}
 8008f46:	0014      	movs	r4, r2
 8008f48:	001a      	movs	r2, r3
 8008f4a:	4b09      	ldr	r3, [pc, #36]	; (8008f70 <__assert_func+0x2c>)
 8008f4c:	0005      	movs	r5, r0
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	b085      	sub	sp, #20
 8008f52:	68d8      	ldr	r0, [r3, #12]
 8008f54:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <__assert_func+0x30>)
 8008f56:	2c00      	cmp	r4, #0
 8008f58:	d101      	bne.n	8008f5e <__assert_func+0x1a>
 8008f5a:	4b07      	ldr	r3, [pc, #28]	; (8008f78 <__assert_func+0x34>)
 8008f5c:	001c      	movs	r4, r3
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	9100      	str	r1, [sp, #0]
 8008f62:	002b      	movs	r3, r5
 8008f64:	4905      	ldr	r1, [pc, #20]	; (8008f7c <__assert_func+0x38>)
 8008f66:	9402      	str	r4, [sp, #8]
 8008f68:	f000 f80a 	bl	8008f80 <fiprintf>
 8008f6c:	f000 faba 	bl	80094e4 <abort>
 8008f70:	200000a8 	.word	0x200000a8
 8008f74:	0800f41d 	.word	0x0800f41d
 8008f78:	0800f458 	.word	0x0800f458
 8008f7c:	0800f42a 	.word	0x0800f42a

08008f80 <fiprintf>:
 8008f80:	b40e      	push	{r1, r2, r3}
 8008f82:	b503      	push	{r0, r1, lr}
 8008f84:	0001      	movs	r1, r0
 8008f86:	ab03      	add	r3, sp, #12
 8008f88:	4804      	ldr	r0, [pc, #16]	; (8008f9c <fiprintf+0x1c>)
 8008f8a:	cb04      	ldmia	r3!, {r2}
 8008f8c:	6800      	ldr	r0, [r0, #0]
 8008f8e:	9301      	str	r3, [sp, #4]
 8008f90:	f000 f892 	bl	80090b8 <_vfiprintf_r>
 8008f94:	b002      	add	sp, #8
 8008f96:	bc08      	pop	{r3}
 8008f98:	b003      	add	sp, #12
 8008f9a:	4718      	bx	r3
 8008f9c:	200000a8 	.word	0x200000a8

08008fa0 <__ascii_mbtowc>:
 8008fa0:	b082      	sub	sp, #8
 8008fa2:	2900      	cmp	r1, #0
 8008fa4:	d100      	bne.n	8008fa8 <__ascii_mbtowc+0x8>
 8008fa6:	a901      	add	r1, sp, #4
 8008fa8:	1e10      	subs	r0, r2, #0
 8008faa:	d006      	beq.n	8008fba <__ascii_mbtowc+0x1a>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d006      	beq.n	8008fbe <__ascii_mbtowc+0x1e>
 8008fb0:	7813      	ldrb	r3, [r2, #0]
 8008fb2:	600b      	str	r3, [r1, #0]
 8008fb4:	7810      	ldrb	r0, [r2, #0]
 8008fb6:	1e43      	subs	r3, r0, #1
 8008fb8:	4198      	sbcs	r0, r3
 8008fba:	b002      	add	sp, #8
 8008fbc:	4770      	bx	lr
 8008fbe:	2002      	movs	r0, #2
 8008fc0:	4240      	negs	r0, r0
 8008fc2:	e7fa      	b.n	8008fba <__ascii_mbtowc+0x1a>

08008fc4 <memmove>:
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	4288      	cmp	r0, r1
 8008fc8:	d902      	bls.n	8008fd0 <memmove+0xc>
 8008fca:	188b      	adds	r3, r1, r2
 8008fcc:	4298      	cmp	r0, r3
 8008fce:	d303      	bcc.n	8008fd8 <memmove+0x14>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e007      	b.n	8008fe4 <memmove+0x20>
 8008fd4:	5c8b      	ldrb	r3, [r1, r2]
 8008fd6:	5483      	strb	r3, [r0, r2]
 8008fd8:	3a01      	subs	r2, #1
 8008fda:	d2fb      	bcs.n	8008fd4 <memmove+0x10>
 8008fdc:	bd10      	pop	{r4, pc}
 8008fde:	5ccc      	ldrb	r4, [r1, r3]
 8008fe0:	54c4      	strb	r4, [r0, r3]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d1fa      	bne.n	8008fde <memmove+0x1a>
 8008fe8:	e7f8      	b.n	8008fdc <memmove+0x18>
	...

08008fec <__malloc_lock>:
 8008fec:	b510      	push	{r4, lr}
 8008fee:	4802      	ldr	r0, [pc, #8]	; (8008ff8 <__malloc_lock+0xc>)
 8008ff0:	f000 fc4f 	bl	8009892 <__retarget_lock_acquire_recursive>
 8008ff4:	bd10      	pop	{r4, pc}
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	20000d2c 	.word	0x20000d2c

08008ffc <__malloc_unlock>:
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	4802      	ldr	r0, [pc, #8]	; (8009008 <__malloc_unlock+0xc>)
 8009000:	f000 fc48 	bl	8009894 <__retarget_lock_release_recursive>
 8009004:	bd10      	pop	{r4, pc}
 8009006:	46c0      	nop			; (mov r8, r8)
 8009008:	20000d2c 	.word	0x20000d2c

0800900c <_realloc_r>:
 800900c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800900e:	0007      	movs	r7, r0
 8009010:	000e      	movs	r6, r1
 8009012:	0014      	movs	r4, r2
 8009014:	2900      	cmp	r1, #0
 8009016:	d105      	bne.n	8009024 <_realloc_r+0x18>
 8009018:	0011      	movs	r1, r2
 800901a:	f7ff fda9 	bl	8008b70 <_malloc_r>
 800901e:	0005      	movs	r5, r0
 8009020:	0028      	movs	r0, r5
 8009022:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009024:	2a00      	cmp	r2, #0
 8009026:	d103      	bne.n	8009030 <_realloc_r+0x24>
 8009028:	f7ff fd36 	bl	8008a98 <_free_r>
 800902c:	0025      	movs	r5, r4
 800902e:	e7f7      	b.n	8009020 <_realloc_r+0x14>
 8009030:	f000 fc9e 	bl	8009970 <_malloc_usable_size_r>
 8009034:	9001      	str	r0, [sp, #4]
 8009036:	4284      	cmp	r4, r0
 8009038:	d803      	bhi.n	8009042 <_realloc_r+0x36>
 800903a:	0035      	movs	r5, r6
 800903c:	0843      	lsrs	r3, r0, #1
 800903e:	42a3      	cmp	r3, r4
 8009040:	d3ee      	bcc.n	8009020 <_realloc_r+0x14>
 8009042:	0021      	movs	r1, r4
 8009044:	0038      	movs	r0, r7
 8009046:	f7ff fd93 	bl	8008b70 <_malloc_r>
 800904a:	1e05      	subs	r5, r0, #0
 800904c:	d0e8      	beq.n	8009020 <_realloc_r+0x14>
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	0022      	movs	r2, r4
 8009052:	429c      	cmp	r4, r3
 8009054:	d900      	bls.n	8009058 <_realloc_r+0x4c>
 8009056:	001a      	movs	r2, r3
 8009058:	0031      	movs	r1, r6
 800905a:	0028      	movs	r0, r5
 800905c:	f7fd fdf4 	bl	8006c48 <memcpy>
 8009060:	0031      	movs	r1, r6
 8009062:	0038      	movs	r0, r7
 8009064:	f7ff fd18 	bl	8008a98 <_free_r>
 8009068:	e7da      	b.n	8009020 <_realloc_r+0x14>

0800906a <__sfputc_r>:
 800906a:	6893      	ldr	r3, [r2, #8]
 800906c:	b510      	push	{r4, lr}
 800906e:	3b01      	subs	r3, #1
 8009070:	6093      	str	r3, [r2, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	da04      	bge.n	8009080 <__sfputc_r+0x16>
 8009076:	6994      	ldr	r4, [r2, #24]
 8009078:	42a3      	cmp	r3, r4
 800907a:	db07      	blt.n	800908c <__sfputc_r+0x22>
 800907c:	290a      	cmp	r1, #10
 800907e:	d005      	beq.n	800908c <__sfputc_r+0x22>
 8009080:	6813      	ldr	r3, [r2, #0]
 8009082:	1c58      	adds	r0, r3, #1
 8009084:	6010      	str	r0, [r2, #0]
 8009086:	7019      	strb	r1, [r3, #0]
 8009088:	0008      	movs	r0, r1
 800908a:	bd10      	pop	{r4, pc}
 800908c:	f000 f94e 	bl	800932c <__swbuf_r>
 8009090:	0001      	movs	r1, r0
 8009092:	e7f9      	b.n	8009088 <__sfputc_r+0x1e>

08009094 <__sfputs_r>:
 8009094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009096:	0006      	movs	r6, r0
 8009098:	000f      	movs	r7, r1
 800909a:	0014      	movs	r4, r2
 800909c:	18d5      	adds	r5, r2, r3
 800909e:	42ac      	cmp	r4, r5
 80090a0:	d101      	bne.n	80090a6 <__sfputs_r+0x12>
 80090a2:	2000      	movs	r0, #0
 80090a4:	e007      	b.n	80090b6 <__sfputs_r+0x22>
 80090a6:	7821      	ldrb	r1, [r4, #0]
 80090a8:	003a      	movs	r2, r7
 80090aa:	0030      	movs	r0, r6
 80090ac:	f7ff ffdd 	bl	800906a <__sfputc_r>
 80090b0:	3401      	adds	r4, #1
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	d1f3      	bne.n	800909e <__sfputs_r+0xa>
 80090b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090b8 <_vfiprintf_r>:
 80090b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ba:	b0a1      	sub	sp, #132	; 0x84
 80090bc:	0006      	movs	r6, r0
 80090be:	000c      	movs	r4, r1
 80090c0:	001f      	movs	r7, r3
 80090c2:	9203      	str	r2, [sp, #12]
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d004      	beq.n	80090d2 <_vfiprintf_r+0x1a>
 80090c8:	6983      	ldr	r3, [r0, #24]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d101      	bne.n	80090d2 <_vfiprintf_r+0x1a>
 80090ce:	f000 fb3f 	bl	8009750 <__sinit>
 80090d2:	4b8e      	ldr	r3, [pc, #568]	; (800930c <_vfiprintf_r+0x254>)
 80090d4:	429c      	cmp	r4, r3
 80090d6:	d11c      	bne.n	8009112 <_vfiprintf_r+0x5a>
 80090d8:	6874      	ldr	r4, [r6, #4]
 80090da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090dc:	07db      	lsls	r3, r3, #31
 80090de:	d405      	bmi.n	80090ec <_vfiprintf_r+0x34>
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	059b      	lsls	r3, r3, #22
 80090e4:	d402      	bmi.n	80090ec <_vfiprintf_r+0x34>
 80090e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090e8:	f000 fbd3 	bl	8009892 <__retarget_lock_acquire_recursive>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	071b      	lsls	r3, r3, #28
 80090f0:	d502      	bpl.n	80090f8 <_vfiprintf_r+0x40>
 80090f2:	6923      	ldr	r3, [r4, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d11d      	bne.n	8009134 <_vfiprintf_r+0x7c>
 80090f8:	0021      	movs	r1, r4
 80090fa:	0030      	movs	r0, r6
 80090fc:	f000 f97a 	bl	80093f4 <__swsetup_r>
 8009100:	2800      	cmp	r0, #0
 8009102:	d017      	beq.n	8009134 <_vfiprintf_r+0x7c>
 8009104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009106:	07db      	lsls	r3, r3, #31
 8009108:	d50d      	bpl.n	8009126 <_vfiprintf_r+0x6e>
 800910a:	2001      	movs	r0, #1
 800910c:	4240      	negs	r0, r0
 800910e:	b021      	add	sp, #132	; 0x84
 8009110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009112:	4b7f      	ldr	r3, [pc, #508]	; (8009310 <_vfiprintf_r+0x258>)
 8009114:	429c      	cmp	r4, r3
 8009116:	d101      	bne.n	800911c <_vfiprintf_r+0x64>
 8009118:	68b4      	ldr	r4, [r6, #8]
 800911a:	e7de      	b.n	80090da <_vfiprintf_r+0x22>
 800911c:	4b7d      	ldr	r3, [pc, #500]	; (8009314 <_vfiprintf_r+0x25c>)
 800911e:	429c      	cmp	r4, r3
 8009120:	d1db      	bne.n	80090da <_vfiprintf_r+0x22>
 8009122:	68f4      	ldr	r4, [r6, #12]
 8009124:	e7d9      	b.n	80090da <_vfiprintf_r+0x22>
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	059b      	lsls	r3, r3, #22
 800912a:	d4ee      	bmi.n	800910a <_vfiprintf_r+0x52>
 800912c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800912e:	f000 fbb1 	bl	8009894 <__retarget_lock_release_recursive>
 8009132:	e7ea      	b.n	800910a <_vfiprintf_r+0x52>
 8009134:	2300      	movs	r3, #0
 8009136:	ad08      	add	r5, sp, #32
 8009138:	616b      	str	r3, [r5, #20]
 800913a:	3320      	adds	r3, #32
 800913c:	766b      	strb	r3, [r5, #25]
 800913e:	3310      	adds	r3, #16
 8009140:	76ab      	strb	r3, [r5, #26]
 8009142:	9707      	str	r7, [sp, #28]
 8009144:	9f03      	ldr	r7, [sp, #12]
 8009146:	783b      	ldrb	r3, [r7, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <_vfiprintf_r+0x98>
 800914c:	2b25      	cmp	r3, #37	; 0x25
 800914e:	d14e      	bne.n	80091ee <_vfiprintf_r+0x136>
 8009150:	9b03      	ldr	r3, [sp, #12]
 8009152:	1afb      	subs	r3, r7, r3
 8009154:	9305      	str	r3, [sp, #20]
 8009156:	9b03      	ldr	r3, [sp, #12]
 8009158:	429f      	cmp	r7, r3
 800915a:	d00d      	beq.n	8009178 <_vfiprintf_r+0xc0>
 800915c:	9b05      	ldr	r3, [sp, #20]
 800915e:	0021      	movs	r1, r4
 8009160:	0030      	movs	r0, r6
 8009162:	9a03      	ldr	r2, [sp, #12]
 8009164:	f7ff ff96 	bl	8009094 <__sfputs_r>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d100      	bne.n	800916e <_vfiprintf_r+0xb6>
 800916c:	e0b5      	b.n	80092da <_vfiprintf_r+0x222>
 800916e:	696a      	ldr	r2, [r5, #20]
 8009170:	9b05      	ldr	r3, [sp, #20]
 8009172:	4694      	mov	ip, r2
 8009174:	4463      	add	r3, ip
 8009176:	616b      	str	r3, [r5, #20]
 8009178:	783b      	ldrb	r3, [r7, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d100      	bne.n	8009180 <_vfiprintf_r+0xc8>
 800917e:	e0ac      	b.n	80092da <_vfiprintf_r+0x222>
 8009180:	2201      	movs	r2, #1
 8009182:	1c7b      	adds	r3, r7, #1
 8009184:	9303      	str	r3, [sp, #12]
 8009186:	2300      	movs	r3, #0
 8009188:	4252      	negs	r2, r2
 800918a:	606a      	str	r2, [r5, #4]
 800918c:	a904      	add	r1, sp, #16
 800918e:	3254      	adds	r2, #84	; 0x54
 8009190:	1852      	adds	r2, r2, r1
 8009192:	602b      	str	r3, [r5, #0]
 8009194:	60eb      	str	r3, [r5, #12]
 8009196:	60ab      	str	r3, [r5, #8]
 8009198:	7013      	strb	r3, [r2, #0]
 800919a:	65ab      	str	r3, [r5, #88]	; 0x58
 800919c:	9b03      	ldr	r3, [sp, #12]
 800919e:	2205      	movs	r2, #5
 80091a0:	7819      	ldrb	r1, [r3, #0]
 80091a2:	485d      	ldr	r0, [pc, #372]	; (8009318 <_vfiprintf_r+0x260>)
 80091a4:	f7ff f8a4 	bl	80082f0 <memchr>
 80091a8:	9b03      	ldr	r3, [sp, #12]
 80091aa:	1c5f      	adds	r7, r3, #1
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d120      	bne.n	80091f2 <_vfiprintf_r+0x13a>
 80091b0:	682a      	ldr	r2, [r5, #0]
 80091b2:	06d3      	lsls	r3, r2, #27
 80091b4:	d504      	bpl.n	80091c0 <_vfiprintf_r+0x108>
 80091b6:	2353      	movs	r3, #83	; 0x53
 80091b8:	a904      	add	r1, sp, #16
 80091ba:	185b      	adds	r3, r3, r1
 80091bc:	2120      	movs	r1, #32
 80091be:	7019      	strb	r1, [r3, #0]
 80091c0:	0713      	lsls	r3, r2, #28
 80091c2:	d504      	bpl.n	80091ce <_vfiprintf_r+0x116>
 80091c4:	2353      	movs	r3, #83	; 0x53
 80091c6:	a904      	add	r1, sp, #16
 80091c8:	185b      	adds	r3, r3, r1
 80091ca:	212b      	movs	r1, #43	; 0x2b
 80091cc:	7019      	strb	r1, [r3, #0]
 80091ce:	9b03      	ldr	r3, [sp, #12]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	2b2a      	cmp	r3, #42	; 0x2a
 80091d4:	d016      	beq.n	8009204 <_vfiprintf_r+0x14c>
 80091d6:	2100      	movs	r1, #0
 80091d8:	68eb      	ldr	r3, [r5, #12]
 80091da:	9f03      	ldr	r7, [sp, #12]
 80091dc:	783a      	ldrb	r2, [r7, #0]
 80091de:	1c78      	adds	r0, r7, #1
 80091e0:	3a30      	subs	r2, #48	; 0x30
 80091e2:	4684      	mov	ip, r0
 80091e4:	2a09      	cmp	r2, #9
 80091e6:	d94f      	bls.n	8009288 <_vfiprintf_r+0x1d0>
 80091e8:	2900      	cmp	r1, #0
 80091ea:	d111      	bne.n	8009210 <_vfiprintf_r+0x158>
 80091ec:	e017      	b.n	800921e <_vfiprintf_r+0x166>
 80091ee:	3701      	adds	r7, #1
 80091f0:	e7a9      	b.n	8009146 <_vfiprintf_r+0x8e>
 80091f2:	4b49      	ldr	r3, [pc, #292]	; (8009318 <_vfiprintf_r+0x260>)
 80091f4:	682a      	ldr	r2, [r5, #0]
 80091f6:	1ac0      	subs	r0, r0, r3
 80091f8:	2301      	movs	r3, #1
 80091fa:	4083      	lsls	r3, r0
 80091fc:	4313      	orrs	r3, r2
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	9703      	str	r7, [sp, #12]
 8009202:	e7cb      	b.n	800919c <_vfiprintf_r+0xe4>
 8009204:	9b07      	ldr	r3, [sp, #28]
 8009206:	1d19      	adds	r1, r3, #4
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	9107      	str	r1, [sp, #28]
 800920c:	2b00      	cmp	r3, #0
 800920e:	db01      	blt.n	8009214 <_vfiprintf_r+0x15c>
 8009210:	930b      	str	r3, [sp, #44]	; 0x2c
 8009212:	e004      	b.n	800921e <_vfiprintf_r+0x166>
 8009214:	425b      	negs	r3, r3
 8009216:	60eb      	str	r3, [r5, #12]
 8009218:	2302      	movs	r3, #2
 800921a:	4313      	orrs	r3, r2
 800921c:	602b      	str	r3, [r5, #0]
 800921e:	783b      	ldrb	r3, [r7, #0]
 8009220:	2b2e      	cmp	r3, #46	; 0x2e
 8009222:	d10a      	bne.n	800923a <_vfiprintf_r+0x182>
 8009224:	787b      	ldrb	r3, [r7, #1]
 8009226:	2b2a      	cmp	r3, #42	; 0x2a
 8009228:	d137      	bne.n	800929a <_vfiprintf_r+0x1e2>
 800922a:	9b07      	ldr	r3, [sp, #28]
 800922c:	3702      	adds	r7, #2
 800922e:	1d1a      	adds	r2, r3, #4
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	9207      	str	r2, [sp, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	db2d      	blt.n	8009294 <_vfiprintf_r+0x1dc>
 8009238:	9309      	str	r3, [sp, #36]	; 0x24
 800923a:	2203      	movs	r2, #3
 800923c:	7839      	ldrb	r1, [r7, #0]
 800923e:	4837      	ldr	r0, [pc, #220]	; (800931c <_vfiprintf_r+0x264>)
 8009240:	f7ff f856 	bl	80082f0 <memchr>
 8009244:	2800      	cmp	r0, #0
 8009246:	d007      	beq.n	8009258 <_vfiprintf_r+0x1a0>
 8009248:	4b34      	ldr	r3, [pc, #208]	; (800931c <_vfiprintf_r+0x264>)
 800924a:	682a      	ldr	r2, [r5, #0]
 800924c:	1ac0      	subs	r0, r0, r3
 800924e:	2340      	movs	r3, #64	; 0x40
 8009250:	4083      	lsls	r3, r0
 8009252:	4313      	orrs	r3, r2
 8009254:	3701      	adds	r7, #1
 8009256:	602b      	str	r3, [r5, #0]
 8009258:	7839      	ldrb	r1, [r7, #0]
 800925a:	1c7b      	adds	r3, r7, #1
 800925c:	2206      	movs	r2, #6
 800925e:	4830      	ldr	r0, [pc, #192]	; (8009320 <_vfiprintf_r+0x268>)
 8009260:	9303      	str	r3, [sp, #12]
 8009262:	7629      	strb	r1, [r5, #24]
 8009264:	f7ff f844 	bl	80082f0 <memchr>
 8009268:	2800      	cmp	r0, #0
 800926a:	d045      	beq.n	80092f8 <_vfiprintf_r+0x240>
 800926c:	4b2d      	ldr	r3, [pc, #180]	; (8009324 <_vfiprintf_r+0x26c>)
 800926e:	2b00      	cmp	r3, #0
 8009270:	d127      	bne.n	80092c2 <_vfiprintf_r+0x20a>
 8009272:	2207      	movs	r2, #7
 8009274:	9b07      	ldr	r3, [sp, #28]
 8009276:	3307      	adds	r3, #7
 8009278:	4393      	bics	r3, r2
 800927a:	3308      	adds	r3, #8
 800927c:	9307      	str	r3, [sp, #28]
 800927e:	696b      	ldr	r3, [r5, #20]
 8009280:	9a04      	ldr	r2, [sp, #16]
 8009282:	189b      	adds	r3, r3, r2
 8009284:	616b      	str	r3, [r5, #20]
 8009286:	e75d      	b.n	8009144 <_vfiprintf_r+0x8c>
 8009288:	210a      	movs	r1, #10
 800928a:	434b      	muls	r3, r1
 800928c:	4667      	mov	r7, ip
 800928e:	189b      	adds	r3, r3, r2
 8009290:	3909      	subs	r1, #9
 8009292:	e7a3      	b.n	80091dc <_vfiprintf_r+0x124>
 8009294:	2301      	movs	r3, #1
 8009296:	425b      	negs	r3, r3
 8009298:	e7ce      	b.n	8009238 <_vfiprintf_r+0x180>
 800929a:	2300      	movs	r3, #0
 800929c:	001a      	movs	r2, r3
 800929e:	3701      	adds	r7, #1
 80092a0:	606b      	str	r3, [r5, #4]
 80092a2:	7839      	ldrb	r1, [r7, #0]
 80092a4:	1c78      	adds	r0, r7, #1
 80092a6:	3930      	subs	r1, #48	; 0x30
 80092a8:	4684      	mov	ip, r0
 80092aa:	2909      	cmp	r1, #9
 80092ac:	d903      	bls.n	80092b6 <_vfiprintf_r+0x1fe>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0c3      	beq.n	800923a <_vfiprintf_r+0x182>
 80092b2:	9209      	str	r2, [sp, #36]	; 0x24
 80092b4:	e7c1      	b.n	800923a <_vfiprintf_r+0x182>
 80092b6:	230a      	movs	r3, #10
 80092b8:	435a      	muls	r2, r3
 80092ba:	4667      	mov	r7, ip
 80092bc:	1852      	adds	r2, r2, r1
 80092be:	3b09      	subs	r3, #9
 80092c0:	e7ef      	b.n	80092a2 <_vfiprintf_r+0x1ea>
 80092c2:	ab07      	add	r3, sp, #28
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	0022      	movs	r2, r4
 80092c8:	0029      	movs	r1, r5
 80092ca:	0030      	movs	r0, r6
 80092cc:	4b16      	ldr	r3, [pc, #88]	; (8009328 <_vfiprintf_r+0x270>)
 80092ce:	f7fd fd77 	bl	8006dc0 <_printf_float>
 80092d2:	9004      	str	r0, [sp, #16]
 80092d4:	9b04      	ldr	r3, [sp, #16]
 80092d6:	3301      	adds	r3, #1
 80092d8:	d1d1      	bne.n	800927e <_vfiprintf_r+0x1c6>
 80092da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092dc:	07db      	lsls	r3, r3, #31
 80092de:	d405      	bmi.n	80092ec <_vfiprintf_r+0x234>
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	059b      	lsls	r3, r3, #22
 80092e4:	d402      	bmi.n	80092ec <_vfiprintf_r+0x234>
 80092e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092e8:	f000 fad4 	bl	8009894 <__retarget_lock_release_recursive>
 80092ec:	89a3      	ldrh	r3, [r4, #12]
 80092ee:	065b      	lsls	r3, r3, #25
 80092f0:	d500      	bpl.n	80092f4 <_vfiprintf_r+0x23c>
 80092f2:	e70a      	b.n	800910a <_vfiprintf_r+0x52>
 80092f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80092f6:	e70a      	b.n	800910e <_vfiprintf_r+0x56>
 80092f8:	ab07      	add	r3, sp, #28
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	0022      	movs	r2, r4
 80092fe:	0029      	movs	r1, r5
 8009300:	0030      	movs	r0, r6
 8009302:	4b09      	ldr	r3, [pc, #36]	; (8009328 <_vfiprintf_r+0x270>)
 8009304:	f7fe f80e 	bl	8007324 <_printf_i>
 8009308:	e7e3      	b.n	80092d2 <_vfiprintf_r+0x21a>
 800930a:	46c0      	nop			; (mov r8, r8)
 800930c:	0800f584 	.word	0x0800f584
 8009310:	0800f5a4 	.word	0x0800f5a4
 8009314:	0800f564 	.word	0x0800f564
 8009318:	0800f40c 	.word	0x0800f40c
 800931c:	0800f412 	.word	0x0800f412
 8009320:	0800f416 	.word	0x0800f416
 8009324:	08006dc1 	.word	0x08006dc1
 8009328:	08009095 	.word	0x08009095

0800932c <__swbuf_r>:
 800932c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932e:	0005      	movs	r5, r0
 8009330:	000e      	movs	r6, r1
 8009332:	0014      	movs	r4, r2
 8009334:	2800      	cmp	r0, #0
 8009336:	d004      	beq.n	8009342 <__swbuf_r+0x16>
 8009338:	6983      	ldr	r3, [r0, #24]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <__swbuf_r+0x16>
 800933e:	f000 fa07 	bl	8009750 <__sinit>
 8009342:	4b22      	ldr	r3, [pc, #136]	; (80093cc <__swbuf_r+0xa0>)
 8009344:	429c      	cmp	r4, r3
 8009346:	d12e      	bne.n	80093a6 <__swbuf_r+0x7a>
 8009348:	686c      	ldr	r4, [r5, #4]
 800934a:	69a3      	ldr	r3, [r4, #24]
 800934c:	60a3      	str	r3, [r4, #8]
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	071b      	lsls	r3, r3, #28
 8009352:	d532      	bpl.n	80093ba <__swbuf_r+0x8e>
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d02f      	beq.n	80093ba <__swbuf_r+0x8e>
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	6922      	ldr	r2, [r4, #16]
 800935e:	b2f7      	uxtb	r7, r6
 8009360:	1a98      	subs	r0, r3, r2
 8009362:	6963      	ldr	r3, [r4, #20]
 8009364:	b2f6      	uxtb	r6, r6
 8009366:	4283      	cmp	r3, r0
 8009368:	dc05      	bgt.n	8009376 <__swbuf_r+0x4a>
 800936a:	0021      	movs	r1, r4
 800936c:	0028      	movs	r0, r5
 800936e:	f000 f94d 	bl	800960c <_fflush_r>
 8009372:	2800      	cmp	r0, #0
 8009374:	d127      	bne.n	80093c6 <__swbuf_r+0x9a>
 8009376:	68a3      	ldr	r3, [r4, #8]
 8009378:	3001      	adds	r0, #1
 800937a:	3b01      	subs	r3, #1
 800937c:	60a3      	str	r3, [r4, #8]
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	6022      	str	r2, [r4, #0]
 8009384:	701f      	strb	r7, [r3, #0]
 8009386:	6963      	ldr	r3, [r4, #20]
 8009388:	4283      	cmp	r3, r0
 800938a:	d004      	beq.n	8009396 <__swbuf_r+0x6a>
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	07db      	lsls	r3, r3, #31
 8009390:	d507      	bpl.n	80093a2 <__swbuf_r+0x76>
 8009392:	2e0a      	cmp	r6, #10
 8009394:	d105      	bne.n	80093a2 <__swbuf_r+0x76>
 8009396:	0021      	movs	r1, r4
 8009398:	0028      	movs	r0, r5
 800939a:	f000 f937 	bl	800960c <_fflush_r>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d111      	bne.n	80093c6 <__swbuf_r+0x9a>
 80093a2:	0030      	movs	r0, r6
 80093a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a6:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <__swbuf_r+0xa4>)
 80093a8:	429c      	cmp	r4, r3
 80093aa:	d101      	bne.n	80093b0 <__swbuf_r+0x84>
 80093ac:	68ac      	ldr	r4, [r5, #8]
 80093ae:	e7cc      	b.n	800934a <__swbuf_r+0x1e>
 80093b0:	4b08      	ldr	r3, [pc, #32]	; (80093d4 <__swbuf_r+0xa8>)
 80093b2:	429c      	cmp	r4, r3
 80093b4:	d1c9      	bne.n	800934a <__swbuf_r+0x1e>
 80093b6:	68ec      	ldr	r4, [r5, #12]
 80093b8:	e7c7      	b.n	800934a <__swbuf_r+0x1e>
 80093ba:	0021      	movs	r1, r4
 80093bc:	0028      	movs	r0, r5
 80093be:	f000 f819 	bl	80093f4 <__swsetup_r>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d0c9      	beq.n	800935a <__swbuf_r+0x2e>
 80093c6:	2601      	movs	r6, #1
 80093c8:	4276      	negs	r6, r6
 80093ca:	e7ea      	b.n	80093a2 <__swbuf_r+0x76>
 80093cc:	0800f584 	.word	0x0800f584
 80093d0:	0800f5a4 	.word	0x0800f5a4
 80093d4:	0800f564 	.word	0x0800f564

080093d8 <__ascii_wctomb>:
 80093d8:	0003      	movs	r3, r0
 80093da:	1e08      	subs	r0, r1, #0
 80093dc:	d005      	beq.n	80093ea <__ascii_wctomb+0x12>
 80093de:	2aff      	cmp	r2, #255	; 0xff
 80093e0:	d904      	bls.n	80093ec <__ascii_wctomb+0x14>
 80093e2:	228a      	movs	r2, #138	; 0x8a
 80093e4:	2001      	movs	r0, #1
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	4240      	negs	r0, r0
 80093ea:	4770      	bx	lr
 80093ec:	2001      	movs	r0, #1
 80093ee:	700a      	strb	r2, [r1, #0]
 80093f0:	e7fb      	b.n	80093ea <__ascii_wctomb+0x12>
	...

080093f4 <__swsetup_r>:
 80093f4:	4b37      	ldr	r3, [pc, #220]	; (80094d4 <__swsetup_r+0xe0>)
 80093f6:	b570      	push	{r4, r5, r6, lr}
 80093f8:	681d      	ldr	r5, [r3, #0]
 80093fa:	0006      	movs	r6, r0
 80093fc:	000c      	movs	r4, r1
 80093fe:	2d00      	cmp	r5, #0
 8009400:	d005      	beq.n	800940e <__swsetup_r+0x1a>
 8009402:	69ab      	ldr	r3, [r5, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d102      	bne.n	800940e <__swsetup_r+0x1a>
 8009408:	0028      	movs	r0, r5
 800940a:	f000 f9a1 	bl	8009750 <__sinit>
 800940e:	4b32      	ldr	r3, [pc, #200]	; (80094d8 <__swsetup_r+0xe4>)
 8009410:	429c      	cmp	r4, r3
 8009412:	d10f      	bne.n	8009434 <__swsetup_r+0x40>
 8009414:	686c      	ldr	r4, [r5, #4]
 8009416:	230c      	movs	r3, #12
 8009418:	5ee2      	ldrsh	r2, [r4, r3]
 800941a:	b293      	uxth	r3, r2
 800941c:	0711      	lsls	r1, r2, #28
 800941e:	d42d      	bmi.n	800947c <__swsetup_r+0x88>
 8009420:	06d9      	lsls	r1, r3, #27
 8009422:	d411      	bmi.n	8009448 <__swsetup_r+0x54>
 8009424:	2309      	movs	r3, #9
 8009426:	2001      	movs	r0, #1
 8009428:	6033      	str	r3, [r6, #0]
 800942a:	3337      	adds	r3, #55	; 0x37
 800942c:	4313      	orrs	r3, r2
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	4240      	negs	r0, r0
 8009432:	bd70      	pop	{r4, r5, r6, pc}
 8009434:	4b29      	ldr	r3, [pc, #164]	; (80094dc <__swsetup_r+0xe8>)
 8009436:	429c      	cmp	r4, r3
 8009438:	d101      	bne.n	800943e <__swsetup_r+0x4a>
 800943a:	68ac      	ldr	r4, [r5, #8]
 800943c:	e7eb      	b.n	8009416 <__swsetup_r+0x22>
 800943e:	4b28      	ldr	r3, [pc, #160]	; (80094e0 <__swsetup_r+0xec>)
 8009440:	429c      	cmp	r4, r3
 8009442:	d1e8      	bne.n	8009416 <__swsetup_r+0x22>
 8009444:	68ec      	ldr	r4, [r5, #12]
 8009446:	e7e6      	b.n	8009416 <__swsetup_r+0x22>
 8009448:	075b      	lsls	r3, r3, #29
 800944a:	d513      	bpl.n	8009474 <__swsetup_r+0x80>
 800944c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800944e:	2900      	cmp	r1, #0
 8009450:	d008      	beq.n	8009464 <__swsetup_r+0x70>
 8009452:	0023      	movs	r3, r4
 8009454:	3344      	adds	r3, #68	; 0x44
 8009456:	4299      	cmp	r1, r3
 8009458:	d002      	beq.n	8009460 <__swsetup_r+0x6c>
 800945a:	0030      	movs	r0, r6
 800945c:	f7ff fb1c 	bl	8008a98 <_free_r>
 8009460:	2300      	movs	r3, #0
 8009462:	6363      	str	r3, [r4, #52]	; 0x34
 8009464:	2224      	movs	r2, #36	; 0x24
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	4393      	bics	r3, r2
 800946a:	81a3      	strh	r3, [r4, #12]
 800946c:	2300      	movs	r3, #0
 800946e:	6063      	str	r3, [r4, #4]
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	6023      	str	r3, [r4, #0]
 8009474:	2308      	movs	r3, #8
 8009476:	89a2      	ldrh	r2, [r4, #12]
 8009478:	4313      	orrs	r3, r2
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	6923      	ldr	r3, [r4, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10b      	bne.n	800949a <__swsetup_r+0xa6>
 8009482:	21a0      	movs	r1, #160	; 0xa0
 8009484:	2280      	movs	r2, #128	; 0x80
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	0089      	lsls	r1, r1, #2
 800948a:	0092      	lsls	r2, r2, #2
 800948c:	400b      	ands	r3, r1
 800948e:	4293      	cmp	r3, r2
 8009490:	d003      	beq.n	800949a <__swsetup_r+0xa6>
 8009492:	0021      	movs	r1, r4
 8009494:	0030      	movs	r0, r6
 8009496:	f000 fa27 	bl	80098e8 <__smakebuf_r>
 800949a:	220c      	movs	r2, #12
 800949c:	5ea3      	ldrsh	r3, [r4, r2]
 800949e:	2001      	movs	r0, #1
 80094a0:	001a      	movs	r2, r3
 80094a2:	b299      	uxth	r1, r3
 80094a4:	4002      	ands	r2, r0
 80094a6:	4203      	tst	r3, r0
 80094a8:	d00f      	beq.n	80094ca <__swsetup_r+0xd6>
 80094aa:	2200      	movs	r2, #0
 80094ac:	60a2      	str	r2, [r4, #8]
 80094ae:	6962      	ldr	r2, [r4, #20]
 80094b0:	4252      	negs	r2, r2
 80094b2:	61a2      	str	r2, [r4, #24]
 80094b4:	2000      	movs	r0, #0
 80094b6:	6922      	ldr	r2, [r4, #16]
 80094b8:	4282      	cmp	r2, r0
 80094ba:	d1ba      	bne.n	8009432 <__swsetup_r+0x3e>
 80094bc:	060a      	lsls	r2, r1, #24
 80094be:	d5b8      	bpl.n	8009432 <__swsetup_r+0x3e>
 80094c0:	2240      	movs	r2, #64	; 0x40
 80094c2:	4313      	orrs	r3, r2
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	3801      	subs	r0, #1
 80094c8:	e7b3      	b.n	8009432 <__swsetup_r+0x3e>
 80094ca:	0788      	lsls	r0, r1, #30
 80094cc:	d400      	bmi.n	80094d0 <__swsetup_r+0xdc>
 80094ce:	6962      	ldr	r2, [r4, #20]
 80094d0:	60a2      	str	r2, [r4, #8]
 80094d2:	e7ef      	b.n	80094b4 <__swsetup_r+0xc0>
 80094d4:	200000a8 	.word	0x200000a8
 80094d8:	0800f584 	.word	0x0800f584
 80094dc:	0800f5a4 	.word	0x0800f5a4
 80094e0:	0800f564 	.word	0x0800f564

080094e4 <abort>:
 80094e4:	2006      	movs	r0, #6
 80094e6:	b510      	push	{r4, lr}
 80094e8:	f000 fa74 	bl	80099d4 <raise>
 80094ec:	2001      	movs	r0, #1
 80094ee:	f7fb fc51 	bl	8004d94 <_exit>
	...

080094f4 <__sflush_r>:
 80094f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094f6:	898b      	ldrh	r3, [r1, #12]
 80094f8:	0005      	movs	r5, r0
 80094fa:	000c      	movs	r4, r1
 80094fc:	071a      	lsls	r2, r3, #28
 80094fe:	d45f      	bmi.n	80095c0 <__sflush_r+0xcc>
 8009500:	684a      	ldr	r2, [r1, #4]
 8009502:	2a00      	cmp	r2, #0
 8009504:	dc04      	bgt.n	8009510 <__sflush_r+0x1c>
 8009506:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009508:	2a00      	cmp	r2, #0
 800950a:	dc01      	bgt.n	8009510 <__sflush_r+0x1c>
 800950c:	2000      	movs	r0, #0
 800950e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009510:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009512:	2f00      	cmp	r7, #0
 8009514:	d0fa      	beq.n	800950c <__sflush_r+0x18>
 8009516:	2200      	movs	r2, #0
 8009518:	2180      	movs	r1, #128	; 0x80
 800951a:	682e      	ldr	r6, [r5, #0]
 800951c:	602a      	str	r2, [r5, #0]
 800951e:	001a      	movs	r2, r3
 8009520:	0149      	lsls	r1, r1, #5
 8009522:	400a      	ands	r2, r1
 8009524:	420b      	tst	r3, r1
 8009526:	d034      	beq.n	8009592 <__sflush_r+0x9e>
 8009528:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	075b      	lsls	r3, r3, #29
 800952e:	d506      	bpl.n	800953e <__sflush_r+0x4a>
 8009530:	6863      	ldr	r3, [r4, #4]
 8009532:	1ac0      	subs	r0, r0, r3
 8009534:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009536:	2b00      	cmp	r3, #0
 8009538:	d001      	beq.n	800953e <__sflush_r+0x4a>
 800953a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800953c:	1ac0      	subs	r0, r0, r3
 800953e:	0002      	movs	r2, r0
 8009540:	6a21      	ldr	r1, [r4, #32]
 8009542:	2300      	movs	r3, #0
 8009544:	0028      	movs	r0, r5
 8009546:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009548:	47b8      	blx	r7
 800954a:	89a1      	ldrh	r1, [r4, #12]
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d106      	bne.n	800955e <__sflush_r+0x6a>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	2b1d      	cmp	r3, #29
 8009554:	d831      	bhi.n	80095ba <__sflush_r+0xc6>
 8009556:	4a2c      	ldr	r2, [pc, #176]	; (8009608 <__sflush_r+0x114>)
 8009558:	40da      	lsrs	r2, r3
 800955a:	07d3      	lsls	r3, r2, #31
 800955c:	d52d      	bpl.n	80095ba <__sflush_r+0xc6>
 800955e:	2300      	movs	r3, #0
 8009560:	6063      	str	r3, [r4, #4]
 8009562:	6923      	ldr	r3, [r4, #16]
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	04cb      	lsls	r3, r1, #19
 8009568:	d505      	bpl.n	8009576 <__sflush_r+0x82>
 800956a:	1c43      	adds	r3, r0, #1
 800956c:	d102      	bne.n	8009574 <__sflush_r+0x80>
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d100      	bne.n	8009576 <__sflush_r+0x82>
 8009574:	6560      	str	r0, [r4, #84]	; 0x54
 8009576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009578:	602e      	str	r6, [r5, #0]
 800957a:	2900      	cmp	r1, #0
 800957c:	d0c6      	beq.n	800950c <__sflush_r+0x18>
 800957e:	0023      	movs	r3, r4
 8009580:	3344      	adds	r3, #68	; 0x44
 8009582:	4299      	cmp	r1, r3
 8009584:	d002      	beq.n	800958c <__sflush_r+0x98>
 8009586:	0028      	movs	r0, r5
 8009588:	f7ff fa86 	bl	8008a98 <_free_r>
 800958c:	2000      	movs	r0, #0
 800958e:	6360      	str	r0, [r4, #52]	; 0x34
 8009590:	e7bd      	b.n	800950e <__sflush_r+0x1a>
 8009592:	2301      	movs	r3, #1
 8009594:	0028      	movs	r0, r5
 8009596:	6a21      	ldr	r1, [r4, #32]
 8009598:	47b8      	blx	r7
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	d1c5      	bne.n	800952a <__sflush_r+0x36>
 800959e:	682b      	ldr	r3, [r5, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d0c2      	beq.n	800952a <__sflush_r+0x36>
 80095a4:	2b1d      	cmp	r3, #29
 80095a6:	d001      	beq.n	80095ac <__sflush_r+0xb8>
 80095a8:	2b16      	cmp	r3, #22
 80095aa:	d101      	bne.n	80095b0 <__sflush_r+0xbc>
 80095ac:	602e      	str	r6, [r5, #0]
 80095ae:	e7ad      	b.n	800950c <__sflush_r+0x18>
 80095b0:	2340      	movs	r3, #64	; 0x40
 80095b2:	89a2      	ldrh	r2, [r4, #12]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	e7a9      	b.n	800950e <__sflush_r+0x1a>
 80095ba:	2340      	movs	r3, #64	; 0x40
 80095bc:	430b      	orrs	r3, r1
 80095be:	e7fa      	b.n	80095b6 <__sflush_r+0xc2>
 80095c0:	690f      	ldr	r7, [r1, #16]
 80095c2:	2f00      	cmp	r7, #0
 80095c4:	d0a2      	beq.n	800950c <__sflush_r+0x18>
 80095c6:	680a      	ldr	r2, [r1, #0]
 80095c8:	600f      	str	r7, [r1, #0]
 80095ca:	1bd2      	subs	r2, r2, r7
 80095cc:	9201      	str	r2, [sp, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	079b      	lsls	r3, r3, #30
 80095d2:	d100      	bne.n	80095d6 <__sflush_r+0xe2>
 80095d4:	694a      	ldr	r2, [r1, #20]
 80095d6:	60a2      	str	r2, [r4, #8]
 80095d8:	9b01      	ldr	r3, [sp, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	dc00      	bgt.n	80095e0 <__sflush_r+0xec>
 80095de:	e795      	b.n	800950c <__sflush_r+0x18>
 80095e0:	003a      	movs	r2, r7
 80095e2:	0028      	movs	r0, r5
 80095e4:	9b01      	ldr	r3, [sp, #4]
 80095e6:	6a21      	ldr	r1, [r4, #32]
 80095e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095ea:	47b0      	blx	r6
 80095ec:	2800      	cmp	r0, #0
 80095ee:	dc06      	bgt.n	80095fe <__sflush_r+0x10a>
 80095f0:	2340      	movs	r3, #64	; 0x40
 80095f2:	2001      	movs	r0, #1
 80095f4:	89a2      	ldrh	r2, [r4, #12]
 80095f6:	4240      	negs	r0, r0
 80095f8:	4313      	orrs	r3, r2
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	e787      	b.n	800950e <__sflush_r+0x1a>
 80095fe:	9b01      	ldr	r3, [sp, #4]
 8009600:	183f      	adds	r7, r7, r0
 8009602:	1a1b      	subs	r3, r3, r0
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	e7e7      	b.n	80095d8 <__sflush_r+0xe4>
 8009608:	20400001 	.word	0x20400001

0800960c <_fflush_r>:
 800960c:	690b      	ldr	r3, [r1, #16]
 800960e:	b570      	push	{r4, r5, r6, lr}
 8009610:	0005      	movs	r5, r0
 8009612:	000c      	movs	r4, r1
 8009614:	2b00      	cmp	r3, #0
 8009616:	d102      	bne.n	800961e <_fflush_r+0x12>
 8009618:	2500      	movs	r5, #0
 800961a:	0028      	movs	r0, r5
 800961c:	bd70      	pop	{r4, r5, r6, pc}
 800961e:	2800      	cmp	r0, #0
 8009620:	d004      	beq.n	800962c <_fflush_r+0x20>
 8009622:	6983      	ldr	r3, [r0, #24]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <_fflush_r+0x20>
 8009628:	f000 f892 	bl	8009750 <__sinit>
 800962c:	4b14      	ldr	r3, [pc, #80]	; (8009680 <_fflush_r+0x74>)
 800962e:	429c      	cmp	r4, r3
 8009630:	d11b      	bne.n	800966a <_fflush_r+0x5e>
 8009632:	686c      	ldr	r4, [r5, #4]
 8009634:	220c      	movs	r2, #12
 8009636:	5ea3      	ldrsh	r3, [r4, r2]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d0ed      	beq.n	8009618 <_fflush_r+0xc>
 800963c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800963e:	07d2      	lsls	r2, r2, #31
 8009640:	d404      	bmi.n	800964c <_fflush_r+0x40>
 8009642:	059b      	lsls	r3, r3, #22
 8009644:	d402      	bmi.n	800964c <_fflush_r+0x40>
 8009646:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009648:	f000 f923 	bl	8009892 <__retarget_lock_acquire_recursive>
 800964c:	0028      	movs	r0, r5
 800964e:	0021      	movs	r1, r4
 8009650:	f7ff ff50 	bl	80094f4 <__sflush_r>
 8009654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009656:	0005      	movs	r5, r0
 8009658:	07db      	lsls	r3, r3, #31
 800965a:	d4de      	bmi.n	800961a <_fflush_r+0xe>
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	059b      	lsls	r3, r3, #22
 8009660:	d4db      	bmi.n	800961a <_fflush_r+0xe>
 8009662:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009664:	f000 f916 	bl	8009894 <__retarget_lock_release_recursive>
 8009668:	e7d7      	b.n	800961a <_fflush_r+0xe>
 800966a:	4b06      	ldr	r3, [pc, #24]	; (8009684 <_fflush_r+0x78>)
 800966c:	429c      	cmp	r4, r3
 800966e:	d101      	bne.n	8009674 <_fflush_r+0x68>
 8009670:	68ac      	ldr	r4, [r5, #8]
 8009672:	e7df      	b.n	8009634 <_fflush_r+0x28>
 8009674:	4b04      	ldr	r3, [pc, #16]	; (8009688 <_fflush_r+0x7c>)
 8009676:	429c      	cmp	r4, r3
 8009678:	d1dc      	bne.n	8009634 <_fflush_r+0x28>
 800967a:	68ec      	ldr	r4, [r5, #12]
 800967c:	e7da      	b.n	8009634 <_fflush_r+0x28>
 800967e:	46c0      	nop			; (mov r8, r8)
 8009680:	0800f584 	.word	0x0800f584
 8009684:	0800f5a4 	.word	0x0800f5a4
 8009688:	0800f564 	.word	0x0800f564

0800968c <std>:
 800968c:	2300      	movs	r3, #0
 800968e:	b510      	push	{r4, lr}
 8009690:	0004      	movs	r4, r0
 8009692:	6003      	str	r3, [r0, #0]
 8009694:	6043      	str	r3, [r0, #4]
 8009696:	6083      	str	r3, [r0, #8]
 8009698:	8181      	strh	r1, [r0, #12]
 800969a:	6643      	str	r3, [r0, #100]	; 0x64
 800969c:	0019      	movs	r1, r3
 800969e:	81c2      	strh	r2, [r0, #14]
 80096a0:	6103      	str	r3, [r0, #16]
 80096a2:	6143      	str	r3, [r0, #20]
 80096a4:	6183      	str	r3, [r0, #24]
 80096a6:	2208      	movs	r2, #8
 80096a8:	305c      	adds	r0, #92	; 0x5c
 80096aa:	f7fd fad6 	bl	8006c5a <memset>
 80096ae:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <std+0x38>)
 80096b0:	6224      	str	r4, [r4, #32]
 80096b2:	6263      	str	r3, [r4, #36]	; 0x24
 80096b4:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <std+0x3c>)
 80096b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80096b8:	4b04      	ldr	r3, [pc, #16]	; (80096cc <std+0x40>)
 80096ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096bc:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <std+0x44>)
 80096be:	6323      	str	r3, [r4, #48]	; 0x30
 80096c0:	bd10      	pop	{r4, pc}
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	08009a15 	.word	0x08009a15
 80096c8:	08009a3d 	.word	0x08009a3d
 80096cc:	08009a75 	.word	0x08009a75
 80096d0:	08009aa1 	.word	0x08009aa1

080096d4 <_cleanup_r>:
 80096d4:	b510      	push	{r4, lr}
 80096d6:	4902      	ldr	r1, [pc, #8]	; (80096e0 <_cleanup_r+0xc>)
 80096d8:	f000 f8ba 	bl	8009850 <_fwalk_reent>
 80096dc:	bd10      	pop	{r4, pc}
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	0800960d 	.word	0x0800960d

080096e4 <__sfmoreglue>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	2568      	movs	r5, #104	; 0x68
 80096e8:	1e4a      	subs	r2, r1, #1
 80096ea:	4355      	muls	r5, r2
 80096ec:	000e      	movs	r6, r1
 80096ee:	0029      	movs	r1, r5
 80096f0:	3174      	adds	r1, #116	; 0x74
 80096f2:	f7ff fa3d 	bl	8008b70 <_malloc_r>
 80096f6:	1e04      	subs	r4, r0, #0
 80096f8:	d008      	beq.n	800970c <__sfmoreglue+0x28>
 80096fa:	2100      	movs	r1, #0
 80096fc:	002a      	movs	r2, r5
 80096fe:	6001      	str	r1, [r0, #0]
 8009700:	6046      	str	r6, [r0, #4]
 8009702:	300c      	adds	r0, #12
 8009704:	60a0      	str	r0, [r4, #8]
 8009706:	3268      	adds	r2, #104	; 0x68
 8009708:	f7fd faa7 	bl	8006c5a <memset>
 800970c:	0020      	movs	r0, r4
 800970e:	bd70      	pop	{r4, r5, r6, pc}

08009710 <__sfp_lock_acquire>:
 8009710:	b510      	push	{r4, lr}
 8009712:	4802      	ldr	r0, [pc, #8]	; (800971c <__sfp_lock_acquire+0xc>)
 8009714:	f000 f8bd 	bl	8009892 <__retarget_lock_acquire_recursive>
 8009718:	bd10      	pop	{r4, pc}
 800971a:	46c0      	nop			; (mov r8, r8)
 800971c:	20000d2d 	.word	0x20000d2d

08009720 <__sfp_lock_release>:
 8009720:	b510      	push	{r4, lr}
 8009722:	4802      	ldr	r0, [pc, #8]	; (800972c <__sfp_lock_release+0xc>)
 8009724:	f000 f8b6 	bl	8009894 <__retarget_lock_release_recursive>
 8009728:	bd10      	pop	{r4, pc}
 800972a:	46c0      	nop			; (mov r8, r8)
 800972c:	20000d2d 	.word	0x20000d2d

08009730 <__sinit_lock_acquire>:
 8009730:	b510      	push	{r4, lr}
 8009732:	4802      	ldr	r0, [pc, #8]	; (800973c <__sinit_lock_acquire+0xc>)
 8009734:	f000 f8ad 	bl	8009892 <__retarget_lock_acquire_recursive>
 8009738:	bd10      	pop	{r4, pc}
 800973a:	46c0      	nop			; (mov r8, r8)
 800973c:	20000d2e 	.word	0x20000d2e

08009740 <__sinit_lock_release>:
 8009740:	b510      	push	{r4, lr}
 8009742:	4802      	ldr	r0, [pc, #8]	; (800974c <__sinit_lock_release+0xc>)
 8009744:	f000 f8a6 	bl	8009894 <__retarget_lock_release_recursive>
 8009748:	bd10      	pop	{r4, pc}
 800974a:	46c0      	nop			; (mov r8, r8)
 800974c:	20000d2e 	.word	0x20000d2e

08009750 <__sinit>:
 8009750:	b513      	push	{r0, r1, r4, lr}
 8009752:	0004      	movs	r4, r0
 8009754:	f7ff ffec 	bl	8009730 <__sinit_lock_acquire>
 8009758:	69a3      	ldr	r3, [r4, #24]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <__sinit+0x14>
 800975e:	f7ff ffef 	bl	8009740 <__sinit_lock_release>
 8009762:	bd13      	pop	{r0, r1, r4, pc}
 8009764:	64a3      	str	r3, [r4, #72]	; 0x48
 8009766:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009768:	6523      	str	r3, [r4, #80]	; 0x50
 800976a:	4b13      	ldr	r3, [pc, #76]	; (80097b8 <__sinit+0x68>)
 800976c:	4a13      	ldr	r2, [pc, #76]	; (80097bc <__sinit+0x6c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	62a2      	str	r2, [r4, #40]	; 0x28
 8009772:	9301      	str	r3, [sp, #4]
 8009774:	42a3      	cmp	r3, r4
 8009776:	d101      	bne.n	800977c <__sinit+0x2c>
 8009778:	2301      	movs	r3, #1
 800977a:	61a3      	str	r3, [r4, #24]
 800977c:	0020      	movs	r0, r4
 800977e:	f000 f81f 	bl	80097c0 <__sfp>
 8009782:	6060      	str	r0, [r4, #4]
 8009784:	0020      	movs	r0, r4
 8009786:	f000 f81b 	bl	80097c0 <__sfp>
 800978a:	60a0      	str	r0, [r4, #8]
 800978c:	0020      	movs	r0, r4
 800978e:	f000 f817 	bl	80097c0 <__sfp>
 8009792:	2200      	movs	r2, #0
 8009794:	2104      	movs	r1, #4
 8009796:	60e0      	str	r0, [r4, #12]
 8009798:	6860      	ldr	r0, [r4, #4]
 800979a:	f7ff ff77 	bl	800968c <std>
 800979e:	2201      	movs	r2, #1
 80097a0:	2109      	movs	r1, #9
 80097a2:	68a0      	ldr	r0, [r4, #8]
 80097a4:	f7ff ff72 	bl	800968c <std>
 80097a8:	2202      	movs	r2, #2
 80097aa:	2112      	movs	r1, #18
 80097ac:	68e0      	ldr	r0, [r4, #12]
 80097ae:	f7ff ff6d 	bl	800968c <std>
 80097b2:	2301      	movs	r3, #1
 80097b4:	61a3      	str	r3, [r4, #24]
 80097b6:	e7d2      	b.n	800975e <__sinit+0xe>
 80097b8:	0800f1e8 	.word	0x0800f1e8
 80097bc:	080096d5 	.word	0x080096d5

080097c0 <__sfp>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	0007      	movs	r7, r0
 80097c4:	f7ff ffa4 	bl	8009710 <__sfp_lock_acquire>
 80097c8:	4b1f      	ldr	r3, [pc, #124]	; (8009848 <__sfp+0x88>)
 80097ca:	681e      	ldr	r6, [r3, #0]
 80097cc:	69b3      	ldr	r3, [r6, #24]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d102      	bne.n	80097d8 <__sfp+0x18>
 80097d2:	0030      	movs	r0, r6
 80097d4:	f7ff ffbc 	bl	8009750 <__sinit>
 80097d8:	3648      	adds	r6, #72	; 0x48
 80097da:	68b4      	ldr	r4, [r6, #8]
 80097dc:	6873      	ldr	r3, [r6, #4]
 80097de:	3b01      	subs	r3, #1
 80097e0:	d504      	bpl.n	80097ec <__sfp+0x2c>
 80097e2:	6833      	ldr	r3, [r6, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d022      	beq.n	800982e <__sfp+0x6e>
 80097e8:	6836      	ldr	r6, [r6, #0]
 80097ea:	e7f6      	b.n	80097da <__sfp+0x1a>
 80097ec:	220c      	movs	r2, #12
 80097ee:	5ea5      	ldrsh	r5, [r4, r2]
 80097f0:	2d00      	cmp	r5, #0
 80097f2:	d11a      	bne.n	800982a <__sfp+0x6a>
 80097f4:	0020      	movs	r0, r4
 80097f6:	4b15      	ldr	r3, [pc, #84]	; (800984c <__sfp+0x8c>)
 80097f8:	3058      	adds	r0, #88	; 0x58
 80097fa:	60e3      	str	r3, [r4, #12]
 80097fc:	6665      	str	r5, [r4, #100]	; 0x64
 80097fe:	f000 f847 	bl	8009890 <__retarget_lock_init_recursive>
 8009802:	f7ff ff8d 	bl	8009720 <__sfp_lock_release>
 8009806:	0020      	movs	r0, r4
 8009808:	2208      	movs	r2, #8
 800980a:	0029      	movs	r1, r5
 800980c:	6025      	str	r5, [r4, #0]
 800980e:	60a5      	str	r5, [r4, #8]
 8009810:	6065      	str	r5, [r4, #4]
 8009812:	6125      	str	r5, [r4, #16]
 8009814:	6165      	str	r5, [r4, #20]
 8009816:	61a5      	str	r5, [r4, #24]
 8009818:	305c      	adds	r0, #92	; 0x5c
 800981a:	f7fd fa1e 	bl	8006c5a <memset>
 800981e:	6365      	str	r5, [r4, #52]	; 0x34
 8009820:	63a5      	str	r5, [r4, #56]	; 0x38
 8009822:	64a5      	str	r5, [r4, #72]	; 0x48
 8009824:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009826:	0020      	movs	r0, r4
 8009828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800982a:	3468      	adds	r4, #104	; 0x68
 800982c:	e7d7      	b.n	80097de <__sfp+0x1e>
 800982e:	2104      	movs	r1, #4
 8009830:	0038      	movs	r0, r7
 8009832:	f7ff ff57 	bl	80096e4 <__sfmoreglue>
 8009836:	1e04      	subs	r4, r0, #0
 8009838:	6030      	str	r0, [r6, #0]
 800983a:	d1d5      	bne.n	80097e8 <__sfp+0x28>
 800983c:	f7ff ff70 	bl	8009720 <__sfp_lock_release>
 8009840:	230c      	movs	r3, #12
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	e7ef      	b.n	8009826 <__sfp+0x66>
 8009846:	46c0      	nop			; (mov r8, r8)
 8009848:	0800f1e8 	.word	0x0800f1e8
 800984c:	ffff0001 	.word	0xffff0001

08009850 <_fwalk_reent>:
 8009850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009852:	0004      	movs	r4, r0
 8009854:	0006      	movs	r6, r0
 8009856:	2700      	movs	r7, #0
 8009858:	9101      	str	r1, [sp, #4]
 800985a:	3448      	adds	r4, #72	; 0x48
 800985c:	6863      	ldr	r3, [r4, #4]
 800985e:	68a5      	ldr	r5, [r4, #8]
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	9b00      	ldr	r3, [sp, #0]
 8009864:	3b01      	subs	r3, #1
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	d504      	bpl.n	8009874 <_fwalk_reent+0x24>
 800986a:	6824      	ldr	r4, [r4, #0]
 800986c:	2c00      	cmp	r4, #0
 800986e:	d1f5      	bne.n	800985c <_fwalk_reent+0xc>
 8009870:	0038      	movs	r0, r7
 8009872:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009874:	89ab      	ldrh	r3, [r5, #12]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d908      	bls.n	800988c <_fwalk_reent+0x3c>
 800987a:	220e      	movs	r2, #14
 800987c:	5eab      	ldrsh	r3, [r5, r2]
 800987e:	3301      	adds	r3, #1
 8009880:	d004      	beq.n	800988c <_fwalk_reent+0x3c>
 8009882:	0029      	movs	r1, r5
 8009884:	0030      	movs	r0, r6
 8009886:	9b01      	ldr	r3, [sp, #4]
 8009888:	4798      	blx	r3
 800988a:	4307      	orrs	r7, r0
 800988c:	3568      	adds	r5, #104	; 0x68
 800988e:	e7e8      	b.n	8009862 <_fwalk_reent+0x12>

08009890 <__retarget_lock_init_recursive>:
 8009890:	4770      	bx	lr

08009892 <__retarget_lock_acquire_recursive>:
 8009892:	4770      	bx	lr

08009894 <__retarget_lock_release_recursive>:
 8009894:	4770      	bx	lr
	...

08009898 <__swhatbuf_r>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	000e      	movs	r6, r1
 800989c:	001d      	movs	r5, r3
 800989e:	230e      	movs	r3, #14
 80098a0:	5ec9      	ldrsh	r1, [r1, r3]
 80098a2:	0014      	movs	r4, r2
 80098a4:	b096      	sub	sp, #88	; 0x58
 80098a6:	2900      	cmp	r1, #0
 80098a8:	da08      	bge.n	80098bc <__swhatbuf_r+0x24>
 80098aa:	220c      	movs	r2, #12
 80098ac:	5eb3      	ldrsh	r3, [r6, r2]
 80098ae:	2200      	movs	r2, #0
 80098b0:	602a      	str	r2, [r5, #0]
 80098b2:	061b      	lsls	r3, r3, #24
 80098b4:	d411      	bmi.n	80098da <__swhatbuf_r+0x42>
 80098b6:	2380      	movs	r3, #128	; 0x80
 80098b8:	00db      	lsls	r3, r3, #3
 80098ba:	e00f      	b.n	80098dc <__swhatbuf_r+0x44>
 80098bc:	466a      	mov	r2, sp
 80098be:	f000 f91b 	bl	8009af8 <_fstat_r>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	dbf1      	blt.n	80098aa <__swhatbuf_r+0x12>
 80098c6:	23f0      	movs	r3, #240	; 0xf0
 80098c8:	9901      	ldr	r1, [sp, #4]
 80098ca:	021b      	lsls	r3, r3, #8
 80098cc:	4019      	ands	r1, r3
 80098ce:	4b05      	ldr	r3, [pc, #20]	; (80098e4 <__swhatbuf_r+0x4c>)
 80098d0:	18c9      	adds	r1, r1, r3
 80098d2:	424b      	negs	r3, r1
 80098d4:	4159      	adcs	r1, r3
 80098d6:	6029      	str	r1, [r5, #0]
 80098d8:	e7ed      	b.n	80098b6 <__swhatbuf_r+0x1e>
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	2000      	movs	r0, #0
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	b016      	add	sp, #88	; 0x58
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	ffffe000 	.word	0xffffe000

080098e8 <__smakebuf_r>:
 80098e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ea:	2602      	movs	r6, #2
 80098ec:	898b      	ldrh	r3, [r1, #12]
 80098ee:	0005      	movs	r5, r0
 80098f0:	000c      	movs	r4, r1
 80098f2:	4233      	tst	r3, r6
 80098f4:	d006      	beq.n	8009904 <__smakebuf_r+0x1c>
 80098f6:	0023      	movs	r3, r4
 80098f8:	3347      	adds	r3, #71	; 0x47
 80098fa:	6023      	str	r3, [r4, #0]
 80098fc:	6123      	str	r3, [r4, #16]
 80098fe:	2301      	movs	r3, #1
 8009900:	6163      	str	r3, [r4, #20]
 8009902:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009904:	466a      	mov	r2, sp
 8009906:	ab01      	add	r3, sp, #4
 8009908:	f7ff ffc6 	bl	8009898 <__swhatbuf_r>
 800990c:	9900      	ldr	r1, [sp, #0]
 800990e:	0007      	movs	r7, r0
 8009910:	0028      	movs	r0, r5
 8009912:	f7ff f92d 	bl	8008b70 <_malloc_r>
 8009916:	2800      	cmp	r0, #0
 8009918:	d108      	bne.n	800992c <__smakebuf_r+0x44>
 800991a:	220c      	movs	r2, #12
 800991c:	5ea3      	ldrsh	r3, [r4, r2]
 800991e:	059a      	lsls	r2, r3, #22
 8009920:	d4ef      	bmi.n	8009902 <__smakebuf_r+0x1a>
 8009922:	2203      	movs	r2, #3
 8009924:	4393      	bics	r3, r2
 8009926:	431e      	orrs	r6, r3
 8009928:	81a6      	strh	r6, [r4, #12]
 800992a:	e7e4      	b.n	80098f6 <__smakebuf_r+0xe>
 800992c:	4b0f      	ldr	r3, [pc, #60]	; (800996c <__smakebuf_r+0x84>)
 800992e:	62ab      	str	r3, [r5, #40]	; 0x28
 8009930:	2380      	movs	r3, #128	; 0x80
 8009932:	89a2      	ldrh	r2, [r4, #12]
 8009934:	6020      	str	r0, [r4, #0]
 8009936:	4313      	orrs	r3, r2
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	9b00      	ldr	r3, [sp, #0]
 800993c:	6120      	str	r0, [r4, #16]
 800993e:	6163      	str	r3, [r4, #20]
 8009940:	9b01      	ldr	r3, [sp, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00d      	beq.n	8009962 <__smakebuf_r+0x7a>
 8009946:	0028      	movs	r0, r5
 8009948:	230e      	movs	r3, #14
 800994a:	5ee1      	ldrsh	r1, [r4, r3]
 800994c:	f000 f8e6 	bl	8009b1c <_isatty_r>
 8009950:	2800      	cmp	r0, #0
 8009952:	d006      	beq.n	8009962 <__smakebuf_r+0x7a>
 8009954:	2203      	movs	r2, #3
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	4393      	bics	r3, r2
 800995a:	001a      	movs	r2, r3
 800995c:	2301      	movs	r3, #1
 800995e:	4313      	orrs	r3, r2
 8009960:	81a3      	strh	r3, [r4, #12]
 8009962:	89a0      	ldrh	r0, [r4, #12]
 8009964:	4307      	orrs	r7, r0
 8009966:	81a7      	strh	r7, [r4, #12]
 8009968:	e7cb      	b.n	8009902 <__smakebuf_r+0x1a>
 800996a:	46c0      	nop			; (mov r8, r8)
 800996c:	080096d5 	.word	0x080096d5

08009970 <_malloc_usable_size_r>:
 8009970:	1f0b      	subs	r3, r1, #4
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	1f18      	subs	r0, r3, #4
 8009976:	2b00      	cmp	r3, #0
 8009978:	da01      	bge.n	800997e <_malloc_usable_size_r+0xe>
 800997a:	580b      	ldr	r3, [r1, r0]
 800997c:	18c0      	adds	r0, r0, r3
 800997e:	4770      	bx	lr

08009980 <_raise_r>:
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	0004      	movs	r4, r0
 8009984:	000d      	movs	r5, r1
 8009986:	291f      	cmp	r1, #31
 8009988:	d904      	bls.n	8009994 <_raise_r+0x14>
 800998a:	2316      	movs	r3, #22
 800998c:	6003      	str	r3, [r0, #0]
 800998e:	2001      	movs	r0, #1
 8009990:	4240      	negs	r0, r0
 8009992:	bd70      	pop	{r4, r5, r6, pc}
 8009994:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009996:	2b00      	cmp	r3, #0
 8009998:	d004      	beq.n	80099a4 <_raise_r+0x24>
 800999a:	008a      	lsls	r2, r1, #2
 800999c:	189b      	adds	r3, r3, r2
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	d108      	bne.n	80099b6 <_raise_r+0x36>
 80099a4:	0020      	movs	r0, r4
 80099a6:	f000 f831 	bl	8009a0c <_getpid_r>
 80099aa:	002a      	movs	r2, r5
 80099ac:	0001      	movs	r1, r0
 80099ae:	0020      	movs	r0, r4
 80099b0:	f000 f81a 	bl	80099e8 <_kill_r>
 80099b4:	e7ed      	b.n	8009992 <_raise_r+0x12>
 80099b6:	2000      	movs	r0, #0
 80099b8:	2a01      	cmp	r2, #1
 80099ba:	d0ea      	beq.n	8009992 <_raise_r+0x12>
 80099bc:	1c51      	adds	r1, r2, #1
 80099be:	d103      	bne.n	80099c8 <_raise_r+0x48>
 80099c0:	2316      	movs	r3, #22
 80099c2:	3001      	adds	r0, #1
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	e7e4      	b.n	8009992 <_raise_r+0x12>
 80099c8:	2400      	movs	r4, #0
 80099ca:	0028      	movs	r0, r5
 80099cc:	601c      	str	r4, [r3, #0]
 80099ce:	4790      	blx	r2
 80099d0:	0020      	movs	r0, r4
 80099d2:	e7de      	b.n	8009992 <_raise_r+0x12>

080099d4 <raise>:
 80099d4:	b510      	push	{r4, lr}
 80099d6:	4b03      	ldr	r3, [pc, #12]	; (80099e4 <raise+0x10>)
 80099d8:	0001      	movs	r1, r0
 80099da:	6818      	ldr	r0, [r3, #0]
 80099dc:	f7ff ffd0 	bl	8009980 <_raise_r>
 80099e0:	bd10      	pop	{r4, pc}
 80099e2:	46c0      	nop			; (mov r8, r8)
 80099e4:	200000a8 	.word	0x200000a8

080099e8 <_kill_r>:
 80099e8:	2300      	movs	r3, #0
 80099ea:	b570      	push	{r4, r5, r6, lr}
 80099ec:	4d06      	ldr	r5, [pc, #24]	; (8009a08 <_kill_r+0x20>)
 80099ee:	0004      	movs	r4, r0
 80099f0:	0008      	movs	r0, r1
 80099f2:	0011      	movs	r1, r2
 80099f4:	602b      	str	r3, [r5, #0]
 80099f6:	f7fb f9c5 	bl	8004d84 <_kill>
 80099fa:	1c43      	adds	r3, r0, #1
 80099fc:	d103      	bne.n	8009a06 <_kill_r+0x1e>
 80099fe:	682b      	ldr	r3, [r5, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d000      	beq.n	8009a06 <_kill_r+0x1e>
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	bd70      	pop	{r4, r5, r6, pc}
 8009a08:	20000d28 	.word	0x20000d28

08009a0c <_getpid_r>:
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	f7fb f9b7 	bl	8004d80 <_getpid>
 8009a12:	bd10      	pop	{r4, pc}

08009a14 <__sread>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	000c      	movs	r4, r1
 8009a18:	250e      	movs	r5, #14
 8009a1a:	5f49      	ldrsh	r1, [r1, r5]
 8009a1c:	f000 f8a4 	bl	8009b68 <_read_r>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	db03      	blt.n	8009a2c <__sread+0x18>
 8009a24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009a26:	181b      	adds	r3, r3, r0
 8009a28:	6563      	str	r3, [r4, #84]	; 0x54
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	4a02      	ldr	r2, [pc, #8]	; (8009a38 <__sread+0x24>)
 8009a30:	4013      	ands	r3, r2
 8009a32:	81a3      	strh	r3, [r4, #12]
 8009a34:	e7f9      	b.n	8009a2a <__sread+0x16>
 8009a36:	46c0      	nop			; (mov r8, r8)
 8009a38:	ffffefff 	.word	0xffffefff

08009a3c <__swrite>:
 8009a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3e:	001f      	movs	r7, r3
 8009a40:	898b      	ldrh	r3, [r1, #12]
 8009a42:	0005      	movs	r5, r0
 8009a44:	000c      	movs	r4, r1
 8009a46:	0016      	movs	r6, r2
 8009a48:	05db      	lsls	r3, r3, #23
 8009a4a:	d505      	bpl.n	8009a58 <__swrite+0x1c>
 8009a4c:	230e      	movs	r3, #14
 8009a4e:	5ec9      	ldrsh	r1, [r1, r3]
 8009a50:	2200      	movs	r2, #0
 8009a52:	2302      	movs	r3, #2
 8009a54:	f000 f874 	bl	8009b40 <_lseek_r>
 8009a58:	89a3      	ldrh	r3, [r4, #12]
 8009a5a:	4a05      	ldr	r2, [pc, #20]	; (8009a70 <__swrite+0x34>)
 8009a5c:	0028      	movs	r0, r5
 8009a5e:	4013      	ands	r3, r2
 8009a60:	81a3      	strh	r3, [r4, #12]
 8009a62:	0032      	movs	r2, r6
 8009a64:	230e      	movs	r3, #14
 8009a66:	5ee1      	ldrsh	r1, [r4, r3]
 8009a68:	003b      	movs	r3, r7
 8009a6a:	f000 f81f 	bl	8009aac <_write_r>
 8009a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a70:	ffffefff 	.word	0xffffefff

08009a74 <__sseek>:
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	000c      	movs	r4, r1
 8009a78:	250e      	movs	r5, #14
 8009a7a:	5f49      	ldrsh	r1, [r1, r5]
 8009a7c:	f000 f860 	bl	8009b40 <_lseek_r>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	1c42      	adds	r2, r0, #1
 8009a84:	d103      	bne.n	8009a8e <__sseek+0x1a>
 8009a86:	4a05      	ldr	r2, [pc, #20]	; (8009a9c <__sseek+0x28>)
 8009a88:	4013      	ands	r3, r2
 8009a8a:	81a3      	strh	r3, [r4, #12]
 8009a8c:	bd70      	pop	{r4, r5, r6, pc}
 8009a8e:	2280      	movs	r2, #128	; 0x80
 8009a90:	0152      	lsls	r2, r2, #5
 8009a92:	4313      	orrs	r3, r2
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	6560      	str	r0, [r4, #84]	; 0x54
 8009a98:	e7f8      	b.n	8009a8c <__sseek+0x18>
 8009a9a:	46c0      	nop			; (mov r8, r8)
 8009a9c:	ffffefff 	.word	0xffffefff

08009aa0 <__sclose>:
 8009aa0:	b510      	push	{r4, lr}
 8009aa2:	230e      	movs	r3, #14
 8009aa4:	5ec9      	ldrsh	r1, [r1, r3]
 8009aa6:	f000 f815 	bl	8009ad4 <_close_r>
 8009aaa:	bd10      	pop	{r4, pc}

08009aac <_write_r>:
 8009aac:	b570      	push	{r4, r5, r6, lr}
 8009aae:	0004      	movs	r4, r0
 8009ab0:	0008      	movs	r0, r1
 8009ab2:	0011      	movs	r1, r2
 8009ab4:	001a      	movs	r2, r3
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	4d05      	ldr	r5, [pc, #20]	; (8009ad0 <_write_r+0x24>)
 8009aba:	602b      	str	r3, [r5, #0]
 8009abc:	f7fb f97d 	bl	8004dba <_write>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d103      	bne.n	8009acc <_write_r+0x20>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d000      	beq.n	8009acc <_write_r+0x20>
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	bd70      	pop	{r4, r5, r6, pc}
 8009ace:	46c0      	nop			; (mov r8, r8)
 8009ad0:	20000d28 	.word	0x20000d28

08009ad4 <_close_r>:
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	b570      	push	{r4, r5, r6, lr}
 8009ad8:	4d06      	ldr	r5, [pc, #24]	; (8009af4 <_close_r+0x20>)
 8009ada:	0004      	movs	r4, r0
 8009adc:	0008      	movs	r0, r1
 8009ade:	602b      	str	r3, [r5, #0]
 8009ae0:	f7fb f978 	bl	8004dd4 <_close>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d103      	bne.n	8009af0 <_close_r+0x1c>
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d000      	beq.n	8009af0 <_close_r+0x1c>
 8009aee:	6023      	str	r3, [r4, #0]
 8009af0:	bd70      	pop	{r4, r5, r6, pc}
 8009af2:	46c0      	nop			; (mov r8, r8)
 8009af4:	20000d28 	.word	0x20000d28

08009af8 <_fstat_r>:
 8009af8:	2300      	movs	r3, #0
 8009afa:	b570      	push	{r4, r5, r6, lr}
 8009afc:	4d06      	ldr	r5, [pc, #24]	; (8009b18 <_fstat_r+0x20>)
 8009afe:	0004      	movs	r4, r0
 8009b00:	0008      	movs	r0, r1
 8009b02:	0011      	movs	r1, r2
 8009b04:	602b      	str	r3, [r5, #0]
 8009b06:	f7fb f968 	bl	8004dda <_fstat>
 8009b0a:	1c43      	adds	r3, r0, #1
 8009b0c:	d103      	bne.n	8009b16 <_fstat_r+0x1e>
 8009b0e:	682b      	ldr	r3, [r5, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d000      	beq.n	8009b16 <_fstat_r+0x1e>
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	bd70      	pop	{r4, r5, r6, pc}
 8009b18:	20000d28 	.word	0x20000d28

08009b1c <_isatty_r>:
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	b570      	push	{r4, r5, r6, lr}
 8009b20:	4d06      	ldr	r5, [pc, #24]	; (8009b3c <_isatty_r+0x20>)
 8009b22:	0004      	movs	r4, r0
 8009b24:	0008      	movs	r0, r1
 8009b26:	602b      	str	r3, [r5, #0]
 8009b28:	f7fb f95c 	bl	8004de4 <_isatty>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d103      	bne.n	8009b38 <_isatty_r+0x1c>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d000      	beq.n	8009b38 <_isatty_r+0x1c>
 8009b36:	6023      	str	r3, [r4, #0]
 8009b38:	bd70      	pop	{r4, r5, r6, pc}
 8009b3a:	46c0      	nop			; (mov r8, r8)
 8009b3c:	20000d28 	.word	0x20000d28

08009b40 <_lseek_r>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	0004      	movs	r4, r0
 8009b44:	0008      	movs	r0, r1
 8009b46:	0011      	movs	r1, r2
 8009b48:	001a      	movs	r2, r3
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	4d05      	ldr	r5, [pc, #20]	; (8009b64 <_lseek_r+0x24>)
 8009b4e:	602b      	str	r3, [r5, #0]
 8009b50:	f7fb f94a 	bl	8004de8 <_lseek>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d103      	bne.n	8009b60 <_lseek_r+0x20>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d000      	beq.n	8009b60 <_lseek_r+0x20>
 8009b5e:	6023      	str	r3, [r4, #0]
 8009b60:	bd70      	pop	{r4, r5, r6, pc}
 8009b62:	46c0      	nop			; (mov r8, r8)
 8009b64:	20000d28 	.word	0x20000d28

08009b68 <_read_r>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	0004      	movs	r4, r0
 8009b6c:	0008      	movs	r0, r1
 8009b6e:	0011      	movs	r1, r2
 8009b70:	001a      	movs	r2, r3
 8009b72:	2300      	movs	r3, #0
 8009b74:	4d05      	ldr	r5, [pc, #20]	; (8009b8c <_read_r+0x24>)
 8009b76:	602b      	str	r3, [r5, #0]
 8009b78:	f7fb f912 	bl	8004da0 <_read>
 8009b7c:	1c43      	adds	r3, r0, #1
 8009b7e:	d103      	bne.n	8009b88 <_read_r+0x20>
 8009b80:	682b      	ldr	r3, [r5, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d000      	beq.n	8009b88 <_read_r+0x20>
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	bd70      	pop	{r4, r5, r6, pc}
 8009b8a:	46c0      	nop			; (mov r8, r8)
 8009b8c:	20000d28 	.word	0x20000d28

08009b90 <log>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	0004      	movs	r4, r0
 8009b94:	000d      	movs	r5, r1
 8009b96:	f000 f8f1 	bl	8009d7c <__ieee754_log>
 8009b9a:	0022      	movs	r2, r4
 8009b9c:	0006      	movs	r6, r0
 8009b9e:	000f      	movs	r7, r1
 8009ba0:	002b      	movs	r3, r5
 8009ba2:	0020      	movs	r0, r4
 8009ba4:	0029      	movs	r1, r5
 8009ba6:	f7f9 f88f 	bl	8002cc8 <__aeabi_dcmpun>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d115      	bne.n	8009bda <log+0x4a>
 8009bae:	2200      	movs	r2, #0
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	0020      	movs	r0, r4
 8009bb4:	0029      	movs	r1, r5
 8009bb6:	f7f6 fc5f 	bl	8000478 <__aeabi_dcmpgt>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d10d      	bne.n	8009bda <log+0x4a>
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	0020      	movs	r0, r4
 8009bc4:	0029      	movs	r1, r5
 8009bc6:	f7f6 fc3d 	bl	8000444 <__aeabi_dcmpeq>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d008      	beq.n	8009be0 <log+0x50>
 8009bce:	f7fd f811 	bl	8006bf4 <__errno>
 8009bd2:	2322      	movs	r3, #34	; 0x22
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	4f07      	ldr	r7, [pc, #28]	; (8009bf4 <log+0x64>)
 8009bd8:	6003      	str	r3, [r0, #0]
 8009bda:	0030      	movs	r0, r6
 8009bdc:	0039      	movs	r1, r7
 8009bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be0:	f7fd f808 	bl	8006bf4 <__errno>
 8009be4:	2321      	movs	r3, #33	; 0x21
 8009be6:	6003      	str	r3, [r0, #0]
 8009be8:	4803      	ldr	r0, [pc, #12]	; (8009bf8 <log+0x68>)
 8009bea:	f001 f9a9 	bl	800af40 <nan>
 8009bee:	0006      	movs	r6, r0
 8009bf0:	000f      	movs	r7, r1
 8009bf2:	e7f2      	b.n	8009bda <log+0x4a>
 8009bf4:	fff00000 	.word	0xfff00000
 8009bf8:	0800f458 	.word	0x0800f458

08009bfc <pow>:
 8009bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bfe:	0014      	movs	r4, r2
 8009c00:	001d      	movs	r5, r3
 8009c02:	9000      	str	r0, [sp, #0]
 8009c04:	9101      	str	r1, [sp, #4]
 8009c06:	f000 fa69 	bl	800a0dc <__ieee754_pow>
 8009c0a:	0022      	movs	r2, r4
 8009c0c:	0006      	movs	r6, r0
 8009c0e:	000f      	movs	r7, r1
 8009c10:	002b      	movs	r3, r5
 8009c12:	0020      	movs	r0, r4
 8009c14:	0029      	movs	r1, r5
 8009c16:	f7f9 f857 	bl	8002cc8 <__aeabi_dcmpun>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d13f      	bne.n	8009c9e <pow+0xa2>
 8009c1e:	9800      	ldr	r0, [sp, #0]
 8009c20:	9901      	ldr	r1, [sp, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	2300      	movs	r3, #0
 8009c26:	f7f6 fc0d 	bl	8000444 <__aeabi_dcmpeq>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d019      	beq.n	8009c62 <pow+0x66>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2300      	movs	r3, #0
 8009c32:	0020      	movs	r0, r4
 8009c34:	0029      	movs	r1, r5
 8009c36:	f7f6 fc05 	bl	8000444 <__aeabi_dcmpeq>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d146      	bne.n	8009ccc <pow+0xd0>
 8009c3e:	0020      	movs	r0, r4
 8009c40:	0029      	movs	r1, r5
 8009c42:	f001 f975 	bl	800af30 <finite>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d029      	beq.n	8009c9e <pow+0xa2>
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	0020      	movs	r0, r4
 8009c50:	0029      	movs	r1, r5
 8009c52:	f7f6 fbfd 	bl	8000450 <__aeabi_dcmplt>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d021      	beq.n	8009c9e <pow+0xa2>
 8009c5a:	f7fc ffcb 	bl	8006bf4 <__errno>
 8009c5e:	2322      	movs	r3, #34	; 0x22
 8009c60:	e01c      	b.n	8009c9c <pow+0xa0>
 8009c62:	0030      	movs	r0, r6
 8009c64:	0039      	movs	r1, r7
 8009c66:	f001 f963 	bl	800af30 <finite>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d11b      	bne.n	8009ca6 <pow+0xaa>
 8009c6e:	9800      	ldr	r0, [sp, #0]
 8009c70:	9901      	ldr	r1, [sp, #4]
 8009c72:	f001 f95d 	bl	800af30 <finite>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d015      	beq.n	8009ca6 <pow+0xaa>
 8009c7a:	0020      	movs	r0, r4
 8009c7c:	0029      	movs	r1, r5
 8009c7e:	f001 f957 	bl	800af30 <finite>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d00f      	beq.n	8009ca6 <pow+0xaa>
 8009c86:	0032      	movs	r2, r6
 8009c88:	003b      	movs	r3, r7
 8009c8a:	0030      	movs	r0, r6
 8009c8c:	0039      	movs	r1, r7
 8009c8e:	f7f9 f81b 	bl	8002cc8 <__aeabi_dcmpun>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d0e1      	beq.n	8009c5a <pow+0x5e>
 8009c96:	f7fc ffad 	bl	8006bf4 <__errno>
 8009c9a:	2321      	movs	r3, #33	; 0x21
 8009c9c:	6003      	str	r3, [r0, #0]
 8009c9e:	0030      	movs	r0, r6
 8009ca0:	0039      	movs	r1, r7
 8009ca2:	b003      	add	sp, #12
 8009ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2300      	movs	r3, #0
 8009caa:	0030      	movs	r0, r6
 8009cac:	0039      	movs	r1, r7
 8009cae:	f7f6 fbc9 	bl	8000444 <__aeabi_dcmpeq>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d0f3      	beq.n	8009c9e <pow+0xa2>
 8009cb6:	9800      	ldr	r0, [sp, #0]
 8009cb8:	9901      	ldr	r1, [sp, #4]
 8009cba:	f001 f939 	bl	800af30 <finite>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d0ed      	beq.n	8009c9e <pow+0xa2>
 8009cc2:	0020      	movs	r0, r4
 8009cc4:	0029      	movs	r1, r5
 8009cc6:	f001 f933 	bl	800af30 <finite>
 8009cca:	e7c4      	b.n	8009c56 <pow+0x5a>
 8009ccc:	2600      	movs	r6, #0
 8009cce:	4f01      	ldr	r7, [pc, #4]	; (8009cd4 <pow+0xd8>)
 8009cd0:	e7e5      	b.n	8009c9e <pow+0xa2>
 8009cd2:	46c0      	nop			; (mov r8, r8)
 8009cd4:	3ff00000 	.word	0x3ff00000

08009cd8 <sqrt>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	0004      	movs	r4, r0
 8009cdc:	000d      	movs	r5, r1
 8009cde:	f000 ff07 	bl	800aaf0 <__ieee754_sqrt>
 8009ce2:	0022      	movs	r2, r4
 8009ce4:	0006      	movs	r6, r0
 8009ce6:	000f      	movs	r7, r1
 8009ce8:	002b      	movs	r3, r5
 8009cea:	0020      	movs	r0, r4
 8009cec:	0029      	movs	r1, r5
 8009cee:	f7f8 ffeb 	bl	8002cc8 <__aeabi_dcmpun>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d113      	bne.n	8009d1e <sqrt+0x46>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	0020      	movs	r0, r4
 8009cfc:	0029      	movs	r1, r5
 8009cfe:	f7f6 fba7 	bl	8000450 <__aeabi_dcmplt>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d00b      	beq.n	8009d1e <sqrt+0x46>
 8009d06:	f7fc ff75 	bl	8006bf4 <__errno>
 8009d0a:	2321      	movs	r3, #33	; 0x21
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	6003      	str	r3, [r0, #0]
 8009d10:	2300      	movs	r3, #0
 8009d12:	0010      	movs	r0, r2
 8009d14:	0019      	movs	r1, r3
 8009d16:	f7f7 fdd7 	bl	80018c8 <__aeabi_ddiv>
 8009d1a:	0006      	movs	r6, r0
 8009d1c:	000f      	movs	r7, r1
 8009d1e:	0030      	movs	r0, r6
 8009d20:	0039      	movs	r1, r7
 8009d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d24 <logf>:
 8009d24:	b570      	push	{r4, r5, r6, lr}
 8009d26:	1c05      	adds	r5, r0, #0
 8009d28:	f000 ff98 	bl	800ac5c <__ieee754_logf>
 8009d2c:	1c29      	adds	r1, r5, #0
 8009d2e:	1c04      	adds	r4, r0, #0
 8009d30:	1c28      	adds	r0, r5, #0
 8009d32:	f7f7 fa29 	bl	8001188 <__aeabi_fcmpun>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d110      	bne.n	8009d5c <logf+0x38>
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	1c28      	adds	r0, r5, #0
 8009d3e:	f7f6 fbd5 	bl	80004ec <__aeabi_fcmpgt>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d10a      	bne.n	8009d5c <logf+0x38>
 8009d46:	2100      	movs	r1, #0
 8009d48:	1c28      	adds	r0, r5, #0
 8009d4a:	f7f6 fbb5 	bl	80004b8 <__aeabi_fcmpeq>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d006      	beq.n	8009d60 <logf+0x3c>
 8009d52:	f7fc ff4f 	bl	8006bf4 <__errno>
 8009d56:	2322      	movs	r3, #34	; 0x22
 8009d58:	4c06      	ldr	r4, [pc, #24]	; (8009d74 <logf+0x50>)
 8009d5a:	6003      	str	r3, [r0, #0]
 8009d5c:	1c20      	adds	r0, r4, #0
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	f7fc ff48 	bl	8006bf4 <__errno>
 8009d64:	2321      	movs	r3, #33	; 0x21
 8009d66:	6003      	str	r3, [r0, #0]
 8009d68:	4803      	ldr	r0, [pc, #12]	; (8009d78 <logf+0x54>)
 8009d6a:	f001 f963 	bl	800b034 <nanf>
 8009d6e:	1c04      	adds	r4, r0, #0
 8009d70:	e7f4      	b.n	8009d5c <logf+0x38>
 8009d72:	46c0      	nop			; (mov r8, r8)
 8009d74:	ff800000 	.word	0xff800000
 8009d78:	0800f458 	.word	0x0800f458

08009d7c <__ieee754_log>:
 8009d7c:	2280      	movs	r2, #128	; 0x80
 8009d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d80:	000b      	movs	r3, r1
 8009d82:	b08d      	sub	sp, #52	; 0x34
 8009d84:	0352      	lsls	r2, r2, #13
 8009d86:	4291      	cmp	r1, r2
 8009d88:	da22      	bge.n	8009dd0 <__ieee754_log+0x54>
 8009d8a:	004a      	lsls	r2, r1, #1
 8009d8c:	0852      	lsrs	r2, r2, #1
 8009d8e:	4302      	orrs	r2, r0
 8009d90:	d107      	bne.n	8009da2 <__ieee754_log+0x26>
 8009d92:	2200      	movs	r2, #0
 8009d94:	2300      	movs	r3, #0
 8009d96:	2000      	movs	r0, #0
 8009d98:	49b3      	ldr	r1, [pc, #716]	; (800a068 <__ieee754_log+0x2ec>)
 8009d9a:	f7f7 fd95 	bl	80018c8 <__aeabi_ddiv>
 8009d9e:	b00d      	add	sp, #52	; 0x34
 8009da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009da2:	2900      	cmp	r1, #0
 8009da4:	da05      	bge.n	8009db2 <__ieee754_log+0x36>
 8009da6:	0002      	movs	r2, r0
 8009da8:	f7f8 fbfc 	bl	80025a4 <__aeabi_dsub>
 8009dac:	2200      	movs	r2, #0
 8009dae:	2300      	movs	r3, #0
 8009db0:	e7f3      	b.n	8009d9a <__ieee754_log+0x1e>
 8009db2:	4bae      	ldr	r3, [pc, #696]	; (800a06c <__ieee754_log+0x2f0>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	f7f8 f989 	bl	80020cc <__aeabi_dmul>
 8009dba:	2436      	movs	r4, #54	; 0x36
 8009dbc:	000b      	movs	r3, r1
 8009dbe:	4264      	negs	r4, r4
 8009dc0:	4aab      	ldr	r2, [pc, #684]	; (800a070 <__ieee754_log+0x2f4>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	dd06      	ble.n	8009dd4 <__ieee754_log+0x58>
 8009dc6:	0002      	movs	r2, r0
 8009dc8:	000b      	movs	r3, r1
 8009dca:	f7f7 fa41 	bl	8001250 <__aeabi_dadd>
 8009dce:	e7e6      	b.n	8009d9e <__ieee754_log+0x22>
 8009dd0:	2400      	movs	r4, #0
 8009dd2:	e7f5      	b.n	8009dc0 <__ieee754_log+0x44>
 8009dd4:	4da7      	ldr	r5, [pc, #668]	; (800a074 <__ieee754_log+0x2f8>)
 8009dd6:	151a      	asrs	r2, r3, #20
 8009dd8:	1952      	adds	r2, r2, r5
 8009dda:	1912      	adds	r2, r2, r4
 8009ddc:	031b      	lsls	r3, r3, #12
 8009dde:	4ca6      	ldr	r4, [pc, #664]	; (800a078 <__ieee754_log+0x2fc>)
 8009de0:	0b1b      	lsrs	r3, r3, #12
 8009de2:	9302      	str	r3, [sp, #8]
 8009de4:	191c      	adds	r4, r3, r4
 8009de6:	2380      	movs	r3, #128	; 0x80
 8009de8:	035b      	lsls	r3, r3, #13
 8009dea:	4023      	ands	r3, r4
 8009dec:	4ca3      	ldr	r4, [pc, #652]	; (800a07c <__ieee754_log+0x300>)
 8009dee:	9d02      	ldr	r5, [sp, #8]
 8009df0:	405c      	eors	r4, r3
 8009df2:	151b      	asrs	r3, r3, #20
 8009df4:	189b      	adds	r3, r3, r2
 8009df6:	4325      	orrs	r5, r4
 8009df8:	2200      	movs	r2, #0
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	0029      	movs	r1, r5
 8009dfe:	4b9f      	ldr	r3, [pc, #636]	; (800a07c <__ieee754_log+0x300>)
 8009e00:	f7f8 fbd0 	bl	80025a4 <__aeabi_dsub>
 8009e04:	9b02      	ldr	r3, [sp, #8]
 8009e06:	0006      	movs	r6, r0
 8009e08:	3302      	adds	r3, #2
 8009e0a:	031b      	lsls	r3, r3, #12
 8009e0c:	000f      	movs	r7, r1
 8009e0e:	2200      	movs	r2, #0
 8009e10:	0b1b      	lsrs	r3, r3, #12
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	dc64      	bgt.n	8009ee0 <__ieee754_log+0x164>
 8009e16:	2300      	movs	r3, #0
 8009e18:	f7f6 fb14 	bl	8000444 <__aeabi_dcmpeq>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d019      	beq.n	8009e54 <__ieee754_log+0xd8>
 8009e20:	9b00      	ldr	r3, [sp, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d100      	bne.n	8009e28 <__ieee754_log+0xac>
 8009e26:	e11c      	b.n	800a062 <__ieee754_log+0x2e6>
 8009e28:	0018      	movs	r0, r3
 8009e2a:	f7f8 ffa1 	bl	8002d70 <__aeabi_i2d>
 8009e2e:	4a94      	ldr	r2, [pc, #592]	; (800a080 <__ieee754_log+0x304>)
 8009e30:	4b94      	ldr	r3, [pc, #592]	; (800a084 <__ieee754_log+0x308>)
 8009e32:	0004      	movs	r4, r0
 8009e34:	000d      	movs	r5, r1
 8009e36:	f7f8 f949 	bl	80020cc <__aeabi_dmul>
 8009e3a:	4a93      	ldr	r2, [pc, #588]	; (800a088 <__ieee754_log+0x30c>)
 8009e3c:	0006      	movs	r6, r0
 8009e3e:	000f      	movs	r7, r1
 8009e40:	4b92      	ldr	r3, [pc, #584]	; (800a08c <__ieee754_log+0x310>)
 8009e42:	0020      	movs	r0, r4
 8009e44:	0029      	movs	r1, r5
 8009e46:	f7f8 f941 	bl	80020cc <__aeabi_dmul>
 8009e4a:	0002      	movs	r2, r0
 8009e4c:	000b      	movs	r3, r1
 8009e4e:	0030      	movs	r0, r6
 8009e50:	0039      	movs	r1, r7
 8009e52:	e7ba      	b.n	8009dca <__ieee754_log+0x4e>
 8009e54:	4a8e      	ldr	r2, [pc, #568]	; (800a090 <__ieee754_log+0x314>)
 8009e56:	4b8f      	ldr	r3, [pc, #572]	; (800a094 <__ieee754_log+0x318>)
 8009e58:	0030      	movs	r0, r6
 8009e5a:	0039      	movs	r1, r7
 8009e5c:	f7f8 f936 	bl	80020cc <__aeabi_dmul>
 8009e60:	0002      	movs	r2, r0
 8009e62:	000b      	movs	r3, r1
 8009e64:	2000      	movs	r0, #0
 8009e66:	498c      	ldr	r1, [pc, #560]	; (800a098 <__ieee754_log+0x31c>)
 8009e68:	f7f8 fb9c 	bl	80025a4 <__aeabi_dsub>
 8009e6c:	0032      	movs	r2, r6
 8009e6e:	0004      	movs	r4, r0
 8009e70:	000d      	movs	r5, r1
 8009e72:	003b      	movs	r3, r7
 8009e74:	0030      	movs	r0, r6
 8009e76:	0039      	movs	r1, r7
 8009e78:	f7f8 f928 	bl	80020cc <__aeabi_dmul>
 8009e7c:	000b      	movs	r3, r1
 8009e7e:	0002      	movs	r2, r0
 8009e80:	0029      	movs	r1, r5
 8009e82:	0020      	movs	r0, r4
 8009e84:	f7f8 f922 	bl	80020cc <__aeabi_dmul>
 8009e88:	9b00      	ldr	r3, [sp, #0]
 8009e8a:	9002      	str	r0, [sp, #8]
 8009e8c:	9103      	str	r1, [sp, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d106      	bne.n	8009ea0 <__ieee754_log+0x124>
 8009e92:	0002      	movs	r2, r0
 8009e94:	000b      	movs	r3, r1
 8009e96:	0030      	movs	r0, r6
 8009e98:	0039      	movs	r1, r7
 8009e9a:	f7f8 fb83 	bl	80025a4 <__aeabi_dsub>
 8009e9e:	e77e      	b.n	8009d9e <__ieee754_log+0x22>
 8009ea0:	9800      	ldr	r0, [sp, #0]
 8009ea2:	f7f8 ff65 	bl	8002d70 <__aeabi_i2d>
 8009ea6:	4a76      	ldr	r2, [pc, #472]	; (800a080 <__ieee754_log+0x304>)
 8009ea8:	4b76      	ldr	r3, [pc, #472]	; (800a084 <__ieee754_log+0x308>)
 8009eaa:	0004      	movs	r4, r0
 8009eac:	000d      	movs	r5, r1
 8009eae:	f7f8 f90d 	bl	80020cc <__aeabi_dmul>
 8009eb2:	4a75      	ldr	r2, [pc, #468]	; (800a088 <__ieee754_log+0x30c>)
 8009eb4:	9000      	str	r0, [sp, #0]
 8009eb6:	9101      	str	r1, [sp, #4]
 8009eb8:	4b74      	ldr	r3, [pc, #464]	; (800a08c <__ieee754_log+0x310>)
 8009eba:	0020      	movs	r0, r4
 8009ebc:	0029      	movs	r1, r5
 8009ebe:	f7f8 f905 	bl	80020cc <__aeabi_dmul>
 8009ec2:	0002      	movs	r2, r0
 8009ec4:	000b      	movs	r3, r1
 8009ec6:	9802      	ldr	r0, [sp, #8]
 8009ec8:	9903      	ldr	r1, [sp, #12]
 8009eca:	f7f8 fb6b 	bl	80025a4 <__aeabi_dsub>
 8009ece:	0032      	movs	r2, r6
 8009ed0:	003b      	movs	r3, r7
 8009ed2:	f7f8 fb67 	bl	80025a4 <__aeabi_dsub>
 8009ed6:	0002      	movs	r2, r0
 8009ed8:	000b      	movs	r3, r1
 8009eda:	9800      	ldr	r0, [sp, #0]
 8009edc:	9901      	ldr	r1, [sp, #4]
 8009ede:	e7dc      	b.n	8009e9a <__ieee754_log+0x11e>
 8009ee0:	2380      	movs	r3, #128	; 0x80
 8009ee2:	05db      	lsls	r3, r3, #23
 8009ee4:	f7f7 f9b4 	bl	8001250 <__aeabi_dadd>
 8009ee8:	0002      	movs	r2, r0
 8009eea:	000b      	movs	r3, r1
 8009eec:	0030      	movs	r0, r6
 8009eee:	0039      	movs	r1, r7
 8009ef0:	f7f7 fcea 	bl	80018c8 <__aeabi_ddiv>
 8009ef4:	9004      	str	r0, [sp, #16]
 8009ef6:	9105      	str	r1, [sp, #20]
 8009ef8:	9800      	ldr	r0, [sp, #0]
 8009efa:	f7f8 ff39 	bl	8002d70 <__aeabi_i2d>
 8009efe:	9a04      	ldr	r2, [sp, #16]
 8009f00:	9b05      	ldr	r3, [sp, #20]
 8009f02:	9006      	str	r0, [sp, #24]
 8009f04:	9107      	str	r1, [sp, #28]
 8009f06:	0010      	movs	r0, r2
 8009f08:	0019      	movs	r1, r3
 8009f0a:	f7f8 f8df 	bl	80020cc <__aeabi_dmul>
 8009f0e:	4a63      	ldr	r2, [pc, #396]	; (800a09c <__ieee754_log+0x320>)
 8009f10:	9b02      	ldr	r3, [sp, #8]
 8009f12:	4694      	mov	ip, r2
 8009f14:	4463      	add	r3, ip
 8009f16:	0002      	movs	r2, r0
 8009f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f1a:	000b      	movs	r3, r1
 8009f1c:	9008      	str	r0, [sp, #32]
 8009f1e:	9109      	str	r1, [sp, #36]	; 0x24
 8009f20:	f7f8 f8d4 	bl	80020cc <__aeabi_dmul>
 8009f24:	0004      	movs	r4, r0
 8009f26:	000d      	movs	r5, r1
 8009f28:	4a5d      	ldr	r2, [pc, #372]	; (800a0a0 <__ieee754_log+0x324>)
 8009f2a:	4b5e      	ldr	r3, [pc, #376]	; (800a0a4 <__ieee754_log+0x328>)
 8009f2c:	f7f8 f8ce 	bl	80020cc <__aeabi_dmul>
 8009f30:	4a5d      	ldr	r2, [pc, #372]	; (800a0a8 <__ieee754_log+0x32c>)
 8009f32:	4b5e      	ldr	r3, [pc, #376]	; (800a0ac <__ieee754_log+0x330>)
 8009f34:	f7f7 f98c 	bl	8001250 <__aeabi_dadd>
 8009f38:	0022      	movs	r2, r4
 8009f3a:	002b      	movs	r3, r5
 8009f3c:	f7f8 f8c6 	bl	80020cc <__aeabi_dmul>
 8009f40:	4a5b      	ldr	r2, [pc, #364]	; (800a0b0 <__ieee754_log+0x334>)
 8009f42:	4b5c      	ldr	r3, [pc, #368]	; (800a0b4 <__ieee754_log+0x338>)
 8009f44:	f7f7 f984 	bl	8001250 <__aeabi_dadd>
 8009f48:	0022      	movs	r2, r4
 8009f4a:	002b      	movs	r3, r5
 8009f4c:	f7f8 f8be 	bl	80020cc <__aeabi_dmul>
 8009f50:	4a59      	ldr	r2, [pc, #356]	; (800a0b8 <__ieee754_log+0x33c>)
 8009f52:	4b5a      	ldr	r3, [pc, #360]	; (800a0bc <__ieee754_log+0x340>)
 8009f54:	f7f7 f97c 	bl	8001250 <__aeabi_dadd>
 8009f58:	9a08      	ldr	r2, [sp, #32]
 8009f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f5c:	f7f8 f8b6 	bl	80020cc <__aeabi_dmul>
 8009f60:	4a57      	ldr	r2, [pc, #348]	; (800a0c0 <__ieee754_log+0x344>)
 8009f62:	9008      	str	r0, [sp, #32]
 8009f64:	9109      	str	r1, [sp, #36]	; 0x24
 8009f66:	4b57      	ldr	r3, [pc, #348]	; (800a0c4 <__ieee754_log+0x348>)
 8009f68:	0020      	movs	r0, r4
 8009f6a:	0029      	movs	r1, r5
 8009f6c:	f7f8 f8ae 	bl	80020cc <__aeabi_dmul>
 8009f70:	4a55      	ldr	r2, [pc, #340]	; (800a0c8 <__ieee754_log+0x34c>)
 8009f72:	4b56      	ldr	r3, [pc, #344]	; (800a0cc <__ieee754_log+0x350>)
 8009f74:	f7f7 f96c 	bl	8001250 <__aeabi_dadd>
 8009f78:	0022      	movs	r2, r4
 8009f7a:	002b      	movs	r3, r5
 8009f7c:	f7f8 f8a6 	bl	80020cc <__aeabi_dmul>
 8009f80:	4a53      	ldr	r2, [pc, #332]	; (800a0d0 <__ieee754_log+0x354>)
 8009f82:	4b54      	ldr	r3, [pc, #336]	; (800a0d4 <__ieee754_log+0x358>)
 8009f84:	f7f7 f964 	bl	8001250 <__aeabi_dadd>
 8009f88:	0022      	movs	r2, r4
 8009f8a:	002b      	movs	r3, r5
 8009f8c:	f7f8 f89e 	bl	80020cc <__aeabi_dmul>
 8009f90:	0002      	movs	r2, r0
 8009f92:	000b      	movs	r3, r1
 8009f94:	9808      	ldr	r0, [sp, #32]
 8009f96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f98:	f7f7 f95a 	bl	8001250 <__aeabi_dadd>
 8009f9c:	9a02      	ldr	r2, [sp, #8]
 8009f9e:	4b4e      	ldr	r3, [pc, #312]	; (800a0d8 <__ieee754_log+0x35c>)
 8009fa0:	0004      	movs	r4, r0
 8009fa2:	1a9b      	subs	r3, r3, r2
 8009fa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fa6:	000d      	movs	r5, r1
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	dd34      	ble.n	800a018 <__ieee754_log+0x29c>
 8009fae:	2200      	movs	r2, #0
 8009fb0:	4b39      	ldr	r3, [pc, #228]	; (800a098 <__ieee754_log+0x31c>)
 8009fb2:	0030      	movs	r0, r6
 8009fb4:	0039      	movs	r1, r7
 8009fb6:	f7f8 f889 	bl	80020cc <__aeabi_dmul>
 8009fba:	0032      	movs	r2, r6
 8009fbc:	003b      	movs	r3, r7
 8009fbe:	f7f8 f885 	bl	80020cc <__aeabi_dmul>
 8009fc2:	0002      	movs	r2, r0
 8009fc4:	000b      	movs	r3, r1
 8009fc6:	9002      	str	r0, [sp, #8]
 8009fc8:	9103      	str	r1, [sp, #12]
 8009fca:	0020      	movs	r0, r4
 8009fcc:	0029      	movs	r1, r5
 8009fce:	f7f7 f93f 	bl	8001250 <__aeabi_dadd>
 8009fd2:	9a04      	ldr	r2, [sp, #16]
 8009fd4:	9b05      	ldr	r3, [sp, #20]
 8009fd6:	f7f8 f879 	bl	80020cc <__aeabi_dmul>
 8009fda:	9b00      	ldr	r3, [sp, #0]
 8009fdc:	0004      	movs	r4, r0
 8009fde:	000d      	movs	r5, r1
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d106      	bne.n	8009ff2 <__ieee754_log+0x276>
 8009fe4:	0002      	movs	r2, r0
 8009fe6:	000b      	movs	r3, r1
 8009fe8:	9802      	ldr	r0, [sp, #8]
 8009fea:	9903      	ldr	r1, [sp, #12]
 8009fec:	f7f8 fada 	bl	80025a4 <__aeabi_dsub>
 8009ff0:	e74f      	b.n	8009e92 <__ieee754_log+0x116>
 8009ff2:	4a23      	ldr	r2, [pc, #140]	; (800a080 <__ieee754_log+0x304>)
 8009ff4:	4b23      	ldr	r3, [pc, #140]	; (800a084 <__ieee754_log+0x308>)
 8009ff6:	9806      	ldr	r0, [sp, #24]
 8009ff8:	9907      	ldr	r1, [sp, #28]
 8009ffa:	f7f8 f867 	bl	80020cc <__aeabi_dmul>
 8009ffe:	4a22      	ldr	r2, [pc, #136]	; (800a088 <__ieee754_log+0x30c>)
 800a000:	9000      	str	r0, [sp, #0]
 800a002:	9101      	str	r1, [sp, #4]
 800a004:	9806      	ldr	r0, [sp, #24]
 800a006:	9907      	ldr	r1, [sp, #28]
 800a008:	4b20      	ldr	r3, [pc, #128]	; (800a08c <__ieee754_log+0x310>)
 800a00a:	f7f8 f85f 	bl	80020cc <__aeabi_dmul>
 800a00e:	0022      	movs	r2, r4
 800a010:	002b      	movs	r3, r5
 800a012:	f7f7 f91d 	bl	8001250 <__aeabi_dadd>
 800a016:	e754      	b.n	8009ec2 <__ieee754_log+0x146>
 800a018:	0002      	movs	r2, r0
 800a01a:	000b      	movs	r3, r1
 800a01c:	0030      	movs	r0, r6
 800a01e:	0039      	movs	r1, r7
 800a020:	f7f8 fac0 	bl	80025a4 <__aeabi_dsub>
 800a024:	9a04      	ldr	r2, [sp, #16]
 800a026:	9b05      	ldr	r3, [sp, #20]
 800a028:	f7f8 f850 	bl	80020cc <__aeabi_dmul>
 800a02c:	9b00      	ldr	r3, [sp, #0]
 800a02e:	0004      	movs	r4, r0
 800a030:	000d      	movs	r5, r1
 800a032:	2b00      	cmp	r3, #0
 800a034:	d102      	bne.n	800a03c <__ieee754_log+0x2c0>
 800a036:	0002      	movs	r2, r0
 800a038:	000b      	movs	r3, r1
 800a03a:	e72c      	b.n	8009e96 <__ieee754_log+0x11a>
 800a03c:	4a10      	ldr	r2, [pc, #64]	; (800a080 <__ieee754_log+0x304>)
 800a03e:	4b11      	ldr	r3, [pc, #68]	; (800a084 <__ieee754_log+0x308>)
 800a040:	9806      	ldr	r0, [sp, #24]
 800a042:	9907      	ldr	r1, [sp, #28]
 800a044:	f7f8 f842 	bl	80020cc <__aeabi_dmul>
 800a048:	4a0f      	ldr	r2, [pc, #60]	; (800a088 <__ieee754_log+0x30c>)
 800a04a:	9000      	str	r0, [sp, #0]
 800a04c:	9101      	str	r1, [sp, #4]
 800a04e:	9806      	ldr	r0, [sp, #24]
 800a050:	9907      	ldr	r1, [sp, #28]
 800a052:	4b0e      	ldr	r3, [pc, #56]	; (800a08c <__ieee754_log+0x310>)
 800a054:	f7f8 f83a 	bl	80020cc <__aeabi_dmul>
 800a058:	0002      	movs	r2, r0
 800a05a:	000b      	movs	r3, r1
 800a05c:	0020      	movs	r0, r4
 800a05e:	0029      	movs	r1, r5
 800a060:	e733      	b.n	8009eca <__ieee754_log+0x14e>
 800a062:	2000      	movs	r0, #0
 800a064:	2100      	movs	r1, #0
 800a066:	e69a      	b.n	8009d9e <__ieee754_log+0x22>
 800a068:	c3500000 	.word	0xc3500000
 800a06c:	43500000 	.word	0x43500000
 800a070:	7fefffff 	.word	0x7fefffff
 800a074:	fffffc01 	.word	0xfffffc01
 800a078:	00095f64 	.word	0x00095f64
 800a07c:	3ff00000 	.word	0x3ff00000
 800a080:	fee00000 	.word	0xfee00000
 800a084:	3fe62e42 	.word	0x3fe62e42
 800a088:	35793c76 	.word	0x35793c76
 800a08c:	3dea39ef 	.word	0x3dea39ef
 800a090:	55555555 	.word	0x55555555
 800a094:	3fd55555 	.word	0x3fd55555
 800a098:	3fe00000 	.word	0x3fe00000
 800a09c:	fff9eb86 	.word	0xfff9eb86
 800a0a0:	df3e5244 	.word	0xdf3e5244
 800a0a4:	3fc2f112 	.word	0x3fc2f112
 800a0a8:	96cb03de 	.word	0x96cb03de
 800a0ac:	3fc74664 	.word	0x3fc74664
 800a0b0:	94229359 	.word	0x94229359
 800a0b4:	3fd24924 	.word	0x3fd24924
 800a0b8:	55555593 	.word	0x55555593
 800a0bc:	3fe55555 	.word	0x3fe55555
 800a0c0:	d078c69f 	.word	0xd078c69f
 800a0c4:	3fc39a09 	.word	0x3fc39a09
 800a0c8:	1d8e78af 	.word	0x1d8e78af
 800a0cc:	3fcc71c5 	.word	0x3fcc71c5
 800a0d0:	9997fa04 	.word	0x9997fa04
 800a0d4:	3fd99999 	.word	0x3fd99999
 800a0d8:	0006b851 	.word	0x0006b851

0800a0dc <__ieee754_pow>:
 800a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0de:	b095      	sub	sp, #84	; 0x54
 800a0e0:	9202      	str	r2, [sp, #8]
 800a0e2:	9303      	str	r3, [sp, #12]
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	9a03      	ldr	r2, [sp, #12]
 800a0e8:	9304      	str	r3, [sp, #16]
 800a0ea:	9b02      	ldr	r3, [sp, #8]
 800a0ec:	0056      	lsls	r6, r2, #1
 800a0ee:	001a      	movs	r2, r3
 800a0f0:	0876      	lsrs	r6, r6, #1
 800a0f2:	0007      	movs	r7, r0
 800a0f4:	000d      	movs	r5, r1
 800a0f6:	4332      	orrs	r2, r6
 800a0f8:	d119      	bne.n	800a12e <__ieee754_pow+0x52>
 800a0fa:	2180      	movs	r1, #128	; 0x80
 800a0fc:	0309      	lsls	r1, r1, #12
 800a0fe:	4069      	eors	r1, r5
 800a100:	0002      	movs	r2, r0
 800a102:	000b      	movs	r3, r1
 800a104:	1892      	adds	r2, r2, r2
 800a106:	415b      	adcs	r3, r3
 800a108:	4989      	ldr	r1, [pc, #548]	; (800a330 <__ieee754_pow+0x254>)
 800a10a:	428b      	cmp	r3, r1
 800a10c:	d806      	bhi.n	800a11c <__ieee754_pow+0x40>
 800a10e:	d001      	beq.n	800a114 <__ieee754_pow+0x38>
 800a110:	f000 fcb6 	bl	800aa80 <__ieee754_pow+0x9a4>
 800a114:	2a00      	cmp	r2, #0
 800a116:	d101      	bne.n	800a11c <__ieee754_pow+0x40>
 800a118:	f000 fcb2 	bl	800aa80 <__ieee754_pow+0x9a4>
 800a11c:	9a02      	ldr	r2, [sp, #8]
 800a11e:	9b03      	ldr	r3, [sp, #12]
 800a120:	0038      	movs	r0, r7
 800a122:	0029      	movs	r1, r5
 800a124:	f7f7 f894 	bl	8001250 <__aeabi_dadd>
 800a128:	9000      	str	r0, [sp, #0]
 800a12a:	9101      	str	r1, [sp, #4]
 800a12c:	e0ad      	b.n	800a28a <__ieee754_pow+0x1ae>
 800a12e:	4a81      	ldr	r2, [pc, #516]	; (800a334 <__ieee754_pow+0x258>)
 800a130:	004c      	lsls	r4, r1, #1
 800a132:	9108      	str	r1, [sp, #32]
 800a134:	9000      	str	r0, [sp, #0]
 800a136:	0864      	lsrs	r4, r4, #1
 800a138:	4294      	cmp	r4, r2
 800a13a:	dc08      	bgt.n	800a14e <__ieee754_pow+0x72>
 800a13c:	d101      	bne.n	800a142 <__ieee754_pow+0x66>
 800a13e:	2800      	cmp	r0, #0
 800a140:	d1ec      	bne.n	800a11c <__ieee754_pow+0x40>
 800a142:	4a7c      	ldr	r2, [pc, #496]	; (800a334 <__ieee754_pow+0x258>)
 800a144:	4296      	cmp	r6, r2
 800a146:	dc02      	bgt.n	800a14e <__ieee754_pow+0x72>
 800a148:	d10c      	bne.n	800a164 <__ieee754_pow+0x88>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00a      	beq.n	800a164 <__ieee754_pow+0x88>
 800a14e:	4b7a      	ldr	r3, [pc, #488]	; (800a338 <__ieee754_pow+0x25c>)
 800a150:	18eb      	adds	r3, r5, r3
 800a152:	433b      	orrs	r3, r7
 800a154:	d1e2      	bne.n	800a11c <__ieee754_pow+0x40>
 800a156:	2180      	movs	r1, #128	; 0x80
 800a158:	9803      	ldr	r0, [sp, #12]
 800a15a:	0309      	lsls	r1, r1, #12
 800a15c:	4048      	eors	r0, r1
 800a15e:	0003      	movs	r3, r0
 800a160:	9a02      	ldr	r2, [sp, #8]
 800a162:	e7cf      	b.n	800a104 <__ieee754_pow+0x28>
 800a164:	2200      	movs	r2, #0
 800a166:	9206      	str	r2, [sp, #24]
 800a168:	2d00      	cmp	r5, #0
 800a16a:	da69      	bge.n	800a240 <__ieee754_pow+0x164>
 800a16c:	4a73      	ldr	r2, [pc, #460]	; (800a33c <__ieee754_pow+0x260>)
 800a16e:	4296      	cmp	r6, r2
 800a170:	dc64      	bgt.n	800a23c <__ieee754_pow+0x160>
 800a172:	4a73      	ldr	r2, [pc, #460]	; (800a340 <__ieee754_pow+0x264>)
 800a174:	4296      	cmp	r6, r2
 800a176:	dd11      	ble.n	800a19c <__ieee754_pow+0xc0>
 800a178:	4972      	ldr	r1, [pc, #456]	; (800a344 <__ieee754_pow+0x268>)
 800a17a:	1532      	asrs	r2, r6, #20
 800a17c:	1852      	adds	r2, r2, r1
 800a17e:	2a14      	cmp	r2, #20
 800a180:	dd3c      	ble.n	800a1fc <__ieee754_pow+0x120>
 800a182:	2134      	movs	r1, #52	; 0x34
 800a184:	1a8a      	subs	r2, r1, r2
 800a186:	9902      	ldr	r1, [sp, #8]
 800a188:	40d1      	lsrs	r1, r2
 800a18a:	0008      	movs	r0, r1
 800a18c:	4090      	lsls	r0, r2
 800a18e:	4298      	cmp	r0, r3
 800a190:	d104      	bne.n	800a19c <__ieee754_pow+0xc0>
 800a192:	2201      	movs	r2, #1
 800a194:	4011      	ands	r1, r2
 800a196:	1892      	adds	r2, r2, r2
 800a198:	1a52      	subs	r2, r2, r1
 800a19a:	9206      	str	r2, [sp, #24]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d03c      	beq.n	800a21a <__ieee754_pow+0x13e>
 800a1a0:	0038      	movs	r0, r7
 800a1a2:	0029      	movs	r1, r5
 800a1a4:	f000 fec1 	bl	800af2a <fabs>
 800a1a8:	9000      	str	r0, [sp, #0]
 800a1aa:	9101      	str	r1, [sp, #4]
 800a1ac:	2f00      	cmp	r7, #0
 800a1ae:	d000      	beq.n	800a1b2 <__ieee754_pow+0xd6>
 800a1b0:	e094      	b.n	800a2dc <__ieee754_pow+0x200>
 800a1b2:	2c00      	cmp	r4, #0
 800a1b4:	d005      	beq.n	800a1c2 <__ieee754_pow+0xe6>
 800a1b6:	4a64      	ldr	r2, [pc, #400]	; (800a348 <__ieee754_pow+0x26c>)
 800a1b8:	00ab      	lsls	r3, r5, #2
 800a1ba:	089b      	lsrs	r3, r3, #2
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d000      	beq.n	800a1c2 <__ieee754_pow+0xe6>
 800a1c0:	e08c      	b.n	800a2dc <__ieee754_pow+0x200>
 800a1c2:	9b04      	ldr	r3, [sp, #16]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	da07      	bge.n	800a1d8 <__ieee754_pow+0xfc>
 800a1c8:	9a00      	ldr	r2, [sp, #0]
 800a1ca:	9b01      	ldr	r3, [sp, #4]
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	495e      	ldr	r1, [pc, #376]	; (800a348 <__ieee754_pow+0x26c>)
 800a1d0:	f7f7 fb7a 	bl	80018c8 <__aeabi_ddiv>
 800a1d4:	9000      	str	r0, [sp, #0]
 800a1d6:	9101      	str	r1, [sp, #4]
 800a1d8:	9b08      	ldr	r3, [sp, #32]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	da55      	bge.n	800a28a <__ieee754_pow+0x1ae>
 800a1de:	4b56      	ldr	r3, [pc, #344]	; (800a338 <__ieee754_pow+0x25c>)
 800a1e0:	18e4      	adds	r4, r4, r3
 800a1e2:	9b06      	ldr	r3, [sp, #24]
 800a1e4:	431c      	orrs	r4, r3
 800a1e6:	d000      	beq.n	800a1ea <__ieee754_pow+0x10e>
 800a1e8:	e06c      	b.n	800a2c4 <__ieee754_pow+0x1e8>
 800a1ea:	9a00      	ldr	r2, [sp, #0]
 800a1ec:	9b01      	ldr	r3, [sp, #4]
 800a1ee:	0010      	movs	r0, r2
 800a1f0:	0019      	movs	r1, r3
 800a1f2:	f7f8 f9d7 	bl	80025a4 <__aeabi_dsub>
 800a1f6:	0002      	movs	r2, r0
 800a1f8:	000b      	movs	r3, r1
 800a1fa:	e01c      	b.n	800a236 <__ieee754_pow+0x15a>
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1cf      	bne.n	800a1a0 <__ieee754_pow+0xc4>
 800a200:	3314      	adds	r3, #20
 800a202:	1a9a      	subs	r2, r3, r2
 800a204:	0033      	movs	r3, r6
 800a206:	4113      	asrs	r3, r2
 800a208:	0019      	movs	r1, r3
 800a20a:	4091      	lsls	r1, r2
 800a20c:	42b1      	cmp	r1, r6
 800a20e:	d104      	bne.n	800a21a <__ieee754_pow+0x13e>
 800a210:	2201      	movs	r2, #1
 800a212:	4013      	ands	r3, r2
 800a214:	1892      	adds	r2, r2, r2
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	9306      	str	r3, [sp, #24]
 800a21a:	4b4b      	ldr	r3, [pc, #300]	; (800a348 <__ieee754_pow+0x26c>)
 800a21c:	429e      	cmp	r6, r3
 800a21e:	d138      	bne.n	800a292 <__ieee754_pow+0x1b6>
 800a220:	0038      	movs	r0, r7
 800a222:	0029      	movs	r1, r5
 800a224:	9b04      	ldr	r3, [sp, #16]
 800a226:	9000      	str	r0, [sp, #0]
 800a228:	9101      	str	r1, [sp, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	da2d      	bge.n	800a28a <__ieee754_pow+0x1ae>
 800a22e:	003a      	movs	r2, r7
 800a230:	002b      	movs	r3, r5
 800a232:	2000      	movs	r0, #0
 800a234:	4944      	ldr	r1, [pc, #272]	; (800a348 <__ieee754_pow+0x26c>)
 800a236:	f7f7 fb47 	bl	80018c8 <__aeabi_ddiv>
 800a23a:	e775      	b.n	800a128 <__ieee754_pow+0x4c>
 800a23c:	2202      	movs	r2, #2
 800a23e:	9206      	str	r2, [sp, #24]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1ad      	bne.n	800a1a0 <__ieee754_pow+0xc4>
 800a244:	4b3b      	ldr	r3, [pc, #236]	; (800a334 <__ieee754_pow+0x258>)
 800a246:	429e      	cmp	r6, r3
 800a248:	d1e7      	bne.n	800a21a <__ieee754_pow+0x13e>
 800a24a:	4b3b      	ldr	r3, [pc, #236]	; (800a338 <__ieee754_pow+0x25c>)
 800a24c:	18e3      	adds	r3, r4, r3
 800a24e:	431f      	orrs	r7, r3
 800a250:	d101      	bne.n	800a256 <__ieee754_pow+0x17a>
 800a252:	f000 fc15 	bl	800aa80 <__ieee754_pow+0x9a4>
 800a256:	4b3a      	ldr	r3, [pc, #232]	; (800a340 <__ieee754_pow+0x264>)
 800a258:	429c      	cmp	r4, r3
 800a25a:	dd09      	ble.n	800a270 <__ieee754_pow+0x194>
 800a25c:	9b04      	ldr	r3, [sp, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	da01      	bge.n	800a266 <__ieee754_pow+0x18a>
 800a262:	f000 fc11 	bl	800aa88 <__ieee754_pow+0x9ac>
 800a266:	9b02      	ldr	r3, [sp, #8]
 800a268:	9c03      	ldr	r4, [sp, #12]
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	9401      	str	r4, [sp, #4]
 800a26e:	e00c      	b.n	800a28a <__ieee754_pow+0x1ae>
 800a270:	9b04      	ldr	r3, [sp, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	db01      	blt.n	800a27a <__ieee754_pow+0x19e>
 800a276:	f000 fc07 	bl	800aa88 <__ieee754_pow+0x9ac>
 800a27a:	2280      	movs	r2, #128	; 0x80
 800a27c:	0612      	lsls	r2, r2, #24
 800a27e:	4694      	mov	ip, r2
 800a280:	9b02      	ldr	r3, [sp, #8]
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	9b03      	ldr	r3, [sp, #12]
 800a286:	4463      	add	r3, ip
 800a288:	9301      	str	r3, [sp, #4]
 800a28a:	9800      	ldr	r0, [sp, #0]
 800a28c:	9901      	ldr	r1, [sp, #4]
 800a28e:	b015      	add	sp, #84	; 0x54
 800a290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a292:	2380      	movs	r3, #128	; 0x80
 800a294:	9a04      	ldr	r2, [sp, #16]
 800a296:	05db      	lsls	r3, r3, #23
 800a298:	429a      	cmp	r2, r3
 800a29a:	d106      	bne.n	800a2aa <__ieee754_pow+0x1ce>
 800a29c:	003a      	movs	r2, r7
 800a29e:	002b      	movs	r3, r5
 800a2a0:	0038      	movs	r0, r7
 800a2a2:	0029      	movs	r1, r5
 800a2a4:	f7f7 ff12 	bl	80020cc <__aeabi_dmul>
 800a2a8:	e73e      	b.n	800a128 <__ieee754_pow+0x4c>
 800a2aa:	4b28      	ldr	r3, [pc, #160]	; (800a34c <__ieee754_pow+0x270>)
 800a2ac:	9a04      	ldr	r2, [sp, #16]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d000      	beq.n	800a2b4 <__ieee754_pow+0x1d8>
 800a2b2:	e775      	b.n	800a1a0 <__ieee754_pow+0xc4>
 800a2b4:	2d00      	cmp	r5, #0
 800a2b6:	da00      	bge.n	800a2ba <__ieee754_pow+0x1de>
 800a2b8:	e772      	b.n	800a1a0 <__ieee754_pow+0xc4>
 800a2ba:	0038      	movs	r0, r7
 800a2bc:	0029      	movs	r1, r5
 800a2be:	f000 fc17 	bl	800aaf0 <__ieee754_sqrt>
 800a2c2:	e731      	b.n	800a128 <__ieee754_pow+0x4c>
 800a2c4:	9b06      	ldr	r3, [sp, #24]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d1df      	bne.n	800a28a <__ieee754_pow+0x1ae>
 800a2ca:	9800      	ldr	r0, [sp, #0]
 800a2cc:	2180      	movs	r1, #128	; 0x80
 800a2ce:	0002      	movs	r2, r0
 800a2d0:	9801      	ldr	r0, [sp, #4]
 800a2d2:	0609      	lsls	r1, r1, #24
 800a2d4:	1843      	adds	r3, r0, r1
 800a2d6:	9200      	str	r2, [sp, #0]
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	e7d6      	b.n	800a28a <__ieee754_pow+0x1ae>
 800a2dc:	0feb      	lsrs	r3, r5, #31
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	930e      	str	r3, [sp, #56]	; 0x38
 800a2e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2e4:	9b06      	ldr	r3, [sp, #24]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	d104      	bne.n	800a2f4 <__ieee754_pow+0x218>
 800a2ea:	003a      	movs	r2, r7
 800a2ec:	002b      	movs	r3, r5
 800a2ee:	0038      	movs	r0, r7
 800a2f0:	0029      	movs	r1, r5
 800a2f2:	e77e      	b.n	800a1f2 <__ieee754_pow+0x116>
 800a2f4:	4b16      	ldr	r3, [pc, #88]	; (800a350 <__ieee754_pow+0x274>)
 800a2f6:	429e      	cmp	r6, r3
 800a2f8:	dc00      	bgt.n	800a2fc <__ieee754_pow+0x220>
 800a2fa:	e0ef      	b.n	800a4dc <__ieee754_pow+0x400>
 800a2fc:	4b15      	ldr	r3, [pc, #84]	; (800a354 <__ieee754_pow+0x278>)
 800a2fe:	429e      	cmp	r6, r3
 800a300:	dd09      	ble.n	800a316 <__ieee754_pow+0x23a>
 800a302:	4b0f      	ldr	r3, [pc, #60]	; (800a340 <__ieee754_pow+0x264>)
 800a304:	429c      	cmp	r4, r3
 800a306:	dc0c      	bgt.n	800a322 <__ieee754_pow+0x246>
 800a308:	9b04      	ldr	r3, [sp, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	da0c      	bge.n	800a328 <__ieee754_pow+0x24c>
 800a30e:	2000      	movs	r0, #0
 800a310:	f000 fe04 	bl	800af1c <__math_oflow>
 800a314:	e708      	b.n	800a128 <__ieee754_pow+0x4c>
 800a316:	4b10      	ldr	r3, [pc, #64]	; (800a358 <__ieee754_pow+0x27c>)
 800a318:	429c      	cmp	r4, r3
 800a31a:	ddf5      	ble.n	800a308 <__ieee754_pow+0x22c>
 800a31c:	4b0a      	ldr	r3, [pc, #40]	; (800a348 <__ieee754_pow+0x26c>)
 800a31e:	429c      	cmp	r4, r3
 800a320:	dd1c      	ble.n	800a35c <__ieee754_pow+0x280>
 800a322:	9b04      	ldr	r3, [sp, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	dcf2      	bgt.n	800a30e <__ieee754_pow+0x232>
 800a328:	2000      	movs	r0, #0
 800a32a:	f000 fdf0 	bl	800af0e <__math_uflow>
 800a32e:	e6fb      	b.n	800a128 <__ieee754_pow+0x4c>
 800a330:	fff00000 	.word	0xfff00000
 800a334:	7ff00000 	.word	0x7ff00000
 800a338:	c0100000 	.word	0xc0100000
 800a33c:	433fffff 	.word	0x433fffff
 800a340:	3fefffff 	.word	0x3fefffff
 800a344:	fffffc01 	.word	0xfffffc01
 800a348:	3ff00000 	.word	0x3ff00000
 800a34c:	3fe00000 	.word	0x3fe00000
 800a350:	41e00000 	.word	0x41e00000
 800a354:	43f00000 	.word	0x43f00000
 800a358:	3feffffe 	.word	0x3feffffe
 800a35c:	2200      	movs	r2, #0
 800a35e:	9800      	ldr	r0, [sp, #0]
 800a360:	9901      	ldr	r1, [sp, #4]
 800a362:	4b52      	ldr	r3, [pc, #328]	; (800a4ac <__ieee754_pow+0x3d0>)
 800a364:	f7f8 f91e 	bl	80025a4 <__aeabi_dsub>
 800a368:	22c0      	movs	r2, #192	; 0xc0
 800a36a:	4b51      	ldr	r3, [pc, #324]	; (800a4b0 <__ieee754_pow+0x3d4>)
 800a36c:	05d2      	lsls	r2, r2, #23
 800a36e:	0004      	movs	r4, r0
 800a370:	000d      	movs	r5, r1
 800a372:	f7f7 feab 	bl	80020cc <__aeabi_dmul>
 800a376:	4a4f      	ldr	r2, [pc, #316]	; (800a4b4 <__ieee754_pow+0x3d8>)
 800a378:	9000      	str	r0, [sp, #0]
 800a37a:	9101      	str	r1, [sp, #4]
 800a37c:	4b4e      	ldr	r3, [pc, #312]	; (800a4b8 <__ieee754_pow+0x3dc>)
 800a37e:	0020      	movs	r0, r4
 800a380:	0029      	movs	r1, r5
 800a382:	f7f7 fea3 	bl	80020cc <__aeabi_dmul>
 800a386:	2200      	movs	r2, #0
 800a388:	9004      	str	r0, [sp, #16]
 800a38a:	9105      	str	r1, [sp, #20]
 800a38c:	4b4b      	ldr	r3, [pc, #300]	; (800a4bc <__ieee754_pow+0x3e0>)
 800a38e:	0020      	movs	r0, r4
 800a390:	0029      	movs	r1, r5
 800a392:	f7f7 fe9b 	bl	80020cc <__aeabi_dmul>
 800a396:	0002      	movs	r2, r0
 800a398:	000b      	movs	r3, r1
 800a39a:	4849      	ldr	r0, [pc, #292]	; (800a4c0 <__ieee754_pow+0x3e4>)
 800a39c:	4949      	ldr	r1, [pc, #292]	; (800a4c4 <__ieee754_pow+0x3e8>)
 800a39e:	f7f8 f901 	bl	80025a4 <__aeabi_dsub>
 800a3a2:	0022      	movs	r2, r4
 800a3a4:	002b      	movs	r3, r5
 800a3a6:	f7f7 fe91 	bl	80020cc <__aeabi_dmul>
 800a3aa:	0002      	movs	r2, r0
 800a3ac:	000b      	movs	r3, r1
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	4945      	ldr	r1, [pc, #276]	; (800a4c8 <__ieee754_pow+0x3ec>)
 800a3b2:	f7f8 f8f7 	bl	80025a4 <__aeabi_dsub>
 800a3b6:	0022      	movs	r2, r4
 800a3b8:	0006      	movs	r6, r0
 800a3ba:	000f      	movs	r7, r1
 800a3bc:	002b      	movs	r3, r5
 800a3be:	0020      	movs	r0, r4
 800a3c0:	0029      	movs	r1, r5
 800a3c2:	f7f7 fe83 	bl	80020cc <__aeabi_dmul>
 800a3c6:	0002      	movs	r2, r0
 800a3c8:	000b      	movs	r3, r1
 800a3ca:	0030      	movs	r0, r6
 800a3cc:	0039      	movs	r1, r7
 800a3ce:	f7f7 fe7d 	bl	80020cc <__aeabi_dmul>
 800a3d2:	4a3e      	ldr	r2, [pc, #248]	; (800a4cc <__ieee754_pow+0x3f0>)
 800a3d4:	4b36      	ldr	r3, [pc, #216]	; (800a4b0 <__ieee754_pow+0x3d4>)
 800a3d6:	f7f7 fe79 	bl	80020cc <__aeabi_dmul>
 800a3da:	0002      	movs	r2, r0
 800a3dc:	000b      	movs	r3, r1
 800a3de:	9804      	ldr	r0, [sp, #16]
 800a3e0:	9905      	ldr	r1, [sp, #20]
 800a3e2:	f7f8 f8df 	bl	80025a4 <__aeabi_dsub>
 800a3e6:	0002      	movs	r2, r0
 800a3e8:	000b      	movs	r3, r1
 800a3ea:	0004      	movs	r4, r0
 800a3ec:	000d      	movs	r5, r1
 800a3ee:	9800      	ldr	r0, [sp, #0]
 800a3f0:	9901      	ldr	r1, [sp, #4]
 800a3f2:	f7f6 ff2d 	bl	8001250 <__aeabi_dadd>
 800a3f6:	9a00      	ldr	r2, [sp, #0]
 800a3f8:	9b01      	ldr	r3, [sp, #4]
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	000f      	movs	r7, r1
 800a3fe:	0006      	movs	r6, r0
 800a400:	f7f8 f8d0 	bl	80025a4 <__aeabi_dsub>
 800a404:	0002      	movs	r2, r0
 800a406:	000b      	movs	r3, r1
 800a408:	0020      	movs	r0, r4
 800a40a:	0029      	movs	r1, r5
 800a40c:	f7f8 f8ca 	bl	80025a4 <__aeabi_dsub>
 800a410:	9b06      	ldr	r3, [sp, #24]
 800a412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a414:	3b01      	subs	r3, #1
 800a416:	9004      	str	r0, [sp, #16]
 800a418:	9105      	str	r1, [sp, #20]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	d000      	beq.n	800a420 <__ieee754_pow+0x344>
 800a41e:	e1db      	b.n	800a7d8 <__ieee754_pow+0x6fc>
 800a420:	2300      	movs	r3, #0
 800a422:	4c2b      	ldr	r4, [pc, #172]	; (800a4d0 <__ieee754_pow+0x3f4>)
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	9401      	str	r4, [sp, #4]
 800a428:	9c02      	ldr	r4, [sp, #8]
 800a42a:	9d03      	ldr	r5, [sp, #12]
 800a42c:	9802      	ldr	r0, [sp, #8]
 800a42e:	9903      	ldr	r1, [sp, #12]
 800a430:	2400      	movs	r4, #0
 800a432:	002b      	movs	r3, r5
 800a434:	0022      	movs	r2, r4
 800a436:	f7f8 f8b5 	bl	80025a4 <__aeabi_dsub>
 800a43a:	0032      	movs	r2, r6
 800a43c:	003b      	movs	r3, r7
 800a43e:	f7f7 fe45 	bl	80020cc <__aeabi_dmul>
 800a442:	9a02      	ldr	r2, [sp, #8]
 800a444:	9b03      	ldr	r3, [sp, #12]
 800a446:	9006      	str	r0, [sp, #24]
 800a448:	9107      	str	r1, [sp, #28]
 800a44a:	9804      	ldr	r0, [sp, #16]
 800a44c:	9905      	ldr	r1, [sp, #20]
 800a44e:	f7f7 fe3d 	bl	80020cc <__aeabi_dmul>
 800a452:	0002      	movs	r2, r0
 800a454:	000b      	movs	r3, r1
 800a456:	9806      	ldr	r0, [sp, #24]
 800a458:	9907      	ldr	r1, [sp, #28]
 800a45a:	f7f6 fef9 	bl	8001250 <__aeabi_dadd>
 800a45e:	0022      	movs	r2, r4
 800a460:	002b      	movs	r3, r5
 800a462:	9004      	str	r0, [sp, #16]
 800a464:	9105      	str	r1, [sp, #20]
 800a466:	0030      	movs	r0, r6
 800a468:	0039      	movs	r1, r7
 800a46a:	f7f7 fe2f 	bl	80020cc <__aeabi_dmul>
 800a46e:	0006      	movs	r6, r0
 800a470:	000f      	movs	r7, r1
 800a472:	000b      	movs	r3, r1
 800a474:	0002      	movs	r2, r0
 800a476:	9804      	ldr	r0, [sp, #16]
 800a478:	9905      	ldr	r1, [sp, #20]
 800a47a:	9606      	str	r6, [sp, #24]
 800a47c:	9707      	str	r7, [sp, #28]
 800a47e:	f7f6 fee7 	bl	8001250 <__aeabi_dadd>
 800a482:	4b14      	ldr	r3, [pc, #80]	; (800a4d4 <__ieee754_pow+0x3f8>)
 800a484:	0005      	movs	r5, r0
 800a486:	000c      	movs	r4, r1
 800a488:	9108      	str	r1, [sp, #32]
 800a48a:	4299      	cmp	r1, r3
 800a48c:	dc00      	bgt.n	800a490 <__ieee754_pow+0x3b4>
 800a48e:	e2d6      	b.n	800aa3e <__ieee754_pow+0x962>
 800a490:	4b11      	ldr	r3, [pc, #68]	; (800a4d8 <__ieee754_pow+0x3fc>)
 800a492:	18cb      	adds	r3, r1, r3
 800a494:	4303      	orrs	r3, r0
 800a496:	d100      	bne.n	800a49a <__ieee754_pow+0x3be>
 800a498:	e1d8      	b.n	800a84c <__ieee754_pow+0x770>
 800a49a:	9800      	ldr	r0, [sp, #0]
 800a49c:	9901      	ldr	r1, [sp, #4]
 800a49e:	2300      	movs	r3, #0
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f7f5 ffd5 	bl	8000450 <__aeabi_dcmplt>
 800a4a6:	1e43      	subs	r3, r0, #1
 800a4a8:	4198      	sbcs	r0, r3
 800a4aa:	e731      	b.n	800a310 <__ieee754_pow+0x234>
 800a4ac:	3ff00000 	.word	0x3ff00000
 800a4b0:	3ff71547 	.word	0x3ff71547
 800a4b4:	f85ddf44 	.word	0xf85ddf44
 800a4b8:	3e54ae0b 	.word	0x3e54ae0b
 800a4bc:	3fd00000 	.word	0x3fd00000
 800a4c0:	55555555 	.word	0x55555555
 800a4c4:	3fd55555 	.word	0x3fd55555
 800a4c8:	3fe00000 	.word	0x3fe00000
 800a4cc:	652b82fe 	.word	0x652b82fe
 800a4d0:	bff00000 	.word	0xbff00000
 800a4d4:	408fffff 	.word	0x408fffff
 800a4d8:	bf700000 	.word	0xbf700000
 800a4dc:	4bc0      	ldr	r3, [pc, #768]	; (800a7e0 <__ieee754_pow+0x704>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	422b      	tst	r3, r5
 800a4e2:	d10a      	bne.n	800a4fa <__ieee754_pow+0x41e>
 800a4e4:	9800      	ldr	r0, [sp, #0]
 800a4e6:	9901      	ldr	r1, [sp, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	4bbe      	ldr	r3, [pc, #760]	; (800a7e4 <__ieee754_pow+0x708>)
 800a4ec:	f7f7 fdee 	bl	80020cc <__aeabi_dmul>
 800a4f0:	2235      	movs	r2, #53	; 0x35
 800a4f2:	9000      	str	r0, [sp, #0]
 800a4f4:	9101      	str	r1, [sp, #4]
 800a4f6:	9c01      	ldr	r4, [sp, #4]
 800a4f8:	4252      	negs	r2, r2
 800a4fa:	49bb      	ldr	r1, [pc, #748]	; (800a7e8 <__ieee754_pow+0x70c>)
 800a4fc:	1523      	asrs	r3, r4, #20
 800a4fe:	185b      	adds	r3, r3, r1
 800a500:	189b      	adds	r3, r3, r2
 800a502:	0324      	lsls	r4, r4, #12
 800a504:	4db9      	ldr	r5, [pc, #740]	; (800a7ec <__ieee754_pow+0x710>)
 800a506:	930d      	str	r3, [sp, #52]	; 0x34
 800a508:	4bb9      	ldr	r3, [pc, #740]	; (800a7f0 <__ieee754_pow+0x714>)
 800a50a:	0b22      	lsrs	r2, r4, #12
 800a50c:	4315      	orrs	r5, r2
 800a50e:	2400      	movs	r4, #0
 800a510:	429a      	cmp	r2, r3
 800a512:	dd09      	ble.n	800a528 <__ieee754_pow+0x44c>
 800a514:	4bb7      	ldr	r3, [pc, #732]	; (800a7f4 <__ieee754_pow+0x718>)
 800a516:	3401      	adds	r4, #1
 800a518:	429a      	cmp	r2, r3
 800a51a:	dd05      	ble.n	800a528 <__ieee754_pow+0x44c>
 800a51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a51e:	191b      	adds	r3, r3, r4
 800a520:	2400      	movs	r4, #0
 800a522:	930d      	str	r3, [sp, #52]	; 0x34
 800a524:	4bb4      	ldr	r3, [pc, #720]	; (800a7f8 <__ieee754_pow+0x71c>)
 800a526:	18ed      	adds	r5, r5, r3
 800a528:	00e3      	lsls	r3, r4, #3
 800a52a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a52c:	4bb3      	ldr	r3, [pc, #716]	; (800a7fc <__ieee754_pow+0x720>)
 800a52e:	00e2      	lsls	r2, r4, #3
 800a530:	189b      	adds	r3, r3, r2
 800a532:	9800      	ldr	r0, [sp, #0]
 800a534:	9901      	ldr	r1, [sp, #4]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	0029      	movs	r1, r5
 800a53c:	0006      	movs	r6, r0
 800a53e:	920a      	str	r2, [sp, #40]	; 0x28
 800a540:	930b      	str	r3, [sp, #44]	; 0x2c
 800a542:	f7f8 f82f 	bl	80025a4 <__aeabi_dsub>
 800a546:	0032      	movs	r2, r6
 800a548:	002b      	movs	r3, r5
 800a54a:	9010      	str	r0, [sp, #64]	; 0x40
 800a54c:	9111      	str	r1, [sp, #68]	; 0x44
 800a54e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a552:	f7f6 fe7d 	bl	8001250 <__aeabi_dadd>
 800a556:	0002      	movs	r2, r0
 800a558:	000b      	movs	r3, r1
 800a55a:	2000      	movs	r0, #0
 800a55c:	49a3      	ldr	r1, [pc, #652]	; (800a7ec <__ieee754_pow+0x710>)
 800a55e:	f7f7 f9b3 	bl	80018c8 <__aeabi_ddiv>
 800a562:	0002      	movs	r2, r0
 800a564:	000b      	movs	r3, r1
 800a566:	9012      	str	r0, [sp, #72]	; 0x48
 800a568:	9113      	str	r1, [sp, #76]	; 0x4c
 800a56a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a56c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a56e:	f7f7 fdad 	bl	80020cc <__aeabi_dmul>
 800a572:	9008      	str	r0, [sp, #32]
 800a574:	9109      	str	r1, [sp, #36]	; 0x24
 800a576:	9a08      	ldr	r2, [sp, #32]
 800a578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57a:	2180      	movs	r1, #128	; 0x80
 800a57c:	9204      	str	r2, [sp, #16]
 800a57e:	9305      	str	r3, [sp, #20]
 800a580:	2300      	movs	r3, #0
 800a582:	002f      	movs	r7, r5
 800a584:	0589      	lsls	r1, r1, #22
 800a586:	106d      	asrs	r5, r5, #1
 800a588:	430d      	orrs	r5, r1
 800a58a:	2180      	movs	r1, #128	; 0x80
 800a58c:	9304      	str	r3, [sp, #16]
 800a58e:	9a04      	ldr	r2, [sp, #16]
 800a590:	9b05      	ldr	r3, [sp, #20]
 800a592:	9200      	str	r2, [sp, #0]
 800a594:	9301      	str	r3, [sp, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	0309      	lsls	r1, r1, #12
 800a59a:	186d      	adds	r5, r5, r1
 800a59c:	04a1      	lsls	r1, r4, #18
 800a59e:	186b      	adds	r3, r5, r1
 800a5a0:	9800      	ldr	r0, [sp, #0]
 800a5a2:	9901      	ldr	r1, [sp, #4]
 800a5a4:	0014      	movs	r4, r2
 800a5a6:	001d      	movs	r5, r3
 800a5a8:	f7f7 fd90 	bl	80020cc <__aeabi_dmul>
 800a5ac:	0002      	movs	r2, r0
 800a5ae:	000b      	movs	r3, r1
 800a5b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a5b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a5b4:	f7f7 fff6 	bl	80025a4 <__aeabi_dsub>
 800a5b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5bc:	9010      	str	r0, [sp, #64]	; 0x40
 800a5be:	9111      	str	r1, [sp, #68]	; 0x44
 800a5c0:	0020      	movs	r0, r4
 800a5c2:	0029      	movs	r1, r5
 800a5c4:	f7f7 ffee 	bl	80025a4 <__aeabi_dsub>
 800a5c8:	0002      	movs	r2, r0
 800a5ca:	000b      	movs	r3, r1
 800a5cc:	0030      	movs	r0, r6
 800a5ce:	0039      	movs	r1, r7
 800a5d0:	f7f7 ffe8 	bl	80025a4 <__aeabi_dsub>
 800a5d4:	9a00      	ldr	r2, [sp, #0]
 800a5d6:	9b01      	ldr	r3, [sp, #4]
 800a5d8:	f7f7 fd78 	bl	80020cc <__aeabi_dmul>
 800a5dc:	0002      	movs	r2, r0
 800a5de:	000b      	movs	r3, r1
 800a5e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a5e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a5e4:	f7f7 ffde 	bl	80025a4 <__aeabi_dsub>
 800a5e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5ec:	f7f7 fd6e 	bl	80020cc <__aeabi_dmul>
 800a5f0:	9a08      	ldr	r2, [sp, #32]
 800a5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f4:	900a      	str	r0, [sp, #40]	; 0x28
 800a5f6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a5f8:	0010      	movs	r0, r2
 800a5fa:	0019      	movs	r1, r3
 800a5fc:	f7f7 fd66 	bl	80020cc <__aeabi_dmul>
 800a600:	0006      	movs	r6, r0
 800a602:	000f      	movs	r7, r1
 800a604:	4a7e      	ldr	r2, [pc, #504]	; (800a800 <__ieee754_pow+0x724>)
 800a606:	4b7f      	ldr	r3, [pc, #508]	; (800a804 <__ieee754_pow+0x728>)
 800a608:	f7f7 fd60 	bl	80020cc <__aeabi_dmul>
 800a60c:	4a7e      	ldr	r2, [pc, #504]	; (800a808 <__ieee754_pow+0x72c>)
 800a60e:	4b7f      	ldr	r3, [pc, #508]	; (800a80c <__ieee754_pow+0x730>)
 800a610:	f7f6 fe1e 	bl	8001250 <__aeabi_dadd>
 800a614:	0032      	movs	r2, r6
 800a616:	003b      	movs	r3, r7
 800a618:	f7f7 fd58 	bl	80020cc <__aeabi_dmul>
 800a61c:	4a7c      	ldr	r2, [pc, #496]	; (800a810 <__ieee754_pow+0x734>)
 800a61e:	4b7d      	ldr	r3, [pc, #500]	; (800a814 <__ieee754_pow+0x738>)
 800a620:	f7f6 fe16 	bl	8001250 <__aeabi_dadd>
 800a624:	0032      	movs	r2, r6
 800a626:	003b      	movs	r3, r7
 800a628:	f7f7 fd50 	bl	80020cc <__aeabi_dmul>
 800a62c:	4a7a      	ldr	r2, [pc, #488]	; (800a818 <__ieee754_pow+0x73c>)
 800a62e:	4b7b      	ldr	r3, [pc, #492]	; (800a81c <__ieee754_pow+0x740>)
 800a630:	f7f6 fe0e 	bl	8001250 <__aeabi_dadd>
 800a634:	0032      	movs	r2, r6
 800a636:	003b      	movs	r3, r7
 800a638:	f7f7 fd48 	bl	80020cc <__aeabi_dmul>
 800a63c:	4a78      	ldr	r2, [pc, #480]	; (800a820 <__ieee754_pow+0x744>)
 800a63e:	4b79      	ldr	r3, [pc, #484]	; (800a824 <__ieee754_pow+0x748>)
 800a640:	f7f6 fe06 	bl	8001250 <__aeabi_dadd>
 800a644:	0032      	movs	r2, r6
 800a646:	003b      	movs	r3, r7
 800a648:	f7f7 fd40 	bl	80020cc <__aeabi_dmul>
 800a64c:	4a76      	ldr	r2, [pc, #472]	; (800a828 <__ieee754_pow+0x74c>)
 800a64e:	4b77      	ldr	r3, [pc, #476]	; (800a82c <__ieee754_pow+0x750>)
 800a650:	f7f6 fdfe 	bl	8001250 <__aeabi_dadd>
 800a654:	0032      	movs	r2, r6
 800a656:	0004      	movs	r4, r0
 800a658:	000d      	movs	r5, r1
 800a65a:	003b      	movs	r3, r7
 800a65c:	0030      	movs	r0, r6
 800a65e:	0039      	movs	r1, r7
 800a660:	f7f7 fd34 	bl	80020cc <__aeabi_dmul>
 800a664:	0002      	movs	r2, r0
 800a666:	000b      	movs	r3, r1
 800a668:	0020      	movs	r0, r4
 800a66a:	0029      	movs	r1, r5
 800a66c:	f7f7 fd2e 	bl	80020cc <__aeabi_dmul>
 800a670:	9a00      	ldr	r2, [sp, #0]
 800a672:	9b01      	ldr	r3, [sp, #4]
 800a674:	0004      	movs	r4, r0
 800a676:	000d      	movs	r5, r1
 800a678:	9808      	ldr	r0, [sp, #32]
 800a67a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a67c:	f7f6 fde8 	bl	8001250 <__aeabi_dadd>
 800a680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a684:	f7f7 fd22 	bl	80020cc <__aeabi_dmul>
 800a688:	0022      	movs	r2, r4
 800a68a:	002b      	movs	r3, r5
 800a68c:	f7f6 fde0 	bl	8001250 <__aeabi_dadd>
 800a690:	9a00      	ldr	r2, [sp, #0]
 800a692:	9b01      	ldr	r3, [sp, #4]
 800a694:	9010      	str	r0, [sp, #64]	; 0x40
 800a696:	9111      	str	r1, [sp, #68]	; 0x44
 800a698:	0010      	movs	r0, r2
 800a69a:	0019      	movs	r1, r3
 800a69c:	f7f7 fd16 	bl	80020cc <__aeabi_dmul>
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	4b63      	ldr	r3, [pc, #396]	; (800a830 <__ieee754_pow+0x754>)
 800a6a4:	0004      	movs	r4, r0
 800a6a6:	000d      	movs	r5, r1
 800a6a8:	f7f6 fdd2 	bl	8001250 <__aeabi_dadd>
 800a6ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6b0:	f7f6 fdce 	bl	8001250 <__aeabi_dadd>
 800a6b4:	2600      	movs	r6, #0
 800a6b6:	000f      	movs	r7, r1
 800a6b8:	0032      	movs	r2, r6
 800a6ba:	000b      	movs	r3, r1
 800a6bc:	9800      	ldr	r0, [sp, #0]
 800a6be:	9901      	ldr	r1, [sp, #4]
 800a6c0:	f7f7 fd04 	bl	80020cc <__aeabi_dmul>
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	9000      	str	r0, [sp, #0]
 800a6c8:	9101      	str	r1, [sp, #4]
 800a6ca:	4b59      	ldr	r3, [pc, #356]	; (800a830 <__ieee754_pow+0x754>)
 800a6cc:	0030      	movs	r0, r6
 800a6ce:	0039      	movs	r1, r7
 800a6d0:	f7f7 ff68 	bl	80025a4 <__aeabi_dsub>
 800a6d4:	0022      	movs	r2, r4
 800a6d6:	002b      	movs	r3, r5
 800a6d8:	f7f7 ff64 	bl	80025a4 <__aeabi_dsub>
 800a6dc:	0002      	movs	r2, r0
 800a6de:	000b      	movs	r3, r1
 800a6e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a6e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a6e4:	f7f7 ff5e 	bl	80025a4 <__aeabi_dsub>
 800a6e8:	9a08      	ldr	r2, [sp, #32]
 800a6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ec:	f7f7 fcee 	bl	80020cc <__aeabi_dmul>
 800a6f0:	0032      	movs	r2, r6
 800a6f2:	0004      	movs	r4, r0
 800a6f4:	000d      	movs	r5, r1
 800a6f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6fa:	003b      	movs	r3, r7
 800a6fc:	f7f7 fce6 	bl	80020cc <__aeabi_dmul>
 800a700:	0002      	movs	r2, r0
 800a702:	000b      	movs	r3, r1
 800a704:	0020      	movs	r0, r4
 800a706:	0029      	movs	r1, r5
 800a708:	f7f6 fda2 	bl	8001250 <__aeabi_dadd>
 800a70c:	0004      	movs	r4, r0
 800a70e:	000d      	movs	r5, r1
 800a710:	0002      	movs	r2, r0
 800a712:	000b      	movs	r3, r1
 800a714:	9800      	ldr	r0, [sp, #0]
 800a716:	9901      	ldr	r1, [sp, #4]
 800a718:	f7f6 fd9a 	bl	8001250 <__aeabi_dadd>
 800a71c:	2600      	movs	r6, #0
 800a71e:	22e0      	movs	r2, #224	; 0xe0
 800a720:	4b44      	ldr	r3, [pc, #272]	; (800a834 <__ieee754_pow+0x758>)
 800a722:	0612      	lsls	r2, r2, #24
 800a724:	0030      	movs	r0, r6
 800a726:	000f      	movs	r7, r1
 800a728:	f7f7 fcd0 	bl	80020cc <__aeabi_dmul>
 800a72c:	9008      	str	r0, [sp, #32]
 800a72e:	9109      	str	r1, [sp, #36]	; 0x24
 800a730:	9a00      	ldr	r2, [sp, #0]
 800a732:	9b01      	ldr	r3, [sp, #4]
 800a734:	0039      	movs	r1, r7
 800a736:	0030      	movs	r0, r6
 800a738:	f7f7 ff34 	bl	80025a4 <__aeabi_dsub>
 800a73c:	0002      	movs	r2, r0
 800a73e:	000b      	movs	r3, r1
 800a740:	0020      	movs	r0, r4
 800a742:	0029      	movs	r1, r5
 800a744:	f7f7 ff2e 	bl	80025a4 <__aeabi_dsub>
 800a748:	4a3b      	ldr	r2, [pc, #236]	; (800a838 <__ieee754_pow+0x75c>)
 800a74a:	4b3a      	ldr	r3, [pc, #232]	; (800a834 <__ieee754_pow+0x758>)
 800a74c:	f7f7 fcbe 	bl	80020cc <__aeabi_dmul>
 800a750:	4a3a      	ldr	r2, [pc, #232]	; (800a83c <__ieee754_pow+0x760>)
 800a752:	0004      	movs	r4, r0
 800a754:	000d      	movs	r5, r1
 800a756:	4b3a      	ldr	r3, [pc, #232]	; (800a840 <__ieee754_pow+0x764>)
 800a758:	0039      	movs	r1, r7
 800a75a:	0030      	movs	r0, r6
 800a75c:	f7f7 fcb6 	bl	80020cc <__aeabi_dmul>
 800a760:	0002      	movs	r2, r0
 800a762:	000b      	movs	r3, r1
 800a764:	0020      	movs	r0, r4
 800a766:	0029      	movs	r1, r5
 800a768:	f7f6 fd72 	bl	8001250 <__aeabi_dadd>
 800a76c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a76e:	4b35      	ldr	r3, [pc, #212]	; (800a844 <__ieee754_pow+0x768>)
 800a770:	189b      	adds	r3, r3, r2
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f7f6 fd6b 	bl	8001250 <__aeabi_dadd>
 800a77a:	900a      	str	r0, [sp, #40]	; 0x28
 800a77c:	910b      	str	r1, [sp, #44]	; 0x2c
 800a77e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a780:	f7f8 faf6 	bl	8002d70 <__aeabi_i2d>
 800a784:	0004      	movs	r4, r0
 800a786:	000d      	movs	r5, r1
 800a788:	9808      	ldr	r0, [sp, #32]
 800a78a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a78c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a78e:	4b2e      	ldr	r3, [pc, #184]	; (800a848 <__ieee754_pow+0x76c>)
 800a790:	189b      	adds	r3, r3, r2
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	9200      	str	r2, [sp, #0]
 800a798:	9301      	str	r3, [sp, #4]
 800a79a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a79c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a79e:	f7f6 fd57 	bl	8001250 <__aeabi_dadd>
 800a7a2:	9a00      	ldr	r2, [sp, #0]
 800a7a4:	9b01      	ldr	r3, [sp, #4]
 800a7a6:	f7f6 fd53 	bl	8001250 <__aeabi_dadd>
 800a7aa:	0022      	movs	r2, r4
 800a7ac:	002b      	movs	r3, r5
 800a7ae:	f7f6 fd4f 	bl	8001250 <__aeabi_dadd>
 800a7b2:	0022      	movs	r2, r4
 800a7b4:	002b      	movs	r3, r5
 800a7b6:	0030      	movs	r0, r6
 800a7b8:	000f      	movs	r7, r1
 800a7ba:	f7f7 fef3 	bl	80025a4 <__aeabi_dsub>
 800a7be:	9a00      	ldr	r2, [sp, #0]
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	f7f7 feef 	bl	80025a4 <__aeabi_dsub>
 800a7c6:	9a08      	ldr	r2, [sp, #32]
 800a7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ca:	f7f7 feeb 	bl	80025a4 <__aeabi_dsub>
 800a7ce:	0002      	movs	r2, r0
 800a7d0:	000b      	movs	r3, r1
 800a7d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a7d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7d6:	e619      	b.n	800a40c <__ieee754_pow+0x330>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4c04      	ldr	r4, [pc, #16]	; (800a7ec <__ieee754_pow+0x710>)
 800a7dc:	e622      	b.n	800a424 <__ieee754_pow+0x348>
 800a7de:	46c0      	nop			; (mov r8, r8)
 800a7e0:	7ff00000 	.word	0x7ff00000
 800a7e4:	43400000 	.word	0x43400000
 800a7e8:	fffffc01 	.word	0xfffffc01
 800a7ec:	3ff00000 	.word	0x3ff00000
 800a7f0:	0003988e 	.word	0x0003988e
 800a7f4:	000bb679 	.word	0x000bb679
 800a7f8:	fff00000 	.word	0xfff00000
 800a7fc:	0800f5c8 	.word	0x0800f5c8
 800a800:	4a454eef 	.word	0x4a454eef
 800a804:	3fca7e28 	.word	0x3fca7e28
 800a808:	93c9db65 	.word	0x93c9db65
 800a80c:	3fcd864a 	.word	0x3fcd864a
 800a810:	a91d4101 	.word	0xa91d4101
 800a814:	3fd17460 	.word	0x3fd17460
 800a818:	518f264d 	.word	0x518f264d
 800a81c:	3fd55555 	.word	0x3fd55555
 800a820:	db6fabff 	.word	0xdb6fabff
 800a824:	3fdb6db6 	.word	0x3fdb6db6
 800a828:	33333303 	.word	0x33333303
 800a82c:	3fe33333 	.word	0x3fe33333
 800a830:	40080000 	.word	0x40080000
 800a834:	3feec709 	.word	0x3feec709
 800a838:	dc3a03fd 	.word	0xdc3a03fd
 800a83c:	145b01f5 	.word	0x145b01f5
 800a840:	be3e2fe0 	.word	0xbe3e2fe0
 800a844:	0800f5e8 	.word	0x0800f5e8
 800a848:	0800f5d8 	.word	0x0800f5d8
 800a84c:	4a90      	ldr	r2, [pc, #576]	; (800aa90 <__ieee754_pow+0x9b4>)
 800a84e:	4b91      	ldr	r3, [pc, #580]	; (800aa94 <__ieee754_pow+0x9b8>)
 800a850:	9804      	ldr	r0, [sp, #16]
 800a852:	9905      	ldr	r1, [sp, #20]
 800a854:	f7f6 fcfc 	bl	8001250 <__aeabi_dadd>
 800a858:	0032      	movs	r2, r6
 800a85a:	9002      	str	r0, [sp, #8]
 800a85c:	9103      	str	r1, [sp, #12]
 800a85e:	003b      	movs	r3, r7
 800a860:	0028      	movs	r0, r5
 800a862:	0021      	movs	r1, r4
 800a864:	f7f7 fe9e 	bl	80025a4 <__aeabi_dsub>
 800a868:	0002      	movs	r2, r0
 800a86a:	000b      	movs	r3, r1
 800a86c:	9802      	ldr	r0, [sp, #8]
 800a86e:	9903      	ldr	r1, [sp, #12]
 800a870:	f7f5 fe02 	bl	8000478 <__aeabi_dcmpgt>
 800a874:	2800      	cmp	r0, #0
 800a876:	d000      	beq.n	800a87a <__ieee754_pow+0x79e>
 800a878:	e60f      	b.n	800a49a <__ieee754_pow+0x3be>
 800a87a:	2100      	movs	r1, #0
 800a87c:	4a86      	ldr	r2, [pc, #536]	; (800aa98 <__ieee754_pow+0x9bc>)
 800a87e:	0063      	lsls	r3, r4, #1
 800a880:	085b      	lsrs	r3, r3, #1
 800a882:	9102      	str	r1, [sp, #8]
 800a884:	4293      	cmp	r3, r2
 800a886:	dd25      	ble.n	800a8d4 <__ieee754_pow+0x7f8>
 800a888:	4a84      	ldr	r2, [pc, #528]	; (800aa9c <__ieee754_pow+0x9c0>)
 800a88a:	151b      	asrs	r3, r3, #20
 800a88c:	189b      	adds	r3, r3, r2
 800a88e:	2280      	movs	r2, #128	; 0x80
 800a890:	0352      	lsls	r2, r2, #13
 800a892:	4694      	mov	ip, r2
 800a894:	411a      	asrs	r2, r3
 800a896:	1914      	adds	r4, r2, r4
 800a898:	4b81      	ldr	r3, [pc, #516]	; (800aaa0 <__ieee754_pow+0x9c4>)
 800a89a:	0060      	lsls	r0, r4, #1
 800a89c:	4d81      	ldr	r5, [pc, #516]	; (800aaa4 <__ieee754_pow+0x9c8>)
 800a89e:	0d40      	lsrs	r0, r0, #21
 800a8a0:	18c0      	adds	r0, r0, r3
 800a8a2:	4105      	asrs	r5, r0
 800a8a4:	0021      	movs	r1, r4
 800a8a6:	43a9      	bics	r1, r5
 800a8a8:	000b      	movs	r3, r1
 800a8aa:	4661      	mov	r1, ip
 800a8ac:	0324      	lsls	r4, r4, #12
 800a8ae:	0b24      	lsrs	r4, r4, #12
 800a8b0:	4321      	orrs	r1, r4
 800a8b2:	2414      	movs	r4, #20
 800a8b4:	1a20      	subs	r0, r4, r0
 800a8b6:	4101      	asrs	r1, r0
 800a8b8:	9102      	str	r1, [sp, #8]
 800a8ba:	9908      	ldr	r1, [sp, #32]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	2900      	cmp	r1, #0
 800a8c0:	da02      	bge.n	800a8c8 <__ieee754_pow+0x7ec>
 800a8c2:	9902      	ldr	r1, [sp, #8]
 800a8c4:	4249      	negs	r1, r1
 800a8c6:	9102      	str	r1, [sp, #8]
 800a8c8:	0030      	movs	r0, r6
 800a8ca:	0039      	movs	r1, r7
 800a8cc:	f7f7 fe6a 	bl	80025a4 <__aeabi_dsub>
 800a8d0:	9006      	str	r0, [sp, #24]
 800a8d2:	9107      	str	r1, [sp, #28]
 800a8d4:	9a04      	ldr	r2, [sp, #16]
 800a8d6:	9b05      	ldr	r3, [sp, #20]
 800a8d8:	9806      	ldr	r0, [sp, #24]
 800a8da:	9907      	ldr	r1, [sp, #28]
 800a8dc:	2600      	movs	r6, #0
 800a8de:	f7f6 fcb7 	bl	8001250 <__aeabi_dadd>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	0030      	movs	r0, r6
 800a8e6:	4b70      	ldr	r3, [pc, #448]	; (800aaa8 <__ieee754_pow+0x9cc>)
 800a8e8:	000f      	movs	r7, r1
 800a8ea:	f7f7 fbef 	bl	80020cc <__aeabi_dmul>
 800a8ee:	9a06      	ldr	r2, [sp, #24]
 800a8f0:	9b07      	ldr	r3, [sp, #28]
 800a8f2:	9008      	str	r0, [sp, #32]
 800a8f4:	9109      	str	r1, [sp, #36]	; 0x24
 800a8f6:	0030      	movs	r0, r6
 800a8f8:	0039      	movs	r1, r7
 800a8fa:	f7f7 fe53 	bl	80025a4 <__aeabi_dsub>
 800a8fe:	0002      	movs	r2, r0
 800a900:	000b      	movs	r3, r1
 800a902:	9804      	ldr	r0, [sp, #16]
 800a904:	9905      	ldr	r1, [sp, #20]
 800a906:	f7f7 fe4d 	bl	80025a4 <__aeabi_dsub>
 800a90a:	4a68      	ldr	r2, [pc, #416]	; (800aaac <__ieee754_pow+0x9d0>)
 800a90c:	4b68      	ldr	r3, [pc, #416]	; (800aab0 <__ieee754_pow+0x9d4>)
 800a90e:	f7f7 fbdd 	bl	80020cc <__aeabi_dmul>
 800a912:	4a68      	ldr	r2, [pc, #416]	; (800aab4 <__ieee754_pow+0x9d8>)
 800a914:	0004      	movs	r4, r0
 800a916:	000d      	movs	r5, r1
 800a918:	0030      	movs	r0, r6
 800a91a:	0039      	movs	r1, r7
 800a91c:	4b66      	ldr	r3, [pc, #408]	; (800aab8 <__ieee754_pow+0x9dc>)
 800a91e:	f7f7 fbd5 	bl	80020cc <__aeabi_dmul>
 800a922:	0002      	movs	r2, r0
 800a924:	000b      	movs	r3, r1
 800a926:	0020      	movs	r0, r4
 800a928:	0029      	movs	r1, r5
 800a92a:	f7f6 fc91 	bl	8001250 <__aeabi_dadd>
 800a92e:	0004      	movs	r4, r0
 800a930:	000d      	movs	r5, r1
 800a932:	0002      	movs	r2, r0
 800a934:	000b      	movs	r3, r1
 800a936:	9808      	ldr	r0, [sp, #32]
 800a938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a93a:	f7f6 fc89 	bl	8001250 <__aeabi_dadd>
 800a93e:	9a08      	ldr	r2, [sp, #32]
 800a940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a942:	0006      	movs	r6, r0
 800a944:	000f      	movs	r7, r1
 800a946:	f7f7 fe2d 	bl	80025a4 <__aeabi_dsub>
 800a94a:	0002      	movs	r2, r0
 800a94c:	000b      	movs	r3, r1
 800a94e:	0020      	movs	r0, r4
 800a950:	0029      	movs	r1, r5
 800a952:	f7f7 fe27 	bl	80025a4 <__aeabi_dsub>
 800a956:	0032      	movs	r2, r6
 800a958:	9004      	str	r0, [sp, #16]
 800a95a:	9105      	str	r1, [sp, #20]
 800a95c:	003b      	movs	r3, r7
 800a95e:	0030      	movs	r0, r6
 800a960:	0039      	movs	r1, r7
 800a962:	f7f7 fbb3 	bl	80020cc <__aeabi_dmul>
 800a966:	0004      	movs	r4, r0
 800a968:	000d      	movs	r5, r1
 800a96a:	4a54      	ldr	r2, [pc, #336]	; (800aabc <__ieee754_pow+0x9e0>)
 800a96c:	4b54      	ldr	r3, [pc, #336]	; (800aac0 <__ieee754_pow+0x9e4>)
 800a96e:	f7f7 fbad 	bl	80020cc <__aeabi_dmul>
 800a972:	4a54      	ldr	r2, [pc, #336]	; (800aac4 <__ieee754_pow+0x9e8>)
 800a974:	4b54      	ldr	r3, [pc, #336]	; (800aac8 <__ieee754_pow+0x9ec>)
 800a976:	f7f7 fe15 	bl	80025a4 <__aeabi_dsub>
 800a97a:	0022      	movs	r2, r4
 800a97c:	002b      	movs	r3, r5
 800a97e:	f7f7 fba5 	bl	80020cc <__aeabi_dmul>
 800a982:	4a52      	ldr	r2, [pc, #328]	; (800aacc <__ieee754_pow+0x9f0>)
 800a984:	4b52      	ldr	r3, [pc, #328]	; (800aad0 <__ieee754_pow+0x9f4>)
 800a986:	f7f6 fc63 	bl	8001250 <__aeabi_dadd>
 800a98a:	0022      	movs	r2, r4
 800a98c:	002b      	movs	r3, r5
 800a98e:	f7f7 fb9d 	bl	80020cc <__aeabi_dmul>
 800a992:	4a50      	ldr	r2, [pc, #320]	; (800aad4 <__ieee754_pow+0x9f8>)
 800a994:	4b50      	ldr	r3, [pc, #320]	; (800aad8 <__ieee754_pow+0x9fc>)
 800a996:	f7f7 fe05 	bl	80025a4 <__aeabi_dsub>
 800a99a:	0022      	movs	r2, r4
 800a99c:	002b      	movs	r3, r5
 800a99e:	f7f7 fb95 	bl	80020cc <__aeabi_dmul>
 800a9a2:	4a4e      	ldr	r2, [pc, #312]	; (800aadc <__ieee754_pow+0xa00>)
 800a9a4:	4b4e      	ldr	r3, [pc, #312]	; (800aae0 <__ieee754_pow+0xa04>)
 800a9a6:	f7f6 fc53 	bl	8001250 <__aeabi_dadd>
 800a9aa:	0022      	movs	r2, r4
 800a9ac:	002b      	movs	r3, r5
 800a9ae:	f7f7 fb8d 	bl	80020cc <__aeabi_dmul>
 800a9b2:	0002      	movs	r2, r0
 800a9b4:	000b      	movs	r3, r1
 800a9b6:	0030      	movs	r0, r6
 800a9b8:	0039      	movs	r1, r7
 800a9ba:	f7f7 fdf3 	bl	80025a4 <__aeabi_dsub>
 800a9be:	0004      	movs	r4, r0
 800a9c0:	000d      	movs	r5, r1
 800a9c2:	0002      	movs	r2, r0
 800a9c4:	000b      	movs	r3, r1
 800a9c6:	0030      	movs	r0, r6
 800a9c8:	0039      	movs	r1, r7
 800a9ca:	f7f7 fb7f 	bl	80020cc <__aeabi_dmul>
 800a9ce:	2380      	movs	r3, #128	; 0x80
 800a9d0:	9006      	str	r0, [sp, #24]
 800a9d2:	9107      	str	r1, [sp, #28]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	0020      	movs	r0, r4
 800a9d8:	0029      	movs	r1, r5
 800a9da:	05db      	lsls	r3, r3, #23
 800a9dc:	f7f7 fde2 	bl	80025a4 <__aeabi_dsub>
 800a9e0:	0002      	movs	r2, r0
 800a9e2:	000b      	movs	r3, r1
 800a9e4:	9806      	ldr	r0, [sp, #24]
 800a9e6:	9907      	ldr	r1, [sp, #28]
 800a9e8:	f7f6 ff6e 	bl	80018c8 <__aeabi_ddiv>
 800a9ec:	9a04      	ldr	r2, [sp, #16]
 800a9ee:	9b05      	ldr	r3, [sp, #20]
 800a9f0:	0004      	movs	r4, r0
 800a9f2:	000d      	movs	r5, r1
 800a9f4:	0030      	movs	r0, r6
 800a9f6:	0039      	movs	r1, r7
 800a9f8:	f7f7 fb68 	bl	80020cc <__aeabi_dmul>
 800a9fc:	9a04      	ldr	r2, [sp, #16]
 800a9fe:	9b05      	ldr	r3, [sp, #20]
 800aa00:	f7f6 fc26 	bl	8001250 <__aeabi_dadd>
 800aa04:	0002      	movs	r2, r0
 800aa06:	000b      	movs	r3, r1
 800aa08:	0020      	movs	r0, r4
 800aa0a:	0029      	movs	r1, r5
 800aa0c:	f7f7 fdca 	bl	80025a4 <__aeabi_dsub>
 800aa10:	0032      	movs	r2, r6
 800aa12:	003b      	movs	r3, r7
 800aa14:	f7f7 fdc6 	bl	80025a4 <__aeabi_dsub>
 800aa18:	0002      	movs	r2, r0
 800aa1a:	000b      	movs	r3, r1
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	4931      	ldr	r1, [pc, #196]	; (800aae4 <__ieee754_pow+0xa08>)
 800aa20:	f7f7 fdc0 	bl	80025a4 <__aeabi_dsub>
 800aa24:	9b02      	ldr	r3, [sp, #8]
 800aa26:	051b      	lsls	r3, r3, #20
 800aa28:	185b      	adds	r3, r3, r1
 800aa2a:	151a      	asrs	r2, r3, #20
 800aa2c:	2a00      	cmp	r2, #0
 800aa2e:	dc25      	bgt.n	800aa7c <__ieee754_pow+0x9a0>
 800aa30:	9a02      	ldr	r2, [sp, #8]
 800aa32:	f000 fa8b 	bl	800af4c <scalbn>
 800aa36:	9a00      	ldr	r2, [sp, #0]
 800aa38:	9b01      	ldr	r3, [sp, #4]
 800aa3a:	f7ff fc33 	bl	800a2a4 <__ieee754_pow+0x1c8>
 800aa3e:	4a2a      	ldr	r2, [pc, #168]	; (800aae8 <__ieee754_pow+0xa0c>)
 800aa40:	004b      	lsls	r3, r1, #1
 800aa42:	085b      	lsrs	r3, r3, #1
 800aa44:	4293      	cmp	r3, r2
 800aa46:	dc00      	bgt.n	800aa4a <__ieee754_pow+0x96e>
 800aa48:	e717      	b.n	800a87a <__ieee754_pow+0x79e>
 800aa4a:	4b28      	ldr	r3, [pc, #160]	; (800aaec <__ieee754_pow+0xa10>)
 800aa4c:	18cb      	adds	r3, r1, r3
 800aa4e:	4303      	orrs	r3, r0
 800aa50:	d008      	beq.n	800aa64 <__ieee754_pow+0x988>
 800aa52:	9800      	ldr	r0, [sp, #0]
 800aa54:	9901      	ldr	r1, [sp, #4]
 800aa56:	2300      	movs	r3, #0
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f7f5 fcf9 	bl	8000450 <__aeabi_dcmplt>
 800aa5e:	1e43      	subs	r3, r0, #1
 800aa60:	4198      	sbcs	r0, r3
 800aa62:	e462      	b.n	800a32a <__ieee754_pow+0x24e>
 800aa64:	0032      	movs	r2, r6
 800aa66:	003b      	movs	r3, r7
 800aa68:	f7f7 fd9c 	bl	80025a4 <__aeabi_dsub>
 800aa6c:	9a04      	ldr	r2, [sp, #16]
 800aa6e:	9b05      	ldr	r3, [sp, #20]
 800aa70:	f7f5 fd0c 	bl	800048c <__aeabi_dcmpge>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d100      	bne.n	800aa7a <__ieee754_pow+0x99e>
 800aa78:	e6ff      	b.n	800a87a <__ieee754_pow+0x79e>
 800aa7a:	e7ea      	b.n	800aa52 <__ieee754_pow+0x976>
 800aa7c:	0019      	movs	r1, r3
 800aa7e:	e7da      	b.n	800aa36 <__ieee754_pow+0x95a>
 800aa80:	2300      	movs	r3, #0
 800aa82:	4c18      	ldr	r4, [pc, #96]	; (800aae4 <__ieee754_pow+0xa08>)
 800aa84:	f7ff fbf1 	bl	800a26a <__ieee754_pow+0x18e>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	2400      	movs	r4, #0
 800aa8c:	f7ff fbed 	bl	800a26a <__ieee754_pow+0x18e>
 800aa90:	652b82fe 	.word	0x652b82fe
 800aa94:	3c971547 	.word	0x3c971547
 800aa98:	3fe00000 	.word	0x3fe00000
 800aa9c:	fffffc02 	.word	0xfffffc02
 800aaa0:	fffffc01 	.word	0xfffffc01
 800aaa4:	000fffff 	.word	0x000fffff
 800aaa8:	3fe62e43 	.word	0x3fe62e43
 800aaac:	fefa39ef 	.word	0xfefa39ef
 800aab0:	3fe62e42 	.word	0x3fe62e42
 800aab4:	0ca86c39 	.word	0x0ca86c39
 800aab8:	be205c61 	.word	0xbe205c61
 800aabc:	72bea4d0 	.word	0x72bea4d0
 800aac0:	3e663769 	.word	0x3e663769
 800aac4:	c5d26bf1 	.word	0xc5d26bf1
 800aac8:	3ebbbd41 	.word	0x3ebbbd41
 800aacc:	af25de2c 	.word	0xaf25de2c
 800aad0:	3f11566a 	.word	0x3f11566a
 800aad4:	16bebd93 	.word	0x16bebd93
 800aad8:	3f66c16c 	.word	0x3f66c16c
 800aadc:	5555553e 	.word	0x5555553e
 800aae0:	3fc55555 	.word	0x3fc55555
 800aae4:	3ff00000 	.word	0x3ff00000
 800aae8:	4090cbff 	.word	0x4090cbff
 800aaec:	3f6f3400 	.word	0x3f6f3400

0800aaf0 <__ieee754_sqrt>:
 800aaf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaf2:	000b      	movs	r3, r1
 800aaf4:	000c      	movs	r4, r1
 800aaf6:	4956      	ldr	r1, [pc, #344]	; (800ac50 <__ieee754_sqrt+0x160>)
 800aaf8:	0005      	movs	r5, r0
 800aafa:	0002      	movs	r2, r0
 800aafc:	0008      	movs	r0, r1
 800aafe:	b085      	sub	sp, #20
 800ab00:	4020      	ands	r0, r4
 800ab02:	4288      	cmp	r0, r1
 800ab04:	d10f      	bne.n	800ab26 <__ieee754_sqrt+0x36>
 800ab06:	0028      	movs	r0, r5
 800ab08:	0021      	movs	r1, r4
 800ab0a:	f7f7 fadf 	bl	80020cc <__aeabi_dmul>
 800ab0e:	0002      	movs	r2, r0
 800ab10:	000b      	movs	r3, r1
 800ab12:	0028      	movs	r0, r5
 800ab14:	0021      	movs	r1, r4
 800ab16:	f7f6 fb9b 	bl	8001250 <__aeabi_dadd>
 800ab1a:	0005      	movs	r5, r0
 800ab1c:	000c      	movs	r4, r1
 800ab1e:	0028      	movs	r0, r5
 800ab20:	0021      	movs	r1, r4
 800ab22:	b005      	add	sp, #20
 800ab24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab26:	2c00      	cmp	r4, #0
 800ab28:	dc10      	bgt.n	800ab4c <__ieee754_sqrt+0x5c>
 800ab2a:	0061      	lsls	r1, r4, #1
 800ab2c:	0849      	lsrs	r1, r1, #1
 800ab2e:	4329      	orrs	r1, r5
 800ab30:	d0f5      	beq.n	800ab1e <__ieee754_sqrt+0x2e>
 800ab32:	2100      	movs	r1, #0
 800ab34:	428c      	cmp	r4, r1
 800ab36:	d100      	bne.n	800ab3a <__ieee754_sqrt+0x4a>
 800ab38:	e080      	b.n	800ac3c <__ieee754_sqrt+0x14c>
 800ab3a:	0028      	movs	r0, r5
 800ab3c:	0021      	movs	r1, r4
 800ab3e:	f7f7 fd31 	bl	80025a4 <__aeabi_dsub>
 800ab42:	0002      	movs	r2, r0
 800ab44:	000b      	movs	r3, r1
 800ab46:	f7f6 febf 	bl	80018c8 <__aeabi_ddiv>
 800ab4a:	e7e6      	b.n	800ab1a <__ieee754_sqrt+0x2a>
 800ab4c:	1521      	asrs	r1, r4, #20
 800ab4e:	d075      	beq.n	800ac3c <__ieee754_sqrt+0x14c>
 800ab50:	4840      	ldr	r0, [pc, #256]	; (800ac54 <__ieee754_sqrt+0x164>)
 800ab52:	031b      	lsls	r3, r3, #12
 800ab54:	180c      	adds	r4, r1, r0
 800ab56:	2080      	movs	r0, #128	; 0x80
 800ab58:	0b1b      	lsrs	r3, r3, #12
 800ab5a:	0340      	lsls	r0, r0, #13
 800ab5c:	4303      	orrs	r3, r0
 800ab5e:	07c9      	lsls	r1, r1, #31
 800ab60:	d403      	bmi.n	800ab6a <__ieee754_sqrt+0x7a>
 800ab62:	0fd1      	lsrs	r1, r2, #31
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	185b      	adds	r3, r3, r1
 800ab68:	0052      	lsls	r2, r2, #1
 800ab6a:	1061      	asrs	r1, r4, #1
 800ab6c:	2400      	movs	r4, #0
 800ab6e:	9103      	str	r1, [sp, #12]
 800ab70:	005b      	lsls	r3, r3, #1
 800ab72:	0fd1      	lsrs	r1, r2, #31
 800ab74:	185b      	adds	r3, r3, r1
 800ab76:	2180      	movs	r1, #128	; 0x80
 800ab78:	2516      	movs	r5, #22
 800ab7a:	0020      	movs	r0, r4
 800ab7c:	0052      	lsls	r2, r2, #1
 800ab7e:	0389      	lsls	r1, r1, #14
 800ab80:	1846      	adds	r6, r0, r1
 800ab82:	429e      	cmp	r6, r3
 800ab84:	dc02      	bgt.n	800ab8c <__ieee754_sqrt+0x9c>
 800ab86:	1870      	adds	r0, r6, r1
 800ab88:	1b9b      	subs	r3, r3, r6
 800ab8a:	1864      	adds	r4, r4, r1
 800ab8c:	0fd6      	lsrs	r6, r2, #31
 800ab8e:	005b      	lsls	r3, r3, #1
 800ab90:	3d01      	subs	r5, #1
 800ab92:	18f3      	adds	r3, r6, r3
 800ab94:	0052      	lsls	r2, r2, #1
 800ab96:	0849      	lsrs	r1, r1, #1
 800ab98:	2d00      	cmp	r5, #0
 800ab9a:	d1f1      	bne.n	800ab80 <__ieee754_sqrt+0x90>
 800ab9c:	2620      	movs	r6, #32
 800ab9e:	2780      	movs	r7, #128	; 0x80
 800aba0:	0029      	movs	r1, r5
 800aba2:	9601      	str	r6, [sp, #4]
 800aba4:	063f      	lsls	r7, r7, #24
 800aba6:	197e      	adds	r6, r7, r5
 800aba8:	46b4      	mov	ip, r6
 800abaa:	4283      	cmp	r3, r0
 800abac:	dc02      	bgt.n	800abb4 <__ieee754_sqrt+0xc4>
 800abae:	d114      	bne.n	800abda <__ieee754_sqrt+0xea>
 800abb0:	4296      	cmp	r6, r2
 800abb2:	d812      	bhi.n	800abda <__ieee754_sqrt+0xea>
 800abb4:	4665      	mov	r5, ip
 800abb6:	4666      	mov	r6, ip
 800abb8:	19ed      	adds	r5, r5, r7
 800abba:	9002      	str	r0, [sp, #8]
 800abbc:	2e00      	cmp	r6, #0
 800abbe:	da03      	bge.n	800abc8 <__ieee754_sqrt+0xd8>
 800abc0:	43ee      	mvns	r6, r5
 800abc2:	0ff6      	lsrs	r6, r6, #31
 800abc4:	1986      	adds	r6, r0, r6
 800abc6:	9602      	str	r6, [sp, #8]
 800abc8:	1a1b      	subs	r3, r3, r0
 800abca:	4562      	cmp	r2, ip
 800abcc:	4180      	sbcs	r0, r0
 800abce:	4240      	negs	r0, r0
 800abd0:	1a1b      	subs	r3, r3, r0
 800abd2:	4660      	mov	r0, ip
 800abd4:	1a12      	subs	r2, r2, r0
 800abd6:	9802      	ldr	r0, [sp, #8]
 800abd8:	19c9      	adds	r1, r1, r7
 800abda:	0fd6      	lsrs	r6, r2, #31
 800abdc:	005b      	lsls	r3, r3, #1
 800abde:	199b      	adds	r3, r3, r6
 800abe0:	9e01      	ldr	r6, [sp, #4]
 800abe2:	0052      	lsls	r2, r2, #1
 800abe4:	3e01      	subs	r6, #1
 800abe6:	087f      	lsrs	r7, r7, #1
 800abe8:	9601      	str	r6, [sp, #4]
 800abea:	2e00      	cmp	r6, #0
 800abec:	d1db      	bne.n	800aba6 <__ieee754_sqrt+0xb6>
 800abee:	4313      	orrs	r3, r2
 800abf0:	d003      	beq.n	800abfa <__ieee754_sqrt+0x10a>
 800abf2:	1c4b      	adds	r3, r1, #1
 800abf4:	d127      	bne.n	800ac46 <__ieee754_sqrt+0x156>
 800abf6:	0031      	movs	r1, r6
 800abf8:	3401      	adds	r4, #1
 800abfa:	4b17      	ldr	r3, [pc, #92]	; (800ac58 <__ieee754_sqrt+0x168>)
 800abfc:	1060      	asrs	r0, r4, #1
 800abfe:	18c0      	adds	r0, r0, r3
 800ac00:	0849      	lsrs	r1, r1, #1
 800ac02:	07e3      	lsls	r3, r4, #31
 800ac04:	d502      	bpl.n	800ac0c <__ieee754_sqrt+0x11c>
 800ac06:	2380      	movs	r3, #128	; 0x80
 800ac08:	061b      	lsls	r3, r3, #24
 800ac0a:	4319      	orrs	r1, r3
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	000d      	movs	r5, r1
 800ac10:	051c      	lsls	r4, r3, #20
 800ac12:	1823      	adds	r3, r4, r0
 800ac14:	001c      	movs	r4, r3
 800ac16:	e782      	b.n	800ab1e <__ieee754_sqrt+0x2e>
 800ac18:	0ad3      	lsrs	r3, r2, #11
 800ac1a:	3815      	subs	r0, #21
 800ac1c:	0552      	lsls	r2, r2, #21
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d0fa      	beq.n	800ac18 <__ieee754_sqrt+0x128>
 800ac22:	2480      	movs	r4, #128	; 0x80
 800ac24:	0364      	lsls	r4, r4, #13
 800ac26:	4223      	tst	r3, r4
 800ac28:	d00a      	beq.n	800ac40 <__ieee754_sqrt+0x150>
 800ac2a:	2420      	movs	r4, #32
 800ac2c:	0016      	movs	r6, r2
 800ac2e:	1a64      	subs	r4, r4, r1
 800ac30:	40e6      	lsrs	r6, r4
 800ac32:	1e4d      	subs	r5, r1, #1
 800ac34:	408a      	lsls	r2, r1
 800ac36:	4333      	orrs	r3, r6
 800ac38:	1b41      	subs	r1, r0, r5
 800ac3a:	e789      	b.n	800ab50 <__ieee754_sqrt+0x60>
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	e7ee      	b.n	800ac1e <__ieee754_sqrt+0x12e>
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	3101      	adds	r1, #1
 800ac44:	e7ef      	b.n	800ac26 <__ieee754_sqrt+0x136>
 800ac46:	2301      	movs	r3, #1
 800ac48:	3101      	adds	r1, #1
 800ac4a:	4399      	bics	r1, r3
 800ac4c:	e7d5      	b.n	800abfa <__ieee754_sqrt+0x10a>
 800ac4e:	46c0      	nop			; (mov r8, r8)
 800ac50:	7ff00000 	.word	0x7ff00000
 800ac54:	fffffc01 	.word	0xfffffc01
 800ac58:	3fe00000 	.word	0x3fe00000

0800ac5c <__ieee754_logf>:
 800ac5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac5e:	0003      	movs	r3, r0
 800ac60:	b085      	sub	sp, #20
 800ac62:	0042      	lsls	r2, r0, #1
 800ac64:	d106      	bne.n	800ac74 <__ieee754_logf+0x18>
 800ac66:	20cc      	movs	r0, #204	; 0xcc
 800ac68:	2100      	movs	r1, #0
 800ac6a:	0600      	lsls	r0, r0, #24
 800ac6c:	f7f5 fdf0 	bl	8000850 <__aeabi_fdiv>
 800ac70:	b005      	add	sp, #20
 800ac72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac74:	2800      	cmp	r0, #0
 800ac76:	da04      	bge.n	800ac82 <__ieee754_logf+0x26>
 800ac78:	1c01      	adds	r1, r0, #0
 800ac7a:	f7f6 f8d7 	bl	8000e2c <__aeabi_fsub>
 800ac7e:	2100      	movs	r1, #0
 800ac80:	e7f4      	b.n	800ac6c <__ieee754_logf+0x10>
 800ac82:	22ff      	movs	r2, #255	; 0xff
 800ac84:	1c01      	adds	r1, r0, #0
 800ac86:	05d2      	lsls	r2, r2, #23
 800ac88:	4290      	cmp	r0, r2
 800ac8a:	da3d      	bge.n	800ad08 <__ieee754_logf+0xac>
 800ac8c:	2180      	movs	r1, #128	; 0x80
 800ac8e:	2200      	movs	r2, #0
 800ac90:	0409      	lsls	r1, r1, #16
 800ac92:	4288      	cmp	r0, r1
 800ac94:	da06      	bge.n	800aca4 <__ieee754_logf+0x48>
 800ac96:	2198      	movs	r1, #152	; 0x98
 800ac98:	05c9      	lsls	r1, r1, #23
 800ac9a:	f7f5 ffa1 	bl	8000be0 <__aeabi_fmul>
 800ac9e:	2219      	movs	r2, #25
 800aca0:	0003      	movs	r3, r0
 800aca2:	4252      	negs	r2, r2
 800aca4:	15dd      	asrs	r5, r3, #23
 800aca6:	3d7f      	subs	r5, #127	; 0x7f
 800aca8:	18ad      	adds	r5, r5, r2
 800acaa:	025b      	lsls	r3, r3, #9
 800acac:	4a78      	ldr	r2, [pc, #480]	; (800ae90 <__ieee754_logf+0x234>)
 800acae:	0a5b      	lsrs	r3, r3, #9
 800acb0:	1898      	adds	r0, r3, r2
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	2380      	movs	r3, #128	; 0x80
 800acb6:	041b      	lsls	r3, r3, #16
 800acb8:	4003      	ands	r3, r0
 800acba:	20fe      	movs	r0, #254	; 0xfe
 800acbc:	21fe      	movs	r1, #254	; 0xfe
 800acbe:	0580      	lsls	r0, r0, #22
 800acc0:	15da      	asrs	r2, r3, #23
 800acc2:	4058      	eors	r0, r3
 800acc4:	9b00      	ldr	r3, [sp, #0]
 800acc6:	0589      	lsls	r1, r1, #22
 800acc8:	4318      	orrs	r0, r3
 800acca:	1955      	adds	r5, r2, r5
 800accc:	f7f6 f8ae 	bl	8000e2c <__aeabi_fsub>
 800acd0:	9a00      	ldr	r2, [sp, #0]
 800acd2:	4b70      	ldr	r3, [pc, #448]	; (800ae94 <__ieee754_logf+0x238>)
 800acd4:	320f      	adds	r2, #15
 800acd6:	1c04      	adds	r4, r0, #0
 800acd8:	421a      	tst	r2, r3
 800acda:	d147      	bne.n	800ad6c <__ieee754_logf+0x110>
 800acdc:	2100      	movs	r1, #0
 800acde:	f7f5 fbeb 	bl	80004b8 <__aeabi_fcmpeq>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d013      	beq.n	800ad0e <__ieee754_logf+0xb2>
 800ace6:	2000      	movs	r0, #0
 800ace8:	2d00      	cmp	r5, #0
 800acea:	d0c1      	beq.n	800ac70 <__ieee754_logf+0x14>
 800acec:	0028      	movs	r0, r5
 800acee:	f7f6 fa61 	bl	80011b4 <__aeabi_i2f>
 800acf2:	4969      	ldr	r1, [pc, #420]	; (800ae98 <__ieee754_logf+0x23c>)
 800acf4:	1c04      	adds	r4, r0, #0
 800acf6:	f7f5 ff73 	bl	8000be0 <__aeabi_fmul>
 800acfa:	4968      	ldr	r1, [pc, #416]	; (800ae9c <__ieee754_logf+0x240>)
 800acfc:	1c05      	adds	r5, r0, #0
 800acfe:	1c20      	adds	r0, r4, #0
 800ad00:	f7f5 ff6e 	bl	8000be0 <__aeabi_fmul>
 800ad04:	1c01      	adds	r1, r0, #0
 800ad06:	1c28      	adds	r0, r5, #0
 800ad08:	f7f5 fc04 	bl	8000514 <__aeabi_fadd>
 800ad0c:	e7b0      	b.n	800ac70 <__ieee754_logf+0x14>
 800ad0e:	4964      	ldr	r1, [pc, #400]	; (800aea0 <__ieee754_logf+0x244>)
 800ad10:	1c20      	adds	r0, r4, #0
 800ad12:	f7f5 ff65 	bl	8000be0 <__aeabi_fmul>
 800ad16:	1c01      	adds	r1, r0, #0
 800ad18:	20fc      	movs	r0, #252	; 0xfc
 800ad1a:	0580      	lsls	r0, r0, #22
 800ad1c:	f7f6 f886 	bl	8000e2c <__aeabi_fsub>
 800ad20:	1c21      	adds	r1, r4, #0
 800ad22:	1c06      	adds	r6, r0, #0
 800ad24:	1c20      	adds	r0, r4, #0
 800ad26:	f7f5 ff5b 	bl	8000be0 <__aeabi_fmul>
 800ad2a:	1c01      	adds	r1, r0, #0
 800ad2c:	1c30      	adds	r0, r6, #0
 800ad2e:	f7f5 ff57 	bl	8000be0 <__aeabi_fmul>
 800ad32:	1c06      	adds	r6, r0, #0
 800ad34:	2d00      	cmp	r5, #0
 800ad36:	d101      	bne.n	800ad3c <__ieee754_logf+0xe0>
 800ad38:	1c31      	adds	r1, r6, #0
 800ad3a:	e07c      	b.n	800ae36 <__ieee754_logf+0x1da>
 800ad3c:	0028      	movs	r0, r5
 800ad3e:	f7f6 fa39 	bl	80011b4 <__aeabi_i2f>
 800ad42:	4955      	ldr	r1, [pc, #340]	; (800ae98 <__ieee754_logf+0x23c>)
 800ad44:	1c05      	adds	r5, r0, #0
 800ad46:	f7f5 ff4b 	bl	8000be0 <__aeabi_fmul>
 800ad4a:	4954      	ldr	r1, [pc, #336]	; (800ae9c <__ieee754_logf+0x240>)
 800ad4c:	1c07      	adds	r7, r0, #0
 800ad4e:	1c28      	adds	r0, r5, #0
 800ad50:	f7f5 ff46 	bl	8000be0 <__aeabi_fmul>
 800ad54:	1c01      	adds	r1, r0, #0
 800ad56:	1c30      	adds	r0, r6, #0
 800ad58:	f7f6 f868 	bl	8000e2c <__aeabi_fsub>
 800ad5c:	1c21      	adds	r1, r4, #0
 800ad5e:	f7f6 f865 	bl	8000e2c <__aeabi_fsub>
 800ad62:	1c01      	adds	r1, r0, #0
 800ad64:	1c38      	adds	r0, r7, #0
 800ad66:	f7f6 f861 	bl	8000e2c <__aeabi_fsub>
 800ad6a:	e781      	b.n	800ac70 <__ieee754_logf+0x14>
 800ad6c:	2180      	movs	r1, #128	; 0x80
 800ad6e:	05c9      	lsls	r1, r1, #23
 800ad70:	f7f5 fbd0 	bl	8000514 <__aeabi_fadd>
 800ad74:	1c01      	adds	r1, r0, #0
 800ad76:	1c20      	adds	r0, r4, #0
 800ad78:	f7f5 fd6a 	bl	8000850 <__aeabi_fdiv>
 800ad7c:	9001      	str	r0, [sp, #4]
 800ad7e:	0028      	movs	r0, r5
 800ad80:	f7f6 fa18 	bl	80011b4 <__aeabi_i2f>
 800ad84:	9901      	ldr	r1, [sp, #4]
 800ad86:	9002      	str	r0, [sp, #8]
 800ad88:	1c08      	adds	r0, r1, #0
 800ad8a:	f7f5 ff29 	bl	8000be0 <__aeabi_fmul>
 800ad8e:	4a45      	ldr	r2, [pc, #276]	; (800aea4 <__ieee754_logf+0x248>)
 800ad90:	9b00      	ldr	r3, [sp, #0]
 800ad92:	4694      	mov	ip, r2
 800ad94:	1c01      	adds	r1, r0, #0
 800ad96:	4463      	add	r3, ip
 800ad98:	9303      	str	r3, [sp, #12]
 800ad9a:	1c07      	adds	r7, r0, #0
 800ad9c:	f7f5 ff20 	bl	8000be0 <__aeabi_fmul>
 800ada0:	4941      	ldr	r1, [pc, #260]	; (800aea8 <__ieee754_logf+0x24c>)
 800ada2:	1c06      	adds	r6, r0, #0
 800ada4:	f7f5 ff1c 	bl	8000be0 <__aeabi_fmul>
 800ada8:	4940      	ldr	r1, [pc, #256]	; (800aeac <__ieee754_logf+0x250>)
 800adaa:	f7f5 fbb3 	bl	8000514 <__aeabi_fadd>
 800adae:	1c31      	adds	r1, r6, #0
 800adb0:	f7f5 ff16 	bl	8000be0 <__aeabi_fmul>
 800adb4:	493e      	ldr	r1, [pc, #248]	; (800aeb0 <__ieee754_logf+0x254>)
 800adb6:	f7f5 fbad 	bl	8000514 <__aeabi_fadd>
 800adba:	1c31      	adds	r1, r6, #0
 800adbc:	f7f5 ff10 	bl	8000be0 <__aeabi_fmul>
 800adc0:	493c      	ldr	r1, [pc, #240]	; (800aeb4 <__ieee754_logf+0x258>)
 800adc2:	f7f5 fba7 	bl	8000514 <__aeabi_fadd>
 800adc6:	1c39      	adds	r1, r7, #0
 800adc8:	f7f5 ff0a 	bl	8000be0 <__aeabi_fmul>
 800adcc:	493a      	ldr	r1, [pc, #232]	; (800aeb8 <__ieee754_logf+0x25c>)
 800adce:	1c07      	adds	r7, r0, #0
 800add0:	1c30      	adds	r0, r6, #0
 800add2:	f7f5 ff05 	bl	8000be0 <__aeabi_fmul>
 800add6:	4939      	ldr	r1, [pc, #228]	; (800aebc <__ieee754_logf+0x260>)
 800add8:	f7f5 fb9c 	bl	8000514 <__aeabi_fadd>
 800addc:	1c31      	adds	r1, r6, #0
 800adde:	f7f5 feff 	bl	8000be0 <__aeabi_fmul>
 800ade2:	4937      	ldr	r1, [pc, #220]	; (800aec0 <__ieee754_logf+0x264>)
 800ade4:	f7f5 fb96 	bl	8000514 <__aeabi_fadd>
 800ade8:	1c31      	adds	r1, r6, #0
 800adea:	f7f5 fef9 	bl	8000be0 <__aeabi_fmul>
 800adee:	1c01      	adds	r1, r0, #0
 800adf0:	1c38      	adds	r0, r7, #0
 800adf2:	f7f5 fb8f 	bl	8000514 <__aeabi_fadd>
 800adf6:	9b00      	ldr	r3, [sp, #0]
 800adf8:	1c07      	adds	r7, r0, #0
 800adfa:	4832      	ldr	r0, [pc, #200]	; (800aec4 <__ieee754_logf+0x268>)
 800adfc:	1ac0      	subs	r0, r0, r3
 800adfe:	9b03      	ldr	r3, [sp, #12]
 800ae00:	4318      	orrs	r0, r3
 800ae02:	2800      	cmp	r0, #0
 800ae04:	dd2f      	ble.n	800ae66 <__ieee754_logf+0x20a>
 800ae06:	21fc      	movs	r1, #252	; 0xfc
 800ae08:	1c20      	adds	r0, r4, #0
 800ae0a:	0589      	lsls	r1, r1, #22
 800ae0c:	f7f5 fee8 	bl	8000be0 <__aeabi_fmul>
 800ae10:	1c21      	adds	r1, r4, #0
 800ae12:	f7f5 fee5 	bl	8000be0 <__aeabi_fmul>
 800ae16:	1c01      	adds	r1, r0, #0
 800ae18:	1c06      	adds	r6, r0, #0
 800ae1a:	1c38      	adds	r0, r7, #0
 800ae1c:	f7f5 fb7a 	bl	8000514 <__aeabi_fadd>
 800ae20:	9901      	ldr	r1, [sp, #4]
 800ae22:	f7f5 fedd 	bl	8000be0 <__aeabi_fmul>
 800ae26:	1c07      	adds	r7, r0, #0
 800ae28:	2d00      	cmp	r5, #0
 800ae2a:	d106      	bne.n	800ae3a <__ieee754_logf+0x1de>
 800ae2c:	1c01      	adds	r1, r0, #0
 800ae2e:	1c30      	adds	r0, r6, #0
 800ae30:	f7f5 fffc 	bl	8000e2c <__aeabi_fsub>
 800ae34:	1c01      	adds	r1, r0, #0
 800ae36:	1c20      	adds	r0, r4, #0
 800ae38:	e795      	b.n	800ad66 <__ieee754_logf+0x10a>
 800ae3a:	4917      	ldr	r1, [pc, #92]	; (800ae98 <__ieee754_logf+0x23c>)
 800ae3c:	9802      	ldr	r0, [sp, #8]
 800ae3e:	f7f5 fecf 	bl	8000be0 <__aeabi_fmul>
 800ae42:	4916      	ldr	r1, [pc, #88]	; (800ae9c <__ieee754_logf+0x240>)
 800ae44:	1c05      	adds	r5, r0, #0
 800ae46:	9802      	ldr	r0, [sp, #8]
 800ae48:	f7f5 feca 	bl	8000be0 <__aeabi_fmul>
 800ae4c:	1c39      	adds	r1, r7, #0
 800ae4e:	f7f5 fb61 	bl	8000514 <__aeabi_fadd>
 800ae52:	1c01      	adds	r1, r0, #0
 800ae54:	1c30      	adds	r0, r6, #0
 800ae56:	f7f5 ffe9 	bl	8000e2c <__aeabi_fsub>
 800ae5a:	1c21      	adds	r1, r4, #0
 800ae5c:	f7f5 ffe6 	bl	8000e2c <__aeabi_fsub>
 800ae60:	1c01      	adds	r1, r0, #0
 800ae62:	1c28      	adds	r0, r5, #0
 800ae64:	e77f      	b.n	800ad66 <__ieee754_logf+0x10a>
 800ae66:	1c39      	adds	r1, r7, #0
 800ae68:	1c20      	adds	r0, r4, #0
 800ae6a:	f7f5 ffdf 	bl	8000e2c <__aeabi_fsub>
 800ae6e:	9901      	ldr	r1, [sp, #4]
 800ae70:	f7f5 feb6 	bl	8000be0 <__aeabi_fmul>
 800ae74:	1c06      	adds	r6, r0, #0
 800ae76:	2d00      	cmp	r5, #0
 800ae78:	d100      	bne.n	800ae7c <__ieee754_logf+0x220>
 800ae7a:	e75d      	b.n	800ad38 <__ieee754_logf+0xdc>
 800ae7c:	4906      	ldr	r1, [pc, #24]	; (800ae98 <__ieee754_logf+0x23c>)
 800ae7e:	9802      	ldr	r0, [sp, #8]
 800ae80:	f7f5 feae 	bl	8000be0 <__aeabi_fmul>
 800ae84:	4905      	ldr	r1, [pc, #20]	; (800ae9c <__ieee754_logf+0x240>)
 800ae86:	1c05      	adds	r5, r0, #0
 800ae88:	9802      	ldr	r0, [sp, #8]
 800ae8a:	f7f5 fea9 	bl	8000be0 <__aeabi_fmul>
 800ae8e:	e7e0      	b.n	800ae52 <__ieee754_logf+0x1f6>
 800ae90:	004afb20 	.word	0x004afb20
 800ae94:	007ffff0 	.word	0x007ffff0
 800ae98:	3f317180 	.word	0x3f317180
 800ae9c:	3717f7d1 	.word	0x3717f7d1
 800aea0:	3eaaaaab 	.word	0x3eaaaaab
 800aea4:	ffcf5c30 	.word	0xffcf5c30
 800aea8:	3e178897 	.word	0x3e178897
 800aeac:	3e3a3325 	.word	0x3e3a3325
 800aeb0:	3e924925 	.word	0x3e924925
 800aeb4:	3f2aaaab 	.word	0x3f2aaaab
 800aeb8:	3e1cd04f 	.word	0x3e1cd04f
 800aebc:	3e638e29 	.word	0x3e638e29
 800aec0:	3ecccccd 	.word	0x3ecccccd
 800aec4:	0035c288 	.word	0x0035c288

0800aec8 <with_errno>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	000d      	movs	r5, r1
 800aecc:	0016      	movs	r6, r2
 800aece:	0004      	movs	r4, r0
 800aed0:	f7fb fe90 	bl	8006bf4 <__errno>
 800aed4:	0029      	movs	r1, r5
 800aed6:	6006      	str	r6, [r0, #0]
 800aed8:	0020      	movs	r0, r4
 800aeda:	bd70      	pop	{r4, r5, r6, pc}

0800aedc <xflow>:
 800aedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aede:	0015      	movs	r5, r2
 800aee0:	001c      	movs	r4, r3
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d010      	beq.n	800af08 <xflow+0x2c>
 800aee6:	2380      	movs	r3, #128	; 0x80
 800aee8:	0010      	movs	r0, r2
 800aeea:	061b      	lsls	r3, r3, #24
 800aeec:	18e1      	adds	r1, r4, r3
 800aeee:	9000      	str	r0, [sp, #0]
 800aef0:	9101      	str	r1, [sp, #4]
 800aef2:	9a00      	ldr	r2, [sp, #0]
 800aef4:	9b01      	ldr	r3, [sp, #4]
 800aef6:	0028      	movs	r0, r5
 800aef8:	0021      	movs	r1, r4
 800aefa:	f7f7 f8e7 	bl	80020cc <__aeabi_dmul>
 800aefe:	2222      	movs	r2, #34	; 0x22
 800af00:	f7ff ffe2 	bl	800aec8 <with_errno>
 800af04:	b003      	add	sp, #12
 800af06:	bd30      	pop	{r4, r5, pc}
 800af08:	0010      	movs	r0, r2
 800af0a:	0019      	movs	r1, r3
 800af0c:	e7ef      	b.n	800aeee <xflow+0x12>

0800af0e <__math_uflow>:
 800af0e:	2380      	movs	r3, #128	; 0x80
 800af10:	b510      	push	{r4, lr}
 800af12:	2200      	movs	r2, #0
 800af14:	055b      	lsls	r3, r3, #21
 800af16:	f7ff ffe1 	bl	800aedc <xflow>
 800af1a:	bd10      	pop	{r4, pc}

0800af1c <__math_oflow>:
 800af1c:	23e0      	movs	r3, #224	; 0xe0
 800af1e:	b510      	push	{r4, lr}
 800af20:	2200      	movs	r2, #0
 800af22:	05db      	lsls	r3, r3, #23
 800af24:	f7ff ffda 	bl	800aedc <xflow>
 800af28:	bd10      	pop	{r4, pc}

0800af2a <fabs>:
 800af2a:	004b      	lsls	r3, r1, #1
 800af2c:	0859      	lsrs	r1, r3, #1
 800af2e:	4770      	bx	lr

0800af30 <finite>:
 800af30:	4b02      	ldr	r3, [pc, #8]	; (800af3c <finite+0xc>)
 800af32:	0048      	lsls	r0, r1, #1
 800af34:	0840      	lsrs	r0, r0, #1
 800af36:	18c0      	adds	r0, r0, r3
 800af38:	0fc0      	lsrs	r0, r0, #31
 800af3a:	4770      	bx	lr
 800af3c:	80100000 	.word	0x80100000

0800af40 <nan>:
 800af40:	2000      	movs	r0, #0
 800af42:	4901      	ldr	r1, [pc, #4]	; (800af48 <nan+0x8>)
 800af44:	4770      	bx	lr
 800af46:	46c0      	nop			; (mov r8, r8)
 800af48:	7ff80000 	.word	0x7ff80000

0800af4c <scalbn>:
 800af4c:	004b      	lsls	r3, r1, #1
 800af4e:	b570      	push	{r4, r5, r6, lr}
 800af50:	0d5b      	lsrs	r3, r3, #21
 800af52:	0014      	movs	r4, r2
 800af54:	000a      	movs	r2, r1
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10d      	bne.n	800af76 <scalbn+0x2a>
 800af5a:	004b      	lsls	r3, r1, #1
 800af5c:	085b      	lsrs	r3, r3, #1
 800af5e:	4303      	orrs	r3, r0
 800af60:	d010      	beq.n	800af84 <scalbn+0x38>
 800af62:	4b27      	ldr	r3, [pc, #156]	; (800b000 <scalbn+0xb4>)
 800af64:	2200      	movs	r2, #0
 800af66:	f7f7 f8b1 	bl	80020cc <__aeabi_dmul>
 800af6a:	4b26      	ldr	r3, [pc, #152]	; (800b004 <scalbn+0xb8>)
 800af6c:	429c      	cmp	r4, r3
 800af6e:	da0a      	bge.n	800af86 <scalbn+0x3a>
 800af70:	4a25      	ldr	r2, [pc, #148]	; (800b008 <scalbn+0xbc>)
 800af72:	4b26      	ldr	r3, [pc, #152]	; (800b00c <scalbn+0xc0>)
 800af74:	e019      	b.n	800afaa <scalbn+0x5e>
 800af76:	4d26      	ldr	r5, [pc, #152]	; (800b010 <scalbn+0xc4>)
 800af78:	42ab      	cmp	r3, r5
 800af7a:	d108      	bne.n	800af8e <scalbn+0x42>
 800af7c:	0002      	movs	r2, r0
 800af7e:	000b      	movs	r3, r1
 800af80:	f7f6 f966 	bl	8001250 <__aeabi_dadd>
 800af84:	bd70      	pop	{r4, r5, r6, pc}
 800af86:	000a      	movs	r2, r1
 800af88:	004b      	lsls	r3, r1, #1
 800af8a:	0d5b      	lsrs	r3, r3, #21
 800af8c:	3b36      	subs	r3, #54	; 0x36
 800af8e:	4d21      	ldr	r5, [pc, #132]	; (800b014 <scalbn+0xc8>)
 800af90:	18e3      	adds	r3, r4, r3
 800af92:	42ab      	cmp	r3, r5
 800af94:	dd0c      	ble.n	800afb0 <scalbn+0x64>
 800af96:	4c20      	ldr	r4, [pc, #128]	; (800b018 <scalbn+0xcc>)
 800af98:	4d20      	ldr	r5, [pc, #128]	; (800b01c <scalbn+0xd0>)
 800af9a:	2900      	cmp	r1, #0
 800af9c:	da01      	bge.n	800afa2 <scalbn+0x56>
 800af9e:	4c1e      	ldr	r4, [pc, #120]	; (800b018 <scalbn+0xcc>)
 800afa0:	4d1f      	ldr	r5, [pc, #124]	; (800b020 <scalbn+0xd4>)
 800afa2:	0020      	movs	r0, r4
 800afa4:	0029      	movs	r1, r5
 800afa6:	4a1c      	ldr	r2, [pc, #112]	; (800b018 <scalbn+0xcc>)
 800afa8:	4b1c      	ldr	r3, [pc, #112]	; (800b01c <scalbn+0xd0>)
 800afaa:	f7f7 f88f 	bl	80020cc <__aeabi_dmul>
 800afae:	e7e9      	b.n	800af84 <scalbn+0x38>
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	dd05      	ble.n	800afc0 <scalbn+0x74>
 800afb4:	4c1b      	ldr	r4, [pc, #108]	; (800b024 <scalbn+0xd8>)
 800afb6:	051b      	lsls	r3, r3, #20
 800afb8:	4022      	ands	r2, r4
 800afba:	431a      	orrs	r2, r3
 800afbc:	0011      	movs	r1, r2
 800afbe:	e7e1      	b.n	800af84 <scalbn+0x38>
 800afc0:	001d      	movs	r5, r3
 800afc2:	3535      	adds	r5, #53	; 0x35
 800afc4:	da13      	bge.n	800afee <scalbn+0xa2>
 800afc6:	4a18      	ldr	r2, [pc, #96]	; (800b028 <scalbn+0xdc>)
 800afc8:	0fcb      	lsrs	r3, r1, #31
 800afca:	4294      	cmp	r4, r2
 800afcc:	dd08      	ble.n	800afe0 <scalbn+0x94>
 800afce:	4812      	ldr	r0, [pc, #72]	; (800b018 <scalbn+0xcc>)
 800afd0:	4912      	ldr	r1, [pc, #72]	; (800b01c <scalbn+0xd0>)
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <scalbn+0x8e>
 800afd6:	4810      	ldr	r0, [pc, #64]	; (800b018 <scalbn+0xcc>)
 800afd8:	4911      	ldr	r1, [pc, #68]	; (800b020 <scalbn+0xd4>)
 800afda:	4a0f      	ldr	r2, [pc, #60]	; (800b018 <scalbn+0xcc>)
 800afdc:	4b0f      	ldr	r3, [pc, #60]	; (800b01c <scalbn+0xd0>)
 800afde:	e7e4      	b.n	800afaa <scalbn+0x5e>
 800afe0:	4809      	ldr	r0, [pc, #36]	; (800b008 <scalbn+0xbc>)
 800afe2:	490a      	ldr	r1, [pc, #40]	; (800b00c <scalbn+0xc0>)
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d0c3      	beq.n	800af70 <scalbn+0x24>
 800afe8:	4807      	ldr	r0, [pc, #28]	; (800b008 <scalbn+0xbc>)
 800afea:	4910      	ldr	r1, [pc, #64]	; (800b02c <scalbn+0xe0>)
 800afec:	e7c0      	b.n	800af70 <scalbn+0x24>
 800afee:	4c0d      	ldr	r4, [pc, #52]	; (800b024 <scalbn+0xd8>)
 800aff0:	3336      	adds	r3, #54	; 0x36
 800aff2:	4022      	ands	r2, r4
 800aff4:	051b      	lsls	r3, r3, #20
 800aff6:	4313      	orrs	r3, r2
 800aff8:	0019      	movs	r1, r3
 800affa:	2200      	movs	r2, #0
 800affc:	4b0c      	ldr	r3, [pc, #48]	; (800b030 <scalbn+0xe4>)
 800affe:	e7d4      	b.n	800afaa <scalbn+0x5e>
 800b000:	43500000 	.word	0x43500000
 800b004:	ffff3cb0 	.word	0xffff3cb0
 800b008:	c2f8f359 	.word	0xc2f8f359
 800b00c:	01a56e1f 	.word	0x01a56e1f
 800b010:	000007ff 	.word	0x000007ff
 800b014:	000007fe 	.word	0x000007fe
 800b018:	8800759c 	.word	0x8800759c
 800b01c:	7e37e43c 	.word	0x7e37e43c
 800b020:	fe37e43c 	.word	0xfe37e43c
 800b024:	800fffff 	.word	0x800fffff
 800b028:	0000c350 	.word	0x0000c350
 800b02c:	81a56e1f 	.word	0x81a56e1f
 800b030:	3c900000 	.word	0x3c900000

0800b034 <nanf>:
 800b034:	4800      	ldr	r0, [pc, #0]	; (800b038 <nanf+0x4>)
 800b036:	4770      	bx	lr
 800b038:	7fc00000 	.word	0x7fc00000

0800b03c <_init>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	46c0      	nop			; (mov r8, r8)
 800b040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b042:	bc08      	pop	{r3}
 800b044:	469e      	mov	lr, r3
 800b046:	4770      	bx	lr

0800b048 <_fini>:
 800b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04a:	46c0      	nop			; (mov r8, r8)
 800b04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04e:	bc08      	pop	{r3}
 800b050:	469e      	mov	lr, r3
 800b052:	4770      	bx	lr
 800b054:	0000      	movs	r0, r0
	...

0800b058 <__FLASH_Program_Fast_veneer>:
 800b058:	b401      	push	{r0}
 800b05a:	4802      	ldr	r0, [pc, #8]	; (800b064 <__FLASH_Program_Fast_veneer+0xc>)
 800b05c:	4684      	mov	ip, r0
 800b05e:	bc01      	pop	{r0}
 800b060:	4760      	bx	ip
 800b062:	bf00      	nop
 800b064:	20000279 	.word	0x20000279

Disassembly of section .data:

20000000 <Ev_>:
20000000:	0800efec 0800efef 0800eff4 0800eff9     ................
20000010:	0800effc 0800f001 0800f013 0800f002     ................
20000020:	0800effd 0800effa 0800eff5 0800eff0     ................
20000030:	0800efed                                ....

20000034 <NN>:
20000034:	                                         .

20000035 <SS>:
20000035:	                                         .

20000036 <SelectValue>:
20000036:	3c0605ff 00000000                        ...<......

20000040 <a>:
20000040:	b18f283b 3d65287a                       ;(..z(e=

20000048 <b>:
20000048:	c91ef46e be442b86                       n....+D.

20000050 <c>:
20000050:	2e18cab0 3f155c91                       .....\.?

20000058 <d>:
20000058:	b98c7e28 3ff0096b                       (~..k..?

20000060 <shutters_str>:
20000060:	0800f006 0800f00b 0800f010 0800f015     ................
20000070:	0800f019 0800f01d 0800f021 0800f024     ........!...$...
20000080:	0800f027 0800f02a 0800f02c 0800efed     '...*...,.......
20000090:	0800f02e 0800f031                       ....1...

20000098 <x>:
20000098:	0000003b                                ;...

2000009c <SystemCoreClock>:
2000009c:	00f42400                                .$..

200000a0 <uwTickFreq>:
200000a0:	00000001                                ....

200000a4 <uwTickPrio>:
200000a4:	00000004                                ....

200000a8 <_impure_ptr>:
200000a8:	200000ac                                ... 

200000ac <impure_data>:
200000ac:	00000000 0800f584 0800f5a4 0800f564     ............d...
	...

2000010c <__global_locale>:
2000010c:	00000043 00000000 00000000 00000000     C...............
	...
2000012c:	00000043 00000000 00000000 00000000     C...............
	...
2000014c:	00000043 00000000 00000000 00000000     C...............
	...
2000016c:	00000043 00000000 00000000 00000000     C...............
	...
2000018c:	00000043 00000000 00000000 00000000     C...............
	...
200001ac:	00000043 00000000 00000000 00000000     C...............
	...
200001cc:	00000043 00000000 00000000 00000000     C...............
	...
200001ec:	080093d9 08008fa1 00000000 0800f463     ............c...
200001fc:	0800f461 0800f458 0800f458 0800f458     a...X...X...X...
2000020c:	0800f458 0800f458 0800f458 0800f458     X...X...X...X...
2000021c:	0800f458 0800f458 ffffffff ffffffff     X...X...........
2000022c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000254:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000278 <FLASH_Program_Fast>:
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000278:	2280      	movs	r2, #128	; 0x80
2000027a:	4b0c      	ldr	r3, [pc, #48]	; (200002ac <FLASH_Program_Fast+0x34>)
{
2000027c:	b530      	push	{r4, r5, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000027e:	695c      	ldr	r4, [r3, #20]
20000280:	02d2      	lsls	r2, r2, #11
20000282:	4322      	orrs	r2, r4
20000284:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000286:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
2000028a:	b672      	cpsid	i
  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000028c:	1c4c      	adds	r4, r1, #1
2000028e:	34ff      	adds	r4, #255	; 0xff
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000290:	1a40      	subs	r0, r0, r1
20000292:	680d      	ldr	r5, [r1, #0]
20000294:	5045      	str	r5, [r0, r1]
    src += 4U;
20000296:	3104      	adds	r1, #4
  while (index < 64U)
20000298:	42a1      	cmp	r1, r4
2000029a:	d1fa      	bne.n	20000292 <FLASH_Program_Fast+0x1a>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000029c:	2180      	movs	r1, #128	; 0x80
2000029e:	0249      	lsls	r1, r1, #9
200002a0:	6918      	ldr	r0, [r3, #16]
200002a2:	4208      	tst	r0, r1
200002a4:	d1fc      	bne.n	200002a0 <FLASH_Program_Fast+0x28>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002a6:	f382 8810 	msr	PRIMASK, r2
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002aa:	bd30      	pop	{r4, r5, pc}
200002ac:	40022000 	.word	0x40022000
